From: <Saved by Blink>
Snapshot-Content-Location: http://127.0.0.1:8080/interface.html
Subject: =?utf-8?Q?interface=20Package=20=E2=80=94=20Extron=20Library=203.4r7=20do?=
 =?utf-8?Q?cumentation?=
Date: Fri, 20 Dec 2019 06:34:56 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--yV7thi7h7yIOVpFHd4zV4ZYR8ecewD80fQvacJNAGL----"


------MultipartBoundary--yV7thi7h7yIOVpFHd4zV4ZYR8ecewD80fQvacJNAGL----
Content-Type: text/html
Content-ID: <frame-FF560A975D5B8860514579D00117E735@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: http://127.0.0.1:8080/interface.html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.=
w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns=3D"http://www.w3.=
org/1999/xhtml"><head><meta http-equiv=3D"Content-Type" content=3D"text/htm=
l; charset=3DUTF-8">
    <meta http-equiv=3D"X-UA-Compatible" content=3D"IE=3DEdge">
   =20
    <title>interface Package =E2=80=94 Extron Library 3.4r7 documentation</=
title>
    <link rel=3D"stylesheet" href=3D"http://127.0.0.1:8080/_static/classic.=
css" type=3D"text/css">
    <link rel=3D"stylesheet" href=3D"http://127.0.0.1:8080/_static/pygments=
.css" type=3D"text/css">
   =20
   =20
   =20
   =20
   =20
    <link rel=3D"index" title=3D"Index" href=3D"http://127.0.0.1:8080/genin=
dex.html">
    <link rel=3D"search" title=3D"Search" href=3D"http://127.0.0.1:8080/sea=
rch.html">
    <link rel=3D"next" title=3D"software Package" href=3D"http://127.0.0.1:=
8080/software.html">
    <link rel=3D"prev" title=3D"device Package" href=3D"http://127.0.0.1:80=
80/device.html">=20
  </head><body>
    <div class=3D"related" role=3D"navigation" aria-label=3D"related naviga=
tion">
      <h3>Navigation</h3>
      <ul>
        <li class=3D"right" style=3D"margin-right: 10px">
          <a href=3D"http://127.0.0.1:8080/genindex.html" title=3D"General =
Index" accesskey=3D"I">index</a></li>
        <li class=3D"right">
          <a href=3D"http://127.0.0.1:8080/py-modindex.html" title=3D"Pytho=
n Module Index">modules</a> |</li>
        <li class=3D"right">
          <a href=3D"http://127.0.0.1:8080/software.html" title=3D"software=
 Package" accesskey=3D"N">next</a> |</li>
        <li class=3D"right">
          <a href=3D"http://127.0.0.1:8080/device.html" title=3D"device Pac=
kage" accesskey=3D"P">previous</a> |</li>
        <li class=3D"nav-item nav-item-0"><a href=3D"http://127.0.0.1:8080/=
index.html">Extron Library</a></li>
		<li><span class=3D"version_switcher_placeholder"><select><option value=3D=
"3.4" selected=3D"selected">3.4r7</option><option value=3D"3.3">3.3</option=
><option value=3D"3.2">3.2</option><option value=3D"3.1">3.1</option><optio=
n value=3D"2.9">2.9</option></select></span></li>
		<li><a href=3D"http://127.0.0.1:8080/interface.html#">Documentation</a> =
=C2=BB </li>

          <li class=3D"nav-item nav-item-1"><a href=3D"http://127.0.0.1:808=
0/extronlib.html" accesskey=3D"U">extronlib Package</a> =C2=BB</li>=20
      </ul>
    </div> =20

    <div class=3D"document">
      <div class=3D"documentwrapper">
        <div class=3D"bodywrapper">
          <div class=3D"body" role=3D"main">
           =20
  <div class=3D"section" id=3D"module-extronlib.interface">
<span id=3D"interface-package"></span><h1>interface Package<a class=3D"head=
erlink" href=3D"http://127.0.0.1:8080/interface.html#module-extronlib.inter=
face" title=3D"Permalink to this headline">=C2=B6</a></h1>
<p>This package contains libraries for Extron hardware interfaces.</p>
<div class=3D"admonition warning">
<p class=3D"first admonition-title">Warning</p>
<ol class=3D"last arabic simple">
<li>An exception will be raised if an attempt is made to instantiate any
physical interface more than once.  Use the Initialize or Set*
functions to change modes where applicable.</li>
<li>Instantiating a physical interface that the controller does not have,
will be logged.<ul>
<li>Subsequent calls to that object=E2=80=99s methods will fail silently.</=
li>
<li>Subsequent calls to read that object=E2=80=99s properties will return
<code class=3D"docutils literal notranslate"><span class=3D"pre">None</span=
></code>.</li>
</ul>
</li>
</ol>
</div>
<div class=3D"topic">
<p class=3D"topic-title first">Summary of interface port names:</p>
<table border=3D"1" class=3D"colwidths-given docutils">
<colgroup>
<col width=3D"50%">
<col width=3D"50%">
</colgroup>
<tbody valign=3D"top">
<tr class=3D"row-odd"><td><strong>Interface</strong></td>
<td><strong>Port Name</strong></td>
</tr>
<tr class=3D"row-even"><td><a class=3D"reference internal" href=3D"http://1=
27.0.0.1:8080/interface.html#extronlib.interface.CircuitBreakerInterface" t=
itle=3D"extronlib.interface.CircuitBreakerInterface"><code class=3D"xref py=
 py-class docutils literal notranslate"><span class=3D"pre">CircuitBreakerI=
nterface</span></code></a></td>
<td><code class=3D"docutils literal notranslate"><span class=3D"pre">'CBR1'=
</span></code></td>
</tr>
<tr class=3D"row-odd"><td><a class=3D"reference internal" href=3D"http://12=
7.0.0.1:8080/interface.html#extronlib.interface.ContactInterface" title=3D"=
extronlib.interface.ContactInterface"><code class=3D"xref py py-class docut=
ils literal notranslate"><span class=3D"pre">ContactInterface</span></code>=
</a></td>
<td><code class=3D"docutils literal notranslate"><span class=3D"pre">'CII1'=
</span></code></td>
</tr>
<tr class=3D"row-even"><td><a class=3D"reference internal" href=3D"http://1=
27.0.0.1:8080/interface.html#extronlib.interface.DigitalInputInterface" tit=
le=3D"extronlib.interface.DigitalInputInterface"><code class=3D"xref py py-=
class docutils literal notranslate"><span class=3D"pre">DigitalInputInterfa=
ce</span></code></a></td>
<td><code class=3D"docutils literal notranslate"><span class=3D"pre">'DII1'=
</span></code></td>
</tr>
<tr class=3D"row-odd"><td><a class=3D"reference internal" href=3D"http://12=
7.0.0.1:8080/interface.html#extronlib.interface.DigitalIOInterface" title=
=3D"extronlib.interface.DigitalIOInterface"><code class=3D"xref py py-class=
 docutils literal notranslate"><span class=3D"pre">DigitalIOInterface</span=
></code></a></td>
<td><code class=3D"docutils literal notranslate"><span class=3D"pre">'DIO1'=
</span></code></td>
</tr>
<tr class=3D"row-even"><td><a class=3D"reference internal" href=3D"http://1=
27.0.0.1:8080/interface.html#extronlib.interface.FlexIOInterface" title=3D"=
extronlib.interface.FlexIOInterface"><code class=3D"xref py py-class docuti=
ls literal notranslate"><span class=3D"pre">FlexIOInterface</span></code></=
a></td>
<td><code class=3D"docutils literal notranslate"><span class=3D"pre">'FIO1'=
</span></code></td>
</tr>
<tr class=3D"row-odd"><td><a class=3D"reference internal" href=3D"http://12=
7.0.0.1:8080/interface.html#extronlib.interface.IRInterface" title=3D"extro=
nlib.interface.IRInterface"><code class=3D"xref py py-class docutils litera=
l notranslate"><span class=3D"pre">IRInterface</span></code></a></td>
<td><code class=3D"docutils literal notranslate"><span class=3D"pre">'IRS1'=
</span></code></td>
</tr>
<tr class=3D"row-even"><td><a class=3D"reference internal" href=3D"http://1=
27.0.0.1:8080/interface.html#extronlib.interface.PoEInterface" title=3D"ext=
ronlib.interface.PoEInterface"><code class=3D"xref py py-class docutils lit=
eral notranslate"><span class=3D"pre">PoEInterface</span></code></a></td>
<td><code class=3D"docutils literal notranslate"><span class=3D"pre">'POE1'=
</span></code></td>
</tr>
<tr class=3D"row-odd"><td><a class=3D"reference internal" href=3D"http://12=
7.0.0.1:8080/interface.html#extronlib.interface.RelayInterface" title=3D"ex=
tronlib.interface.RelayInterface"><code class=3D"xref py py-class docutils =
literal notranslate"><span class=3D"pre">RelayInterface</span></code></a></=
td>
<td><code class=3D"docutils literal notranslate"><span class=3D"pre">'RLY1'=
</span></code></td>
</tr>
<tr class=3D"row-even"><td><a class=3D"reference internal" href=3D"http://1=
27.0.0.1:8080/interface.html#extronlib.interface.SerialInterface" title=3D"=
extronlib.interface.SerialInterface"><code class=3D"xref py py-class docuti=
ls literal notranslate"><span class=3D"pre">SerialInterface</span></code></=
a></td>
<td><code class=3D"docutils literal notranslate"><span class=3D"pre">'COM1'=
</span></code></td>
</tr>
<tr class=3D"row-odd"><td><a class=3D"reference internal" href=3D"http://12=
7.0.0.1:8080/interface.html#extronlib.interface.SWACReceptacleInterface" ti=
tle=3D"extronlib.interface.SWACReceptacleInterface"><code class=3D"xref py =
py-class docutils literal notranslate"><span class=3D"pre">SWACReceptacleIn=
terface</span></code></a></td>
<td><code class=3D"docutils literal notranslate"><span class=3D"pre">'SAC1'=
</span></code></td>
</tr>
<tr class=3D"row-even"><td><a class=3D"reference internal" href=3D"http://1=
27.0.0.1:8080/interface.html#extronlib.interface.SWPowerInterface" title=3D=
"extronlib.interface.SWPowerInterface"><code class=3D"xref py py-class docu=
tils literal notranslate"><span class=3D"pre">SWPowerInterface</span></code=
></a></td>
<td><code class=3D"docutils literal notranslate"><span class=3D"pre">'SPI1'=
</span></code></td>
</tr>
<tr class=3D"row-odd"><td><a class=3D"reference internal" href=3D"http://12=
7.0.0.1:8080/interface.html#extronlib.interface.VolumeInterface" title=3D"e=
xtronlib.interface.VolumeInterface"><code class=3D"xref py py-class docutil=
s literal notranslate"><span class=3D"pre">VolumeInterface</span></code></a=
></td>
<td><code class=3D"docutils literal notranslate"><span class=3D"pre">'VOL1'=
</span></code></td>
</tr>
</tbody>
</table>
<p>See <a class=3D"reference internal" href=3D"http://127.0.0.1:8080/produc=
ts.html#ref-products"><span class=3D"std std-ref">Device/Port Interface Tab=
les</span></a> to identify which <a class=3D"reference internal" href=3D"ht=
tp://127.0.0.1:8080/device.html#module-extronlib.device" title=3D"extronlib=
.device"><code class=3D"xref py py-mod docutils literal notranslate"><span =
class=3D"pre">device</span></code></a> and
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">interface<=
/span></code></a> classes to use for each product.</p>
</div>
<div class=3D"section" id=3D"circuitbreakerinterface-class">
<h2><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#extronlib.interface.CircuitBreakerInterface" title=3D"extronlib.inter=
face.CircuitBreakerInterface"><code class=3D"xref py py-class docutils lite=
ral notranslate"><span class=3D"pre">CircuitBreakerInterface</span></code><=
/a> Class<a class=3D"headerlink" href=3D"http://127.0.0.1:8080/interface.ht=
ml#circuitbreakerinterface-class" title=3D"Permalink to this headline">=C2=
=B6</a></h2>
<dl class=3D"class">
<dt id=3D"extronlib.interface.CircuitBreakerInterface">
<em class=3D"property">class </em><code class=3D"descname">CircuitBreakerIn=
terface</code><span class=3D"sig-paren">(</span><em>Host</em>, <em>Port</em=
><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"http://1=
27.0.0.1:8080/interface.html#extronlib.interface.CircuitBreakerInterface" t=
itle=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>This class provides a common interface to a circuit breaker on an Ex=
tron
product (<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/devi=
ce.html#module-extronlib.device" title=3D"extronlib.device"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
device</span></code></a>). The user can instantiate the class
directly or create a subclass to add, remove, or alter behavior for differe=
nt
types of devices.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified">New in version 3.1.</span></p>
</div>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><ul class=3D"first last simple">
<li><strong>Host</strong> (<a class=3D"reference internal" href=3D"http://1=
27.0.0.1:8080/device.html#module-extronlib.device" title=3D"extronlib.devic=
e"><code class=3D"xref py py-mod docutils literal notranslate"><span class=
=3D"pre">extronlib.device</span></code></a>) =E2=80=93 handle to Extron dev=
ice class that instantiated this
interface class</li>
<li><strong>Port</strong> (<em>string</em>) =E2=80=93 port name (e.g. <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">'CBR1'</span></=
code>)</li>
</ul>
</td>
</tr>
</tbody>
</table>
<dl class=3D"attribute">
<dt id=3D"extronlib.interface.CircuitBreakerInterface.Host">
<code class=3D"descname">Host</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.CircuitBreakerInterface.H=
ost" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">handle to Extron device class that instantiated this inte=
rface
class</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body"><a class=3D"reference internal" href=3D"http://127.0=
.0.1:8080/device.html#module-extronlib.device" title=3D"extronlib.device"><=
code class=3D"xref py py-mod docutils literal notranslate"><span class=3D"p=
re">extronlib.device</span></code></a></td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.CircuitBreakerInterface.Offline">
<code class=3D"descname">Offline</code><a class=3D"headerlink" href=3D"http=
://127.0.0.1:8080/interface.html#extronlib.interface.CircuitBreakerInterfac=
e.Offline" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when port goes offline</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
interface</span></code></a> instance triggering the event and the
second one is a string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">'Offline'</span></code>).</p>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"nd">@event</span><span class=3D"p">(</span><span=
 class=3D"n">SomeInterface</span><span class=3D"p">,</span> <span class=3D"=
p">[</span><span class=3D"s1">'Online'</span><span class=3D"p">,</span> <sp=
an class=3D"s1">'Offline'</span><span class=3D"p">])</span>
<span class=3D"k">def</span> <span class=3D"nf">HandleConnection</span><spa=
n class=3D"p">(</span><span class=3D"n">interface</span><span class=3D"p">,=
</span> <span class=3D"n">state</span><span class=3D"p">):</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s1">'{} is now {}'</span><span class=3D"o">.</span><span class=3D"n">format=
</span><span class=3D"p">(</span><span class=3D"n">interface</span><span cl=
ass=3D"o">.</span><span class=3D"n">Port</span><span class=3D"p">,</span> <=
span class=3D"n">state</span><span class=3D"p">))</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.CircuitBreakerInterface.Online">
<code class=3D"descname">Online</code><a class=3D"headerlink" href=3D"http:=
//127.0.0.1:8080/interface.html#extronlib.interface.CircuitBreakerInterface=
.Online" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when port goes online</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
interface</span></code></a> instance triggering the event and the
second one is a string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">'Online'</span></code>).</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.CircuitBreakerInterface.Port">
<code class=3D"descname">Port</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.CircuitBreakerInterface.P=
ort" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">port name</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.CircuitBreakerInterface.State">
<code class=3D"descname">State</code><a class=3D"headerlink" href=3D"http:/=
/127.0.0.1:8080/interface.html#extronlib.interface.CircuitBreakerInterface.=
State" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">current state of the circuit breaker (<code class=3D"docu=
tils literal notranslate"><span class=3D"pre">'Closed'</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">'Tripped'<=
/span></code>)</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.CircuitBreakerInterface.StateChanged">
<code class=3D"descname">StateChanged</code><a class=3D"headerlink" href=3D=
"http://127.0.0.1:8080/interface.html#extronlib.interface.CircuitBreakerInt=
erface.StateChanged" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when the circuit breaker state changes.</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
interface</span></code></a> instance triggering the event, and
the second is a string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">'Closed'</span></code> or <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">'Tripped'</span></code>).</p>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"nd">@event</span><span class=3D"p">(</span><span=
 class=3D"n">SomeInterface</span><span class=3D"p">,</span> <span class=3D"=
s1">'StateChanged'</span><span class=3D"p">)</span>
<span class=3D"k">def</span> <span class=3D"nf">HandleStateChanged</span><s=
pan class=3D"p">(</span><span class=3D"n">interface</span><span class=3D"p"=
>,</span> <span class=3D"n">state</span><span class=3D"p">):</span>
    <span class=3D"k">if</span> <span class=3D"n">state</span> <span class=
=3D"o">=3D=3D</span> <span class=3D"s1">'Tripped'</span><span class=3D"p">:=
</span>
        <span class=3D"n">TrippedAlert</span><span class=3D"p">()</span>
</pre></div>
</div>
</dd></dl>

</dd></dl>

</div>
<div class=3D"section" id=3D"clientobject-class">
<h2><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#extronlib.interface.ClientObject" title=3D"extronlib.interface.Client=
Object"><code class=3D"xref py py-class docutils literal notranslate"><span=
 class=3D"pre">ClientObject</span></code></a> Class<a class=3D"headerlink" =
href=3D"http://127.0.0.1:8080/interface.html#clientobject-class" title=3D"P=
ermalink to this headline">=C2=B6</a></h2>
<dl class=3D"class">
<dt id=3D"extronlib.interface.ClientObject">
<em class=3D"property">class </em><code class=3D"descname">ClientObject</co=
de><a class=3D"headerlink" href=3D"http://127.0.0.1:8080/interface.html#ext=
ronlib.interface.ClientObject" title=3D"Permalink to this definition">=C2=
=B6</a></dt>
<dd><p>This class provides a handle to connected clients to an
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#extronlib.interface.EthernetServerInterfaceEx" title=3D"extronlib.interfa=
ce.EthernetServerInterfaceEx"><code class=3D"xref py py-class docutils lite=
ral notranslate"><span class=3D"pre">EthernetServerInterfaceEx</span></code=
></a>.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">This class cannot be instantiated by the programmer.  It =
is only
created by the <a class=3D"reference internal" href=3D"http://127.0.0.1:808=
0/interface.html#extronlib.interface.EthernetServerInterfaceEx" title=3D"ex=
tronlib.interface.EthernetServerInterfaceEx"><code class=3D"xref py py-clas=
s docutils literal notranslate"><span class=3D"pre">EthernetServerInterface=
Ex</span></code></a> object.</p>
</div>
<div class=3D"versionadded">
<p><span class=3D"versionmodified">New in version 2.4.</span></p>
</div>
<dl class=3D"method">
<dt id=3D"extronlib.interface.ClientObject.Disconnect">
<code class=3D"descname">Disconnect</code><span class=3D"sig-paren">(</span=
><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"http://1=
27.0.0.1:8080/interface.html#extronlib.interface.ClientObject.Disconnect" t=
itle=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Closes the connection gracefully on client.</p>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.ClientObject.Send">
<code class=3D"descname">Send</code><span class=3D"sig-paren">(</span><em>d=
ata</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"h=
ttp://127.0.0.1:8080/interface.html#extronlib.interface.ClientObject.Send" =
title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Send string to the client.</p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><strong>data</strong> (<em>bytes</em><em>, </em><em>st=
ring</em>) =E2=80=93 string to send out</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Raise:</th><td clas=
s=3D"field-body">TypeError, IOError</td>
</tr>
</tbody>
</table>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">client</span><span class=3D"o">.</span><span =
class=3D"n">Send</span><span class=3D"p">(</span><span class=3D"sa">b</span=
><span class=3D"s1">'Hello.</span><span class=3D"se">\n</span><span class=
=3D"s1">'</span><span class=3D"p">)</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.ClientObject.Hostname">
<code class=3D"descname">Hostname</code><a class=3D"headerlink" href=3D"htt=
p://127.0.0.1:8080/interface.html#extronlib.interface.ClientObject.Hostname=
" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">Hostname DNS name of the connection. Can be the IP Addres=
s</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.ClientObject.IPAddress">
<code class=3D"descname">IPAddress</code><a class=3D"headerlink" href=3D"ht=
tp://127.0.0.1:8080/interface.html#extronlib.interface.ClientObject.IPAddre=
ss" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">the IP Address of the connected device</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.ClientObject.ServicePort">
<code class=3D"descname">ServicePort</code><a class=3D"headerlink" href=3D"=
http://127.0.0.1:8080/interface.html#extronlib.interface.ClientObject.Servi=
cePort" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">ServicePort port on which the client will listen for data=
</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">int</td>
</tr>
</tbody>
</table>
</dd></dl>

</dd></dl>

</div>
<div class=3D"section" id=3D"contactinterface-class">
<h2><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#extronlib.interface.ContactInterface" title=3D"extronlib.interface.Co=
ntactInterface"><code class=3D"xref py py-class docutils literal notranslat=
e"><span class=3D"pre">ContactInterface</span></code></a> Class<a class=3D"=
headerlink" href=3D"http://127.0.0.1:8080/interface.html#contactinterface-c=
lass" title=3D"Permalink to this headline">=C2=B6</a></h2>
<dl class=3D"class">
<dt id=3D"extronlib.interface.ContactInterface">
<em class=3D"property">class </em><code class=3D"descname">ContactInterface=
</code><span class=3D"sig-paren">(</span><em>Host</em>, <em>Port</em><span =
class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"http://127.0.0.=
1:8080/interface.html#extronlib.interface.ContactInterface" title=3D"Permal=
ink to this definition">=C2=B6</a></dt>
<dd><p>This class will provide a common interface for controlling and colle=
cting
data from Contact Input ports on Extron devices
(<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/device.html#=
module-extronlib.device" title=3D"extronlib.device"><code class=3D"xref py =
py-mod docutils literal notranslate"><span class=3D"pre">extronlib.device</=
span></code></a>). The user can instantiate the class directly
or create a subclass to add, remove, or alter behavior for different types
of devices.</p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><ul class=3D"first last simple">
<li><strong>Host</strong> (<a class=3D"reference internal" href=3D"http://1=
27.0.0.1:8080/device.html#module-extronlib.device" title=3D"extronlib.devic=
e"><code class=3D"xref py py-mod docutils literal notranslate"><span class=
=3D"pre">extronlib.device</span></code></a>) =E2=80=93 handle to Extron dev=
ice class that instantiated this
interface class</li>
<li><strong>Port</strong> (<em>string</em>) =E2=80=93 port name (e.g. <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">'CII1'</span></=
code>)</li>
</ul>
</td>
</tr>
</tbody>
</table>
<div class=3D"versionadded">
<p><span class=3D"versionmodified">New in version 3.2: </span>Host can be e=
BUSDevice.</p>
</div>
<dl class=3D"attribute">
<dt id=3D"extronlib.interface.ContactInterface.Host">
<code class=3D"descname">Host</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.ContactInterface.Host" ti=
tle=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">handle to Extron device class that instantiated this inte=
rface
class</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body"><a class=3D"reference internal" href=3D"http://127.0=
.0.1:8080/device.html#module-extronlib.device" title=3D"extronlib.device"><=
code class=3D"xref py py-mod docutils literal notranslate"><span class=3D"p=
re">extronlib.device</span></code></a></td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.ContactInterface.Offline">
<code class=3D"descname">Offline</code><a class=3D"headerlink" href=3D"http=
://127.0.0.1:8080/interface.html#extronlib.interface.ContactInterface.Offli=
ne" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when port goes offline</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
interface</span></code></a> instance triggering the event and the
second one is a string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">'Offline'</span></code>).</p>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"nd">@event</span><span class=3D"p">(</span><span=
 class=3D"n">SomeInterface</span><span class=3D"p">,</span> <span class=3D"=
p">[</span><span class=3D"s1">'Online'</span><span class=3D"p">,</span> <sp=
an class=3D"s1">'Offline'</span><span class=3D"p">])</span>
<span class=3D"k">def</span> <span class=3D"nf">HandleConnection</span><spa=
n class=3D"p">(</span><span class=3D"n">interface</span><span class=3D"p">,=
</span> <span class=3D"n">state</span><span class=3D"p">):</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s1">'{} is now {}'</span><span class=3D"o">.</span><span class=3D"n">format=
</span><span class=3D"p">(</span><span class=3D"n">interface</span><span cl=
ass=3D"o">.</span><span class=3D"n">Port</span><span class=3D"p">,</span> <=
span class=3D"n">state</span><span class=3D"p">))</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.ContactInterface.Online">
<code class=3D"descname">Online</code><a class=3D"headerlink" href=3D"http:=
//127.0.0.1:8080/interface.html#extronlib.interface.ContactInterface.Online=
" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when port goes online</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
interface</span></code></a> instance triggering the event and the
second one is a string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">'Online'</span></code>).</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.ContactInterface.Port">
<code class=3D"descname">Port</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.ContactInterface.Port" ti=
tle=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">port name</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.ContactInterface.State">
<code class=3D"descname">State</code><a class=3D"headerlink" href=3D"http:/=
/127.0.0.1:8080/interface.html#extronlib.interface.ContactInterface.State" =
title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">current state of IO port (<code class=3D"docutils literal=
 notranslate"><span class=3D"pre">'On'</span></code>, <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">'Off'</span></code>)</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.ContactInterface.StateChanged">
<code class=3D"descname">StateChanged</code><a class=3D"headerlink" href=3D=
"http://127.0.0.1:8080/interface.html#extronlib.interface.ContactInterface.=
StateChanged" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when the input state changes.</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
interface</span></code></a> instance triggering the event and the
second one is a string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">'On'</span></code> or <code class=3D"docutils literal notrans=
late"><span class=3D"pre">'Off'</span></code>).</p>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"nd">@event</span><span class=3D"p">(</span><span=
 class=3D"n">InputInterface</span><span class=3D"p">,</span> <span class=3D=
"s1">'StateChanged'</span><span class=3D"p">)</span>
<span class=3D"k">def</span> <span class=3D"nf">HandleStateChanged</span><s=
pan class=3D"p">(</span><span class=3D"n">interface</span><span class=3D"p"=
>,</span> <span class=3D"n">state</span><span class=3D"p">):</span>
    <span class=3D"k">if</span> <span class=3D"n">state</span> <span class=
=3D"o">=3D=3D</span> <span class=3D"s1">'On'</span><span class=3D"p">:</spa=
n>
        <span class=3D"n">StartCombinedInit</span><span class=3D"p">()</spa=
n>
    <span class=3D"k">else</span><span class=3D"p">:</span>
        <span class=3D"n">StartSeparateInit</span><span class=3D"p">()</spa=
n>
</pre></div>
</div>
</dd></dl>

</dd></dl>

</div>
<div class=3D"section" id=3D"digitalinputinterface-class">
<h2><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#extronlib.interface.DigitalInputInterface" title=3D"extronlib.interfa=
ce.DigitalInputInterface"><code class=3D"xref py py-class docutils literal =
notranslate"><span class=3D"pre">DigitalInputInterface</span></code></a> Cl=
ass<a class=3D"headerlink" href=3D"http://127.0.0.1:8080/interface.html#dig=
italinputinterface-class" title=3D"Permalink to this headline">=C2=B6</a></=
h2>
<dl class=3D"class">
<dt id=3D"extronlib.interface.DigitalInputInterface">
<em class=3D"property">class </em><code class=3D"descname">DigitalInputInte=
rface</code><span class=3D"sig-paren">(</span><em>Host</em>, <em>Port</em>,=
 <em>Pullup=3DFalse</em><span class=3D"sig-paren">)</span><a class=3D"heade=
rlink" href=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.Dig=
italInputInterface" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>This class will provide a common interface for collecting data from
Digital Input ports on Extron devices (<a class=3D"reference internal" href=
=3D"http://127.0.0.1:8080/device.html#module-extronlib.device" title=3D"ext=
ronlib.device"><code class=3D"xref py py-mod docutils literal notranslate">=
<span class=3D"pre">extronlib.device</span></code></a>).
The user can instantiate the class directly or create a subclass to add,
remove, or alter behavior for different types of devices.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified">New in version 3.1.</span></p>
</div>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><ul class=3D"first last simple">
<li><strong>Host</strong> (<a class=3D"reference internal" href=3D"http://1=
27.0.0.1:8080/device.html#module-extronlib.device" title=3D"extronlib.devic=
e"><code class=3D"xref py py-mod docutils literal notranslate"><span class=
=3D"pre">extronlib.device</span></code></a>) =E2=80=93 handle to Extron dev=
ice class that instantiated this
interface class</li>
<li><strong>Port</strong> (<em>string</em>) =E2=80=93 port name (e.g. <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">'DII1'</span></=
code>)</li>
<li><strong>Pullup</strong> (<em>bool</em>) =E2=80=93 pull-up state on the =
port</li>
</ul>
</td>
</tr>
</tbody>
</table>
<dl class=3D"method">
<dt id=3D"extronlib.interface.DigitalInputInterface.Initialize">
<code class=3D"descname">Initialize</code><span class=3D"sig-paren">(</span=
><em>Pullup=3DNone</em><span class=3D"sig-paren">)</span><a class=3D"header=
link" href=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.Digi=
talInputInterface.Initialize" title=3D"Permalink to this definition">=C2=B6=
</a></dt>
<dd><p>Initializes Digital Input Port to given values. User may provide
any or all of the parameters.  <code class=3D"docutils literal notranslate"=
><span class=3D"pre">None</span></code> leaves property unmodified.</p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><strong>Pullup</strong> (<em>bool</em>) =E2=80=93 pull=
-up state on the port</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.DigitalInputInterface.Host">
<code class=3D"descname">Host</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.DigitalInputInterface.Hos=
t" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">handle to Extron device class that instantiated this inte=
rface
class</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body"><a class=3D"reference internal" href=3D"http://127.0=
.0.1:8080/device.html#module-extronlib.device" title=3D"extronlib.device"><=
code class=3D"xref py py-mod docutils literal notranslate"><span class=3D"p=
re">extronlib.device</span></code></a></td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.DigitalInputInterface.Offline">
<code class=3D"descname">Offline</code><a class=3D"headerlink" href=3D"http=
://127.0.0.1:8080/interface.html#extronlib.interface.DigitalInputInterface.=
Offline" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when port goes offline</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
interface</span></code></a> instance triggering the event and the
second one is a string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">'Offline'</span></code>).</p>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"nd">@event</span><span class=3D"p">(</span><span=
 class=3D"n">SomeInterface</span><span class=3D"p">,</span> <span class=3D"=
p">[</span><span class=3D"s1">'Online'</span><span class=3D"p">,</span> <sp=
an class=3D"s1">'Offline'</span><span class=3D"p">])</span>
<span class=3D"k">def</span> <span class=3D"nf">HandleConnection</span><spa=
n class=3D"p">(</span><span class=3D"n">interface</span><span class=3D"p">,=
</span> <span class=3D"n">state</span><span class=3D"p">):</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s1">'{} is now {}'</span><span class=3D"o">.</span><span class=3D"n">format=
</span><span class=3D"p">(</span><span class=3D"n">interface</span><span cl=
ass=3D"o">.</span><span class=3D"n">Port</span><span class=3D"p">,</span> <=
span class=3D"n">state</span><span class=3D"p">))</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.DigitalInputInterface.Online">
<code class=3D"descname">Online</code><a class=3D"headerlink" href=3D"http:=
//127.0.0.1:8080/interface.html#extronlib.interface.DigitalInputInterface.O=
nline" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when port goes online</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
interface</span></code></a> instance triggering the event and the
second one is a string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">'Online'</span></code>).</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.DigitalInputInterface.Port">
<code class=3D"descname">Port</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.DigitalInputInterface.Por=
t" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">port name</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.DigitalInputInterface.Pullup">
<code class=3D"descname">Pullup</code><a class=3D"headerlink" href=3D"http:=
//127.0.0.1:8080/interface.html#extronlib.interface.DigitalInputInterface.P=
ullup" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">indicates if the Input port is being pulled up or not</td=
>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">bool</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.DigitalInputInterface.State">
<code class=3D"descname">State</code><a class=3D"headerlink" href=3D"http:/=
/127.0.0.1:8080/interface.html#extronlib.interface.DigitalInputInterface.St=
ate" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">current state of Input port (<code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">'On'</span></code>, <code class=3D"doc=
utils literal notranslate"><span class=3D"pre">'Off'</span></code>)</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.DigitalInputInterface.StateChanged">
<code class=3D"descname">StateChanged</code><a class=3D"headerlink" href=3D=
"http://127.0.0.1:8080/interface.html#extronlib.interface.DigitalInputInter=
face.StateChanged" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when the input state changes.</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
interface</span></code></a> instance triggering the event and
the second is a string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">'On'</span></code> or <code class=3D"docutils literal notrans=
late"><span class=3D"pre">'Off'</span></code>).</p>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"nd">@event</span><span class=3D"p">(</span><span=
 class=3D"n">InputInterface</span><span class=3D"p">,</span> <span class=3D=
"s1">'StateChanged'</span><span class=3D"p">)</span>
<span class=3D"k">def</span> <span class=3D"nf">HandleStateChanged</span><s=
pan class=3D"p">(</span><span class=3D"n">interface</span><span class=3D"p"=
>,</span> <span class=3D"n">state</span><span class=3D"p">):</span>
    <span class=3D"k">if</span> <span class=3D"n">state</span> <span class=
=3D"o">=3D=3D</span> <span class=3D"s1">'On'</span><span class=3D"p">:</spa=
n>
        <span class=3D"n">StartCombinedInit</span><span class=3D"p">()</spa=
n>
    <span class=3D"k">else</span><span class=3D"p">:</span>
        <span class=3D"n">StartSeparateInit</span><span class=3D"p">()</spa=
n>
</pre></div>
</div>
</dd></dl>

</dd></dl>

</div>
<div class=3D"section" id=3D"digitaliointerface-class">
<h2><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#extronlib.interface.DigitalIOInterface" title=3D"extronlib.interface.=
DigitalIOInterface"><code class=3D"xref py py-class docutils literal notran=
slate"><span class=3D"pre">DigitalIOInterface</span></code></a> Class<a cla=
ss=3D"headerlink" href=3D"http://127.0.0.1:8080/interface.html#digitalioint=
erface-class" title=3D"Permalink to this headline">=C2=B6</a></h2>
<dl class=3D"class">
<dt id=3D"extronlib.interface.DigitalIOInterface">
<em class=3D"property">class </em><code class=3D"descname">DigitalIOInterfa=
ce</code><span class=3D"sig-paren">(</span><em>Host</em>, <em>Port</em>, <e=
m>Mode=3D'DigitalInput'</em>, <em>Pullup=3DFalse</em><span class=3D"sig-par=
en">)</span><a class=3D"headerlink" href=3D"http://127.0.0.1:8080/interface=
.html#extronlib.interface.DigitalIOInterface" title=3D"Permalink to this de=
finition">=C2=B6</a></dt>
<dd><p>This class will provide a common interface for controlling and colle=
cting
data from Digital IO ports on Extron devices (<a class=3D"reference interna=
l" href=3D"http://127.0.0.1:8080/device.html#module-extronlib.device" title=
=3D"extronlib.device"><code class=3D"xref py py-mod docutils literal notran=
slate"><span class=3D"pre">extronlib.device</span></code></a>).
The user can instantiate the class directly or create a subclass to add,
remove, or alter behavior for different types of devices.</p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><ul class=3D"first last simple">
<li><strong>Host</strong> (<a class=3D"reference internal" href=3D"http://1=
27.0.0.1:8080/device.html#module-extronlib.device" title=3D"extronlib.devic=
e"><code class=3D"xref py py-mod docutils literal notranslate"><span class=
=3D"pre">extronlib.device</span></code></a>) =E2=80=93 handle to Extron dev=
ice class that instantiated this
interface class</li>
<li><strong>Port</strong> (<em>string</em>) =E2=80=93 port name (e.g. <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">'DIO1'</span></=
code>)</li>
<li><strong>Mode</strong> (<em>string</em>) =E2=80=93 Possible modes are: <=
code class=3D"docutils literal notranslate"><span class=3D"pre">'DigitalInp=
ut'</span></code> (default), and
<code class=3D"docutils literal notranslate"><span class=3D"pre">'DigitalOu=
tput'</span></code></li>
<li><strong>Pullup</strong> (<em>bool</em>) =E2=80=93 pull-up state on the =
port</li>
</ul>
</td>
</tr>
</tbody>
</table>
<div class=3D"versionadded">
<p><span class=3D"versionmodified">New in version 3.2: </span>Host can be e=
BUSDevice.</p>
</div>
<dl class=3D"method">
<dt id=3D"extronlib.interface.DigitalIOInterface.Initialize">
<code class=3D"descname">Initialize</code><span class=3D"sig-paren">(</span=
><em>Mode=3DNone</em>, <em>Pullup=3DNone</em><span class=3D"sig-paren">)</s=
pan><a class=3D"headerlink" href=3D"http://127.0.0.1:8080/interface.html#ex=
tronlib.interface.DigitalIOInterface.Initialize" title=3D"Permalink to this=
 definition">=C2=B6</a></dt>
<dd><p>Initializes Digital IO Port to given values. User may provide any or
all of the parameters.  <code class=3D"docutils literal notranslate"><span =
class=3D"pre">None</span></code> leaves property unmodified.</p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><ul class=3D"first last simple">
<li><strong>Mode</strong> (<em>string</em>) =E2=80=93 Possible modes are: <=
code class=3D"docutils literal notranslate"><span class=3D"pre">'DigitalInp=
ut'</span></code>, and
<code class=3D"docutils literal notranslate"><span class=3D"pre">'DigitalOu=
tput'</span></code></li>
<li><strong>Pullup</strong> (<em>bool</em>) =E2=80=93 pull-up state on the =
port</li>
</ul>
</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.DigitalIOInterface.Pulse">
<code class=3D"descname">Pulse</code><span class=3D"sig-paren">(</span><em>=
duration</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=
=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.DigitalIOInter=
face.Pulse" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Turns the port on for the specified time in seconds with 10ms accura=
cy
and a 100ms minimum value.</p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><strong>duration</strong> (<em>float</em>) =E2=80=93 p=
ulse duration</td>
</tr>
</tbody>
</table>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">OutputInterface</span><span class=3D"o">.</sp=
an><span class=3D"n">Pulse</span><span class=3D"p">(</span><span class=3D"m=
f">0.3</span><span class=3D"p">)</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.DigitalIOInterface.SetState">
<code class=3D"descname">SetState</code><span class=3D"sig-paren">(</span><=
em>State</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=
=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.DigitalIOInter=
face.SetState" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><strong>State</strong> (<em>int</em><em>, </em><em>str=
ing</em>) =E2=80=93 output state to be set (<code class=3D"docutils literal=
 notranslate"><span class=3D"pre">'On'</span></code> or <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">1</span></code>, <code class=
=3D"docutils literal notranslate"><span class=3D"pre">'Off'</span></code> o=
r
<code class=3D"docutils literal notranslate"><span class=3D"pre">0</span></=
code>)</td>
</tr>
</tbody>
</table>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">OutputInterface</span><span class=3D"o">.</sp=
an><span class=3D"n">SetState</span><span class=3D"p">(</span><span class=
=3D"s1">'On'</span><span class=3D"p">)</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.DigitalIOInterface.Toggle">
<code class=3D"descname">Toggle</code><span class=3D"sig-paren">(</span><sp=
an class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"http://127.0=
.0.1:8080/interface.html#extronlib.interface.DigitalIOInterface.Toggle" tit=
le=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Changes the state of the IO Object to the logical opposite of the
current state.</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.DigitalIOInterface.Host">
<code class=3D"descname">Host</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.DigitalIOInterface.Host" =
title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">handle to Extron device class that instantiated this inte=
rface
class</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body"><a class=3D"reference internal" href=3D"http://127.0=
.0.1:8080/device.html#module-extronlib.device" title=3D"extronlib.device"><=
code class=3D"xref py py-mod docutils literal notranslate"><span class=3D"p=
re">extronlib.device</span></code></a></td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.DigitalIOInterface.Mode">
<code class=3D"descname">Mode</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.DigitalIOInterface.Mode" =
title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">mode of the Digital IO port (<code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">'DigitalInput'</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">'DigitalOu=
tput'</span></code>)</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.DigitalIOInterface.Offline">
<code class=3D"descname">Offline</code><a class=3D"headerlink" href=3D"http=
://127.0.0.1:8080/interface.html#extronlib.interface.DigitalIOInterface.Off=
line" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when port goes offline</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
interface</span></code></a> instance triggering the event and the
second one is a string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">'Offline'</span></code>).</p>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"nd">@event</span><span class=3D"p">(</span><span=
 class=3D"n">SomeInterface</span><span class=3D"p">,</span> <span class=3D"=
p">[</span><span class=3D"s1">'Online'</span><span class=3D"p">,</span> <sp=
an class=3D"s1">'Offline'</span><span class=3D"p">])</span>
<span class=3D"k">def</span> <span class=3D"nf">HandleConnection</span><spa=
n class=3D"p">(</span><span class=3D"n">interface</span><span class=3D"p">,=
</span> <span class=3D"n">state</span><span class=3D"p">):</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s1">'{} is now {}'</span><span class=3D"o">.</span><span class=3D"n">format=
</span><span class=3D"p">(</span><span class=3D"n">interface</span><span cl=
ass=3D"o">.</span><span class=3D"n">Port</span><span class=3D"p">,</span> <=
span class=3D"n">state</span><span class=3D"p">))</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.DigitalIOInterface.Online">
<code class=3D"descname">Online</code><a class=3D"headerlink" href=3D"http:=
//127.0.0.1:8080/interface.html#extronlib.interface.DigitalIOInterface.Onli=
ne" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when port goes online</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
interface</span></code></a> instance triggering the event and the
second one is a string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">'Online'</span></code>).</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.DigitalIOInterface.Port">
<code class=3D"descname">Port</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.DigitalIOInterface.Port" =
title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">port name</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.DigitalIOInterface.Pullup">
<code class=3D"descname">Pullup</code><a class=3D"headerlink" href=3D"http:=
//127.0.0.1:8080/interface.html#extronlib.interface.DigitalIOInterface.Pull=
up" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">indicates if the input port is being pulled up or not</td=
>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">bool</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.DigitalIOInterface.State">
<code class=3D"descname">State</code><a class=3D"headerlink" href=3D"http:/=
/127.0.0.1:8080/interface.html#extronlib.interface.DigitalIOInterface.State=
" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">current state of IO port (<code class=3D"docutils literal=
 notranslate"><span class=3D"pre">'On'</span></code>, <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">'Off'</span></code>)</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.DigitalIOInterface.StateChanged">
<code class=3D"descname">StateChanged</code><a class=3D"headerlink" href=3D=
"http://127.0.0.1:8080/interface.html#extronlib.interface.DigitalIOInterfac=
e.StateChanged" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when the input state changes.</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
interface</span></code></a> instance triggering the event and the
second one is a string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">'On'</span></code> or <code class=3D"docutils literal notrans=
late"><span class=3D"pre">'Off'</span></code>).</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Only triggers for ports in Input mode.</p>
</div>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"nd">@event</span><span class=3D"p">(</span><span=
 class=3D"n">InputInterface</span><span class=3D"p">,</span> <span class=3D=
"s1">'StateChanged'</span><span class=3D"p">)</span>
<span class=3D"k">def</span> <span class=3D"nf">HandleStateChanged</span><s=
pan class=3D"p">(</span><span class=3D"n">interface</span><span class=3D"p"=
>,</span> <span class=3D"n">state</span><span class=3D"p">):</span>
    <span class=3D"k">if</span> <span class=3D"n">state</span> <span class=
=3D"o">=3D=3D</span> <span class=3D"s1">'On'</span><span class=3D"p">:</spa=
n>
        <span class=3D"n">StartCombinedInit</span><span class=3D"p">()</spa=
n>
    <span class=3D"k">else</span><span class=3D"p">:</span>
        <span class=3D"n">StartSeparateInit</span><span class=3D"p">()</spa=
n>
</pre></div>
</div>
</dd></dl>

</dd></dl>

</div>
<div class=3D"section" id=3D"ethernetclientinterface-class">
<h2><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#extronlib.interface.EthernetClientInterface" title=3D"extronlib.inter=
face.EthernetClientInterface"><code class=3D"xref py py-class docutils lite=
ral notranslate"><span class=3D"pre">EthernetClientInterface</span></code><=
/a> Class<a class=3D"headerlink" href=3D"http://127.0.0.1:8080/interface.ht=
ml#ethernetclientinterface-class" title=3D"Permalink to this headline">=C2=
=B6</a></h2>
<dl class=3D"class">
<dt id=3D"extronlib.interface.EthernetClientInterface">
<em class=3D"property">class </em><code class=3D"descname">EthernetClientIn=
terface</code><span class=3D"sig-paren">(</span><em>Hostname</em>, <em>IPPo=
rt</em>, <em>Protocol=3D'TCP'</em>, <em>ServicePort=3D0</em>, <em>Credentia=
ls=3DNone</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" hre=
f=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.EthernetClien=
tInterface" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>This class provides an interface to a client Ethernet socket. This c=
lass
allows the user to send data over the Ethernet port in a synchronous or
asynchronous manner.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">In synchronous mode, the user will use SendAndWait to wai=
t for
the response.  In asynchronous mode, the user will assign a handler
function to <a class=3D"reference internal" href=3D"http://127.0.0.1:8080/i=
nterface.html#extronlib.interface.EthernetClientInterface.ReceiveData" titl=
e=3D"extronlib.interface.EthernetClientInterface.ReceiveData"><code class=
=3D"xref py py-data docutils literal notranslate"><span class=3D"pre">Recei=
veData</span></code></a> event handler. Then responses and
unsolicited messages will be sent to the users receive data handler.</p>
</div>
<div class=3D"highlight-python notranslate"><table class=3D"highlighttable"=
><tbody><tr><td class=3D"linenos"><div class=3D"linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49</pre></div></td><td class=3D"code"><div class=3D"highlight"><pre><span><=
/span><span class=3D"kn">from</span> <span class=3D"nn">extronlib</span> <s=
pan class=3D"kn">import</span> <span class=3D"n">event</span><span class=3D=
"p">,</span> <span class=3D"n">Version</span>
<span class=3D"kn">from</span> <span class=3D"nn">extronlib.interface</span=
> <span class=3D"kn">import</span> <span class=3D"n">EthernetClientInterfac=
e</span>
<span class=3D"kn">from</span> <span class=3D"nn">extronlib.system</span> <=
span class=3D"kn">import</span> <span class=3D"n">Timer</span><span class=
=3D"p">,</span> <span class=3D"n">Wait</span>

<span class=3D"kn">import</span> <span class=3D"nn">time</span>     <span c=
lass=3D"c1"># For monotonic()</span>

<span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"n">V=
ersion</span><span class=3D"p">())</span>

<span class=3D"n">dmp128cpat</span> <span class=3D"o">=3D</span> <span clas=
s=3D"n">EthernetClientInterface</span><span class=3D"p">(</span><span class=
=3D"s1">'192.168.1.123'</span><span class=3D"p">,</span> <span class=3D"mi"=
>23</span><span class=3D"p">)</span>

<span class=3D"n">connected</span> <span class=3D"o">=3D</span> <span class=
=3D"bp">None</span>    <span class=3D"c1"># Stores the last time data/conne=
ction</span>

<span class=3D"k">def</span> <span class=3D"nf">connect</span><span class=
=3D"p">():</span>
    <span class=3D"sd">"""Connect to host.  Reattempt on failure after 1s."=
""</span>
    <span class=3D"k">if</span> <span class=3D"s1">'Connected'</span> <span=
 class=3D"ow">not</span> <span class=3D"ow">in</span> <span class=3D"n">dmp=
128cpat</span><span class=3D"o">.</span><span class=3D"n">Connect</span><sp=
an class=3D"p">(</span><span class=3D"mi">10</span><span class=3D"p">):</sp=
an>
        <span class=3D"c1"># Handle alternative workflow here, if needed.</=
span>
        <span class=3D"k">print</span><span class=3D"p">(</span><span class=
=3D"s1">'Unable to connect...'</span><span class=3D"p">)</span>
        <span class=3D"n">Wait</span><span class=3D"p">(</span><span class=
=3D"mi">1</span><span class=3D"p">,</span> <span class=3D"n">connect</span>=
<span class=3D"p">)</span>

<span class=3D"nd">@Timer</span><span class=3D"p">(</span><span class=3D"mi=
">1</span><span class=3D"p">)</span>
<span class=3D"k">def</span> <span class=3D"nf">checkTimer</span><span clas=
s=3D"p">(</span><span class=3D"n">timer</span><span class=3D"p">,</span> <s=
pan class=3D"n">count</span><span class=3D"p">):</span>
    <span class=3D"sd">"""Check the time since last data/connection.  Recon=
nect if necessary."""</span>
    <span class=3D"k">global</span> <span class=3D"n">connected</span>
    <span class=3D"k">if</span> <span class=3D"n">connected</span> <span cl=
ass=3D"ow">and</span> <span class=3D"n">time</span><span class=3D"o">.</spa=
n><span class=3D"n">monotonic</span><span class=3D"p">()</span> <span class=
=3D"o">-</span> <span class=3D"n">connected</span> <span class=3D"o">&gt;</=
span> <span class=3D"mi">15</span><span class=3D"p">:</span>
        <span class=3D"n">connected</span> <span class=3D"o">=3D</span> <sp=
an class=3D"bp">None</span>
        <span class=3D"n">dmp128cpat</span><span class=3D"o">.</span><span =
class=3D"n">Disconnect</span><span class=3D"p">()</span>
        <span class=3D"n">connect</span><span class=3D"p">()</span>

<span class=3D"k">def</span> <span class=3D"nf">Initialize</span><span clas=
s=3D"p">():</span>
    <span class=3D"n">connect</span><span class=3D"p">()</span>

<span class=3D"nd">@event</span><span class=3D"p">(</span><span class=3D"n"=
>dmp128cpat</span><span class=3D"p">,</span> <span class=3D"p">[</span><spa=
n class=3D"s1">'Connected'</span><span class=3D"p">,</span> <span class=3D"=
s1">'Disconnected'</span><span class=3D"p">])</span>
<span class=3D"k">def</span> <span class=3D"nf">handleConnection</span><spa=
n class=3D"p">(</span><span class=3D"n">interface</span><span class=3D"p">,=
</span> <span class=3D"n">state</span><span class=3D"p">):</span>
    <span class=3D"k">global</span> <span class=3D"n">connected</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
n">interface</span><span class=3D"o">.</span><span class=3D"n">IPAddress</s=
pan><span class=3D"p">,</span> <span class=3D"n">state</span><span class=3D=
"p">)</span>
    <span class=3D"k">if</span> <span class=3D"n">state</span> <span class=
=3D"o">=3D=3D</span> <span class=3D"s1">'Connected'</span><span class=3D"p"=
>:</span>
        <span class=3D"n">interface</span><span class=3D"o">.</span><span c=
lass=3D"n">StartKeepAlive</span><span class=3D"p">(</span><span class=3D"mi=
">5</span><span class=3D"p">,</span> <span class=3D"s1">'n'</span><span cla=
ss=3D"p">)</span>
    <span class=3D"k">elif</span> <span class=3D"n">state</span> <span clas=
s=3D"o">=3D=3D</span> <span class=3D"s1">'Disconnected'</span><span class=
=3D"p">:</span>
        <span class=3D"n">interface</span><span class=3D"o">.</span><span c=
lass=3D"n">StopKeepAlive</span><span class=3D"p">()</span>
    <span class=3D"n">connected</span> <span class=3D"o">=3D</span> <span c=
lass=3D"n">time</span><span class=3D"o">.</span><span class=3D"n">monotonic=
</span><span class=3D"p">()</span>        <span class=3D"c1"># Mark the las=
t activity.</span>

<span class=3D"nd">@event</span><span class=3D"p">(</span><span class=3D"n"=
>dmp128cpat</span><span class=3D"p">,</span> <span class=3D"s1">'ReceiveDat=
a'</span><span class=3D"p">)</span>
<span class=3D"k">def</span> <span class=3D"nf">handleRecvData</span><span =
class=3D"p">(</span><span class=3D"n">interface</span><span class=3D"p">,</=
span> <span class=3D"n">data</span><span class=3D"p">):</span>
    <span class=3D"k">global</span> <span class=3D"n">connected</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
n">interface</span><span class=3D"o">.</span><span class=3D"n">IPAddress</s=
pan><span class=3D"p">,</span> <span class=3D"n">data</span><span class=3D"=
p">)</span>
    <span class=3D"k">if</span> <span class=3D"sa">b</span><span class=3D"s=
1">'60-1179-10'</span> <span class=3D"ow">in</span> <span class=3D"n">data<=
/span><span class=3D"p">:</span>           <span class=3D"c1"># Valid data =
received.</span>
        <span class=3D"n">connected</span> <span class=3D"o">=3D</span> <sp=
an class=3D"n">time</span><span class=3D"o">.</span><span class=3D"n">monot=
onic</span><span class=3D"p">()</span>    <span class=3D"c1"># Mark the las=
t activity.</span>

<span class=3D"n">Initialize</span><span class=3D"p">()</span>
</pre></div>
</td></tr></tbody></table></div>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><ul class=3D"first last simple">
<li><strong>Hostname</strong> (<em>string</em>) =E2=80=93 DNS Name of the c=
onnection. Can be an IP Address</li>
<li><strong>IPPort</strong> (<em>int</em>) =E2=80=93 IP port number of the =
connection</li>
<li><strong>Protocol</strong> (<em>string</em>) =E2=80=93 Value for either =
<code class=3D"docutils literal notranslate"><span class=3D"pre">'TCP'</spa=
n></code>, <code class=3D"docutils literal notranslate"><span class=3D"pre"=
>'UDP'</span></code>, or <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">'SSH'</span></code></li>
<li><strong>ServicePort</strong> (<em>int</em>) =E2=80=93 Sets the port on =
which to listen for response
data, UDP only, zero means listen on port OS assigns</li>
<li><strong>Credentials</strong> (<em>tuple</em>) =E2=80=93 Username and pa=
ssword for SSH connection.</li>
</ul>
</td>
</tr>
</tbody>
</table>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">A username and password are required for SSH
connections.  Password may be an empty string.</p>
</div>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">mainProjector</span> <span class=3D"o">=3D</s=
pan> <span class=3D"n">EthernetClientInterface</span><span class=3D"p">(</s=
pan><span class=3D"s1">'192.168.1.50'</span><span class=3D"p">,</span> <spa=
n class=3D"mi">33336</span><span class=3D"p">)</span>

<span class=3D"n">BACnet</span> <span class=3D"o">=3D</span> <span class=3D=
"n">EthernetClientInterface</span><span class=3D"p">(</span><span class=3D"=
s1">'192.168.1.100'</span><span class=3D"p">,</span> <span class=3D"mh">0xB=
AC0</span><span class=3D"p">,</span> <span class=3D"s1">'UDP'</span><span c=
lass=3D"p">)</span>

<span class=3D"n">cli</span> <span class=3D"o">=3D</span> <span class=3D"n"=
>EthernetClientInterface</span><span class=3D"p">(</span><span class=3D"s1"=
>'192.168.1.150'</span><span class=3D"p">,</span> <span class=3D"mi">22</sp=
an><span class=3D"p">,</span> <span class=3D"s1">'SSH'</span><span class=3D=
"p">,</span>
                              <span class=3D"n">Credentials</span><span cla=
ss=3D"o">=3D</span><span class=3D"p">(</span><span class=3D"s1">'tom'</span=
><span class=3D"p">,</span> <span class=3D"s1">'tree123'</span><span class=
=3D"p">))</span>
</pre></div>
</div>
<div class=3D"versionadded">
<p><span class=3D"versionmodified">New in version 2.4: </span>SSH protocol<=
/p>
</div>
<dl class=3D"method">
<dt id=3D"extronlib.interface.EthernetClientInterface.Connect">
<code class=3D"descname">Connect</code><span class=3D"sig-paren">(</span><e=
m>timeout=3DNone</em><span class=3D"sig-paren">)</span><a class=3D"headerli=
nk" href=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.Ethern=
etClientInterface.Connect" title=3D"Permalink to this definition">=C2=B6</a=
></dt>
<dd><p>Connect to the server</p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><strong>timeout</strong> (<em>float</em>) =E2=80=93 ti=
me in seconds to attempt connection before giving
up.</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Returns:</th><td cl=
ass=3D"field-body"><code class=3D"docutils literal notranslate"><span class=
=3D"pre">'Connected'</span></code> or  <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">'ConnectedAlready'</span></code> or reason for
failure</td>
</tr>
<tr class=3D"field-odd field"><th class=3D"field-name">Return type:</th><td=
 class=3D"field-body">string</td>
</tr>
</tbody>
</table>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Does not apply to UDP connections.</p>
</div>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"c1"># Create an Ethernet Client Interface</span>
<span class=3D"n">mainProjector</span> <span class=3D"o">=3D</span> <span c=
lass=3D"n">EthernetClientInterface</span><span class=3D"p">(</span><span cl=
ass=3D"s1">'192.168.1.50'</span><span class=3D"p">,</span> <span class=3D"m=
i">33336</span><span class=3D"p">)</span>

<span class=3D"k">def</span> <span class=3D"nf">ConnectProjector</span><spa=
n class=3D"p">():</span>
    <span class=3D"n">result</span> <span class=3D"o">=3D</span> <span clas=
s=3D"n">mainProjector</span><span class=3D"o">.</span><span class=3D"n">Con=
nect</span><span class=3D"p">(</span><span class=3D"mi">5</span><span class=
=3D"p">)</span>
    <span class=3D"k">if</span> <span class=3D"s1">'Connected'</span> <span=
 class=3D"ow">not</span> <span class=3D"ow">in</span> <span class=3D"n">res=
ult</span><span class=3D"p">:</span>
        <span class=3D"n">Wait</span><span class=3D"p">(</span><span class=
=3D"mi">30</span><span class=3D"p">,</span> <span class=3D"n">ConnectProjec=
tor</span><span class=3D"p">)</span>
    <span class=3D"k">else</span><span class=3D"p">:</span>
        <span class=3D"n">GetStatus</span><span class=3D"p">(</span><span c=
lass=3D"n">mainProjector</span><span class=3D"p">)</span>    <span class=3D=
"c1"># GetStatus() is a user function</span>

<span class=3D"n">ConnectProjector</span><span class=3D"p">()</span>
</pre></div>
</div>
<div class=3D"versionadded">
<p><span class=3D"versionmodified">New in version 2.9: </span>ConnectedAlre=
ady</p>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.EthernetClientInterface.Disconnect">
<code class=3D"descname">Disconnect</code><span class=3D"sig-paren">(</span=
><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"http://1=
27.0.0.1:8080/interface.html#extronlib.interface.EthernetClientInterface.Di=
sconnect" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Disconnect the socket</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Does not apply to UDP connections.</p>
</div>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">mainProjector</span><span class=3D"o">.</span=
><span class=3D"n">Disconnect</span><span class=3D"p">()</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.EthernetClientInterface.SSLWrap">
<code class=3D"descname">SSLWrap</code><span class=3D"sig-paren">(</span><e=
m>certificate=3DNone</em>, <em>cert_reqs=3D'CERT_NONE'</em>, <em>ssl_versio=
n=3D'TLSv2'</em>, <em>ca_certs=3DNone</em><span class=3D"sig-paren">)</span=
><a class=3D"headerlink" href=3D"http://127.0.0.1:8080/interface.html#extro=
nlib.interface.EthernetClientInterface.SSLWrap" title=3D"Permalink to this =
definition">=C2=B6</a></dt>
<dd><p>Wrap this connection in an SSL context.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p>This is almost a direct call to <a class=3D"reference external" href=3D"=
https://docs.python.org/3.5/library/ssl.html?highlight=3Dssl#ssl.wrap_socke=
t">ssl.wrap_socket()</a>.
See python documentation for more details.  The following changes
are applied:</p>
<blockquote class=3D"last">
<div><ul class=3D"simple">
<li>Property <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">server_side</span></code> is set to <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">False</span></code></li>
<li>Property <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">cert_reqs</span></code> is a string</li>
<li>Property <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">ssl_version</span></code> is a string</li>
<li>Property <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">do_handshake_on_connect</span></code> is set to <code class=3D"docutils =
literal notranslate"><span class=3D"pre">True</span></code></li>
<li>Property <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">suppress_ragged_eofs</span></code> is set to <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">True</span></code></li>
<li>Property <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">ciphers</span></code> is fixed to the system default</li>
</ul>
</div></blockquote>
</div>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><ul class=3D"first last simple">
<li><strong>certificate</strong> (<em>string</em>) =E2=80=93 alias to a spe=
cific keyfile/certificate pair</li>
<li><strong>cert_reqs</strong> (<em>string</em>) =E2=80=93 specifies whethe=
r a certificate is required from the
other side of the connection (<code class=3D"docutils literal notranslate">=
<span class=3D"pre">'CERT_NONE'</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">'CERT_OPTI=
ONAL'</span></code>, or <code class=3D"docutils literal notranslate"><span =
class=3D"pre">'CERT_REQUIRED'</span></code>). If the value of this
parameter is not <code class=3D"docutils literal notranslate"><span class=
=3D"pre">'CERT_NONE'</span></code>, then the ca_certs parameter must
point to a file of CA certificates.</li>
<li><strong>ssl_version</strong> (<em>string</em>) =E2=80=93 version from t=
he supported SSL/TLS version table
(<code class=3D"docutils literal notranslate"><span class=3D"pre">'TLSv2'</=
span></code>). Currently only TLS 1.2 is allowed.</li>
<li><strong>ca_certs</strong> (<em>string</em>) =E2=80=93 alias to a file t=
hat contains a set of concatenated
=E2=80=9Ccertification authority=E2=80=9D certificates, which are used to v=
alidate
certificates passed from the other end of the connection.</li>
</ul>
</td>
</tr>
</tbody>
</table>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<ul class=3D"last simple">
<li>Requires protocol <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">'TCP'</span></code>.</li>
<li><strong>certificate</strong> and <strong>ca_certs</strong> specify alia=
ses to machine=20
certificate/key pairs and CA certificates uploaded to the=20
processor in Toolbelt.</li>
</ul>
</div>
<div class=3D"highlight-python notranslate"><table class=3D"highlighttable"=
><tbody><tr><td class=3D"linenos"><div class=3D"linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27</pre></div></td><td class=3D"code"><div class=3D"highlight"><pre><span><=
/span><span class=3D"n">client</span> <span class=3D"o">=3D</span> <span cl=
ass=3D"n">EthernetClientInterface</span><span class=3D"p">(</span><span cla=
ss=3D"s1">'192.168.1.100'</span><span class=3D"p">,</span> <span class=3D"m=
i">10000</span><span class=3D"p">,</span> <span class=3D"s1">'TCP'</span><s=
pan class=3D"p">)</span>
<span class=3D"n">client</span><span class=3D"o">.</span><span class=3D"n">=
SSLWrap</span><span class=3D"p">(</span>
    <span class=3D"n">certificate</span><span class=3D"o">=3D</span><span c=
lass=3D"s1">'client'</span><span class=3D"p">,</span>
    <span class=3D"n">cert_reqs</span><span class=3D"o">=3D</span><span cla=
ss=3D"s1">'CERT_REQUIRED'</span><span class=3D"p">,</span>
    <span class=3D"n">ssl_version</span><span class=3D"o">=3D</span><span c=
lass=3D"s1">'TLSv2'</span><span class=3D"p">,</span>
    <span class=3D"n">ca_certs</span><span class=3D"o">=3D</span><span clas=
s=3D"s1">'rootca'</span>
<span class=3D"p">)</span>

<span class=3D"k">def</span> <span class=3D"nf">connect</span><span class=
=3D"p">():</span>
    <span class=3D"sd">"""Connect to host.  Reattempt on failure after 1s."=
""</span>
    <span class=3D"k">if</span> <span class=3D"n">client</span><span class=
=3D"o">.</span><span class=3D"n">Connect</span><span class=3D"p">(</span><s=
pan class=3D"mi">10</span><span class=3D"p">)</span> <span class=3D"o">!=3D=
</span> <span class=3D"s1">'Connected'</span><span class=3D"p">:</span>
        <span class=3D"c1"># Handle alternative workflow here, if needed.</=
span>
        <span class=3D"k">print</span><span class=3D"p">(</span><span class=
=3D"s1">'Unable to connect...'</span><span class=3D"p">)</span>
        <span class=3D"n">Wait</span><span class=3D"p">(</span><span class=
=3D"mi">1</span><span class=3D"p">,</span> <span class=3D"n">connect</span>=
<span class=3D"p">)</span>

<span class=3D"nd">@Timer</span><span class=3D"p">(</span><span class=3D"mi=
">1</span><span class=3D"p">)</span>
<span class=3D"k">def</span> <span class=3D"nf">checkTimer</span><span clas=
s=3D"p">(</span><span class=3D"n">timer</span><span class=3D"p">,</span> <s=
pan class=3D"n">count</span><span class=3D"p">):</span>
    <span class=3D"sd">"""Check the time since last data/connection.  Recon=
nect if necessary."""</span>
    <span class=3D"k">global</span> <span class=3D"n">connected</span>
    <span class=3D"k">if</span> <span class=3D"n">connected</span> <span cl=
ass=3D"ow">and</span> <span class=3D"n">time</span><span class=3D"o">.</spa=
n><span class=3D"n">monotonic</span><span class=3D"p">()</span> <span class=
=3D"o">-</span> <span class=3D"n">connected</span> <span class=3D"o">&gt;</=
span> <span class=3D"mi">15</span><span class=3D"p">:</span>
        <span class=3D"n">connected</span> <span class=3D"o">=3D</span> <sp=
an class=3D"bp">None</span>
        <span class=3D"n">client</span><span class=3D"o">.</span><span clas=
s=3D"n">Disconnect</span><span class=3D"p">()</span>
        <span class=3D"n">connect</span><span class=3D"p">()</span>

<span class=3D"k">def</span> <span class=3D"nf">Initialize</span><span clas=
s=3D"p">():</span>
    <span class=3D"n">connect</span><span class=3D"p">()</span>
    <span class=3D"n">checkTimer</span><span class=3D"p">()</span>
</pre></div>
</td></tr></tbody></table></div>
<div class=3D"versionadded">
<p><span class=3D"versionmodified">New in version 3.4.</span></p>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.EthernetClientInterface.Send">
<code class=3D"descname">Send</code><span class=3D"sig-paren">(</span><em>d=
ata</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"h=
ttp://127.0.0.1:8080/interface.html#extronlib.interface.EthernetClientInter=
face.Send" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Send string over Ethernet port if it=E2=80=99s open</p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><strong>data</strong> (<em>bytes</em><em>, </em><em>st=
ring</em>) =E2=80=93 string to send out</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Raise:</th><td clas=
s=3D"field-body">TypeError, IOError</td>
</tr>
</tbody>
</table>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">mainProjector</span><span class=3D"o">.</span=
><span class=3D"n">Send</span><span class=3D"p">(</span><span class=3D"s1">=
'GET POWER</span><span class=3D"se">\r</span><span class=3D"s1">'</span><sp=
an class=3D"p">)</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.EthernetClientInterface.SendAndWait">
<code class=3D"descname">SendAndWait</code><span class=3D"sig-paren">(</spa=
n><em>data</em>, <em>timeout</em>, <em>**delimiter</em><span class=3D"sig-p=
aren">)</span><a class=3D"headerlink" href=3D"http://127.0.0.1:8080/interfa=
ce.html#extronlib.interface.EthernetClientInterface.SendAndWait" title=3D"P=
ermalink to this definition">=C2=B6</a></dt>
<dd><p>Send data to the controlled device and wait (blocking) for response.=
 It
returns after <em>timeout</em> seconds expires or immediately if the option=
al
condition is satisfied.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p>In addition to <em>data</em> and <em>timeout</em>, the method accepts an
optional delimiter, which is used to compare against the received
response.  It supports any one of the following conditions:</p>
<blockquote class=3D"last">
<div><ul class=3D"simple">
<li><em>deliLen</em> (int) - length of the response</li>
<li><em>deliTag</em> (bytes) - suffix of the response</li>
<li><em>deliRex</em> (regular expression object) - regular expression</li>
</ul>
</div></blockquote>
</div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">The function will return an empty bytes object if <em>tim=
eout</em>
expires and nothing is received, or the condition (if provided) is
not met.</p>
</div>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><ul class=3D"first simple">
<li><strong>data</strong> (<em>bytes</em><em>, </em><em>string</em>) =E2=80=
=93 data to send.</li>
<li><strong>timeout</strong> (<em>float</em>) =E2=80=93 amount of time to w=
ait for response.</li>
<li><strong>delimiter</strong> (<em>see above</em>) =E2=80=93 optional cond=
itions to look for in response.</li>
</ul>
</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Returns:</th><td cl=
ass=3D"field-body"><p class=3D"first">Response received data (may be empty)=
</p>
</td>
</tr>
<tr class=3D"field-odd field"><th class=3D"field-name">Return type:</th><td=
 class=3D"field-body"><p class=3D"first last">bytes</p>
</td>
</tr>
</tbody>
</table>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">response</span> <span class=3D"o">=3D</span> =
<span class=3D"n">mainProjector</span><span class=3D"o">.</span><span class=
=3D"n">SendAndWait</span><span class=3D"p">(</span><span class=3D"s1">'GET =
POWER</span><span class=3D"se">\r</span><span class=3D"s1">'</span><span cl=
ass=3D"p">,</span> <span class=3D"mf">0.3</span><span class=3D"p">,</span> =
<span class=3D"n">deliLen</span><span class=3D"o">=3D</span><span class=3D"=
mi">16</span><span class=3D"p">)</span>
<span class=3D"n">response</span> <span class=3D"o">=3D</span> <span class=
=3D"n">mainProjector</span><span class=3D"o">.</span><span class=3D"n">Send=
AndWait</span><span class=3D"p">(</span><span class=3D"s1">'GET POWER</span=
><span class=3D"se">\r</span><span class=3D"s1">'</span><span class=3D"p">,=
</span> <span class=3D"mf">0.3</span><span class=3D"p">,</span> <span class=
=3D"n">deliTag</span><span class=3D"o">=3D</span><span class=3D"sa">b</span=
><span class=3D"s1">'</span><span class=3D"se">\r\n</span><span class=3D"s1=
">'</span><span class=3D"p">)</span>
<span class=3D"n">response</span> <span class=3D"o">=3D</span> <span class=
=3D"n">mainProjector</span><span class=3D"o">.</span><span class=3D"n">Send=
AndWait</span><span class=3D"p">(</span>
    <span class=3D"s1">'GET POWER</span><span class=3D"se">\r</span><span c=
lass=3D"s1">'</span><span class=3D"p">,</span> <span class=3D"mf">0.3</span=
><span class=3D"p">,</span>
    <span class=3D"n">deliRex</span><span class=3D"o">=3D</span><span class=
=3D"n">re</span><span class=3D"o">.</span><span class=3D"n">compile</span><=
span class=3D"p">(</span><span class=3D"sa">b</span><span class=3D"s1">'g:P=
OWER=3D(ON|OFF|ON2OFF|OFF2ON)</span><span class=3D"se">\r\n</span><span cla=
ss=3D"s1">'</span><span class=3D"p">)</span>
    <span class=3D"p">)</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.EthernetClientInterface.StartKeepAlive">
<code class=3D"descname">StartKeepAlive</code><span class=3D"sig-paren">(</=
span><em>interval</em>, <em>data</em><span class=3D"sig-paren">)</span><a c=
lass=3D"headerlink" href=3D"http://127.0.0.1:8080/interface.html#extronlib.=
interface.EthernetClientInterface.StartKeepAlive" title=3D"Permalink to thi=
s definition">=C2=B6</a></dt>
<dd><p>Repeatedly sends <em>data</em> at the given <em>interval</em></p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><ul class=3D"first last simple">
<li><strong>interval</strong> (<em>float</em>) =E2=80=93 Time in seconds be=
tween transmissions</li>
<li><strong>data</strong> (<em>bytes</em><em>, </em><em>string</em>) =E2=80=
=93 data to send</li>
</ul>
</td>
</tr>
</tbody>
</table>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"c1"># Query product code (model name).  Handle r=
esponse in ReceiveData event.</span>
<span class=3D"n">mainProjector</span><span class=3D"o">.</span><span class=
=3D"n">StartKeepAlive</span><span class=3D"p">(</span><span class=3D"mi">5<=
/span><span class=3D"p">,</span> <span class=3D"s1">'GET PRODCODE</span><sp=
an class=3D"se">\r</span><span class=3D"s1">'</span><span class=3D"p">)</sp=
an>
</pre></div>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.EthernetClientInterface.StopKeepAlive">
<code class=3D"descname">StopKeepAlive</code><span class=3D"sig-paren">(</s=
pan><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"http:=
//127.0.0.1:8080/interface.html#extronlib.interface.EthernetClientInterface=
.StopKeepAlive" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Stop the currently running keep alive routine</p>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">mainProjector</span><span class=3D"o">.</span=
><span class=3D"n">StopKeepAlive</span><span class=3D"p">()</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.EthernetClientInterface.Connected">
<code class=3D"descname">Connected</code><a class=3D"headerlink" href=3D"ht=
tp://127.0.0.1:8080/interface.html#extronlib.interface.EthernetClientInterf=
ace.Connected" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when socket connection is established.</p>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"nd">@event</span><span class=3D"p">(</span><span=
 class=3D"n">mainProjector</span><span class=3D"p">,</span> <span class=3D"=
s1">'Connected'</span><span class=3D"p">)</span>
<span class=3D"k">def</span> <span class=3D"nf">ConnectionHandler</span><sp=
an class=3D"p">(</span><span class=3D"n">interface</span><span class=3D"p">=
,</span> <span class=3D"n">state</span><span class=3D"p">):</span>
    <span class=3D"c1"># Routine to execute when projector comes online.</s=
pan>
    <span class=3D"n">systemStates</span><span class=3D"p">[</span><span cl=
ass=3D"s1">'ProjectorOffline'</span><span class=3D"p">]</span> <span class=
=3D"o">=3D</span> <span class=3D"bp">False</span>
    <span class=3D"n">interface</span><span class=3D"o">.</span><span class=
=3D"n">Send</span><span class=3D"p">(</span><span class=3D"s1">'GET POWER</=
span><span class=3D"se">\r</span><span class=3D"s1">'</span><span class=3D"=
p">)</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.EthernetClientInterface.Credentials">
<code class=3D"descname">Credentials</code><a class=3D"headerlink" href=3D"=
http://127.0.0.1:8080/interface.html#extronlib.interface.EthernetClientInte=
rface.Credentials" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">Username and password for SSH connection.</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">tuple, None</td>
</tr>
</tbody>
</table>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<ul class=3D"last simple">
<li>returns tuple: <code class=3D"docutils literal notranslate"><span class=
=3D"pre">('username',</span> <span class=3D"pre">'password')</span></code> =
if provided
otherwise <code class=3D"docutils literal notranslate"><span class=3D"pre">=
None</span></code>.</li>
<li>only applies when protocol <code class=3D"docutils literal notranslate"=
><span class=3D"pre">'SSH'</span></code> is used.</li>
</ul>
</div>
<div class=3D"versionadded">
<p><span class=3D"versionmodified">New in version 2.4.</span></p>
</div>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.EthernetClientInterface.Disconnected">
<code class=3D"descname">Disconnected</code><a class=3D"headerlink" href=3D=
"http://127.0.0.1:8080/interface.html#extronlib.interface.EthernetClientInt=
erface.Disconnected" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when the socket connection is broken</p>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"nd">@event</span><span class=3D"p">(</span><span=
 class=3D"n">mainProjector</span><span class=3D"p">,</span> <span class=3D"=
s1">'Disconnected'</span><span class=3D"p">)</span>
<span class=3D"k">def</span> <span class=3D"nf">ConnectionHandler</span><sp=
an class=3D"p">(</span><span class=3D"n">interface</span><span class=3D"p">=
,</span> <span class=3D"n">state</span><span class=3D"p">):</span>
    <span class=3D"c1"># Routine to execute when projector goes offline.</s=
pan>
    <span class=3D"n">systemStates</span><span class=3D"p">[</span><span cl=
ass=3D"s1">'ProjectorOffline'</span><span class=3D"p">]</span> <span class=
=3D"o">=3D</span> <span class=3D"bp">True</span>
    <span class=3D"nd">@Wait</span><span class=3D"p">(</span><span class=3D=
"mi">3</span><span class=3D"p">)</span>
    <span class=3D"k">def</span> <span class=3D"nf">Reconnect</span><span c=
lass=3D"p">():</span>
        <span class=3D"n">res</span> <span class=3D"o">=3D</span> <span cla=
ss=3D"n">mainProjector</span><span class=3D"o">.</span><span class=3D"n">Co=
nnect</span><span class=3D"p">(</span><span class=3D"mi">3</span><span clas=
s=3D"p">)</span>
        <span class=3D"k">if</span> <span class=3D"n">res</span> <span clas=
s=3D"o">=3D=3D</span> <span class=3D"s1">'Connected'</span><span class=3D"p=
">:</span>
            <span class=3D"n">mainProjector</span><span class=3D"o">.</span=
><span class=3D"n">Send</span><span class=3D"p">(</span><span class=3D"s1">=
'GET POWER</span><span class=3D"se">\r</span><span class=3D"s1">'</span><sp=
an class=3D"p">)</span>
        <span class=3D"k">else</span><span class=3D"p">:</span>
            <span class=3D"n">Wait</span><span class=3D"p">(</span><span cl=
ass=3D"mi">30</span><span class=3D"p">,</span> <span class=3D"n">Reconnect<=
/span><span class=3D"p">)</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.EthernetClientInterface.Hostname">
<code class=3D"descname">Hostname</code><a class=3D"headerlink" href=3D"htt=
p://127.0.0.1:8080/interface.html#extronlib.interface.EthernetClientInterfa=
ce.Hostname" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">server Host name</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">If unavailable, returns the IP address.</p>
</div>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.EthernetClientInterface.IPAddress">
<code class=3D"descname">IPAddress</code><a class=3D"headerlink" href=3D"ht=
tp://127.0.0.1:8080/interface.html#extronlib.interface.EthernetClientInterf=
ace.IPAddress" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">server IP Address</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.EthernetClientInterface.IPPort">
<code class=3D"descname">IPPort</code><a class=3D"headerlink" href=3D"http:=
//127.0.0.1:8080/interface.html#extronlib.interface.EthernetClientInterface=
.IPPort" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">IP port number of the connection</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">int</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.EthernetClientInterface.Protocol">
<code class=3D"descname">Protocol</code><a class=3D"headerlink" href=3D"htt=
p://127.0.0.1:8080/interface.html#extronlib.interface.EthernetClientInterfa=
ce.Protocol" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">Value for either <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">=E2=80=99TCP=E2=80=99</span></code>, <code class=
=3D"docutils literal notranslate"><span class=3D"pre">=E2=80=99UDP=E2=80=99=
</span></code>, <code class=3D"docutils literal notranslate"><span class=3D=
"pre">'SSH'</span></code> connection.</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.EthernetClientInterface.ReceiveData">
<code class=3D"descname">ReceiveData</code><a class=3D"headerlink" href=3D"=
http://127.0.0.1:8080/interface.html#extronlib.interface.EthernetClientInte=
rface.ReceiveData" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Receive Data event handler used for asynchronous
transactions</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#extronlib.interface.EthernetClientInterface" title=3D"extronlib.interface=
.EthernetClientInterface"><code class=3D"xref py py-class docutils literal =
notranslate"><span class=3D"pre">EthernetClientInterface</span></code></a> =
instance triggering the event and
the second one is a bytes object.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<ul class=3D"last simple">
<li>The maximum amount of data per <code class=3D"docutils literal notransl=
ate"><span class=3D"pre">ReceiveData</span></code> event that
will be passed into the handler is 1024 bytes.  For payloads
greater than 1024 bytes, multiple events will be triggered.</li>
<li>When UDP protocol is used, the data will be truncated to 1024
bytes.</li>
</ul>
</div>
<div class=3D"highlight-python notranslate"><table class=3D"highlighttable"=
><tbody><tr><td class=3D"linenos"><div class=3D"linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50</pre></div></td><td class=3D"code"><div class=3D"highlight"><pre><span><=
/span><span class=3D"n">mainProjector</span> <span class=3D"o">=3D</span> <=
span class=3D"n">EthernetClientInterface</span><span class=3D"p">(</span><s=
pan class=3D"s1">'192.168.1.50'</span><span class=3D"p">,</span> <span clas=
s=3D"mi">33336</span><span class=3D"p">)</span>
<span class=3D"n">mainProjector</span><span class=3D"o">.</span><span class=
=3D"n">Connect</span><span class=3D"p">()</span>

<span class=3D"n">ProjectorStates</span> <span class=3D"o">=3D</span> <span=
 class=3D"p">{</span>
    <span class=3D"s1">'POWER'</span><span class=3D"p">:</span> <span class=
=3D"p">[</span><span class=3D"s1">'OFF'</span><span class=3D"p">,</span> <s=
pan class=3D"s1">'OFF2ON'</span><span class=3D"p">,</span> <span class=3D"s=
1">'ON'</span><span class=3D"p">,</span> <span class=3D"s1">'ON2PMM'</span>=
<span class=3D"p">,</span> <span class=3D"s1">'PMM'</span><span class=3D"p"=
>,</span> <span class=3D"s1">'PMM2ON'</span><span class=3D"p">,</span> <spa=
n class=3D"s1">'ON2OFF'</span><span class=3D"p">],</span>
    <span class=3D"s1">'INPUT'</span><span class=3D"p">:</span> <span class=
=3D"p">[</span>
        <span class=3D"s1">'D-RGB'</span><span class=3D"p">,</span> <span c=
lass=3D"s1">'A-RGB1'</span><span class=3D"p">,</span> <span class=3D"s1">'A=
-RGB2'</span><span class=3D"p">,</span> <span class=3D"s1">'COMP'</span><sp=
an class=3D"p">,</span> <span class=3D"s1">'VIDEO'</span><span class=3D"p">=
,</span> <span class=3D"s1">'S-VIDEO'</span><span class=3D"p">,</span> <spa=
n class=3D"s1">'HDMI'</span><span class=3D"p">,</span> <span class=3D"s1">'=
USB'</span>
        <span class=3D"p">],</span>
    <span class=3D"s1">'PMM'</span><span class=3D"p">:</span> <span class=
=3D"p">[</span><span class=3D"s1">'OFF'</span><span class=3D"p">,</span> <s=
pan class=3D"s1">'STANDBY'</span><span class=3D"p">]</span>
    <span class=3D"p">}</span>
<span class=3D"n">ProjectorStatus</span> <span class=3D"o">=3D</span> <span=
 class=3D"p">{}</span>
<span class=3D"n">mainBuffer</span> <span class=3D"o">=3D</span> <span clas=
s=3D"s1">''</span>

<span class=3D"c1"># rcvString =3D=3D 'g:POWER=3DON\rg:INPUT=3DHDMI\rg:KEYL=
OCK=3DOFF\rg:PMM=3DEX'</span>
<span class=3D"nd">@event</span><span class=3D"p">(</span><span class=3D"n"=
>mainProjector</span><span class=3D"p">,</span> <span class=3D"s1">'Receive=
Data'</span><span class=3D"p">)</span>
<span class=3D"k">def</span> <span class=3D"nf">MainFeedbackHandler</span><=
span class=3D"p">(</span><span class=3D"n">interface</span><span class=3D"p=
">,</span> <span class=3D"n">rcvString</span><span class=3D"p">):</span>
    <span class=3D"k">global</span> <span class=3D"n">mainBuffer</span>
    <span class=3D"n">tempBuffer</span> <span class=3D"o">=3D</span> <span =
class=3D"n">mainBuffer</span> <span class=3D"o">+</span> <span class=3D"n">=
rcvString</span><span class=3D"o">.</span><span class=3D"n">decode</span><s=
pan class=3D"p">()</span>
    <span class=3D"k">if</span> <span class=3D"n">tempBuffer</span><span cl=
ass=3D"p">[</span><span class=3D"o">-</span><span class=3D"mi">1</span><spa=
n class=3D"p">]</span> <span class=3D"o">!=3D</span> <span class=3D"s1">'</=
span><span class=3D"se">\r</span><span class=3D"s1">'</span><span class=3D"=
p">:</span>              <span class=3D"c1"># Partial message</span>
        <span class=3D"n">last</span> <span class=3D"o">=3D</span> <span cl=
ass=3D"n">tempBuffer</span><span class=3D"o">.</span><span class=3D"n">rfin=
d</span><span class=3D"p">(</span><span class=3D"s1">'</span><span class=3D=
"se">\r</span><span class=3D"s1">'</span><span class=3D"p">)</span>       <=
span class=3D"c1"># Find last &lt;CR&gt;</span>
        <span class=3D"n">mainBuffer</span> <span class=3D"o">=3D</span> <s=
pan class=3D"n">tempBuffer</span><span class=3D"p">[</span><span class=3D"n=
">last</span><span class=3D"o">+</span><span class=3D"mi">1</span><span cla=
ss=3D"p">:]</span>    <span class=3D"c1"># Save the leftovers</span>
        <span class=3D"n">tempBuffer</span> <span class=3D"o">=3D</span> <s=
pan class=3D"n">tempBuffer</span><span class=3D"p">[:</span><span class=3D"=
n">last</span><span class=3D"p">]</span>      <span class=3D"c1"># Deal wit=
h the complete strings</span>
    <span class=3D"k">else</span><span class=3D"p">:</span>
        <span class=3D"n">mainBuffer</span> <span class=3D"o">=3D</span> <s=
pan class=3D"s1">''</span>                     <span class=3D"c1"># All dat=
a handled</span>

    <span class=3D"c1"># Turn rcvString into:</span>
    <span class=3D"c1">#   [['POWER', 'ON'], ['INPUT', 'HDMI'], ['KEYLOCK',=
 'OFF]]</span>
    <span class=3D"n">responses</span> <span class=3D"o">=3D</span> <span c=
lass=3D"p">[</span>
        <span class=3D"n">msg</span><span class=3D"o">.</span><span class=
=3D"n">split</span><span class=3D"p">(</span><span class=3D"s1">':'</span><=
span class=3D"p">)[</span><span class=3D"mi">1</span><span class=3D"p">]</s=
pan><span class=3D"o">.</span><span class=3D"n">split</span><span class=3D"=
p">(</span><span class=3D"s1">'=3D'</span><span class=3D"p">)</span> \
        <span class=3D"k">for</span> <span class=3D"n">msg</span> <span cla=
ss=3D"ow">in</span> <span class=3D"n">tempBuffer</span><span class=3D"o">.<=
/span><span class=3D"n">split</span><span class=3D"p">(</span><span class=
=3D"s1">'</span><span class=3D"se">\r</span><span class=3D"s1">'</span><spa=
n class=3D"p">)</span> \
        <span class=3D"k">if</span> <span class=3D"ow">not</span> <span cla=
ss=3D"n">msg</span> <span class=3D"o">=3D=3D</span> <span class=3D"s1">''</=
span>
        <span class=3D"p">]</span>
    <span class=3D"c1"># Handle responses</span>
    <span class=3D"k">for</span> <span class=3D"n">response</span> <span cl=
ass=3D"ow">in</span> <span class=3D"n">responses</span><span class=3D"p">:<=
/span>
        <span class=3D"n">Command</span><span class=3D"p">,</span> <span cl=
ass=3D"n">State</span> <span class=3D"o">=3D</span> <span class=3D"n">respo=
nse</span><span class=3D"p">[</span><span class=3D"mi">0</span><span class=
=3D"p">],</span> <span class=3D"n">response</span><span class=3D"p">[</span=
><span class=3D"mi">1</span><span class=3D"p">]</span>
        <span class=3D"n">ProjectorStatus</span><span class=3D"p">[</span><=
span class=3D"n">Command</span><span class=3D"p">]</span> <span class=3D"o"=
>=3D</span> <span class=3D"n">State</span>    <span class=3D"c1"># Store da=
ta for use elsewhere</span>
        <span class=3D"k">if</span> <span class=3D"n">Command</span> <span =
class=3D"ow">in</span> <span class=3D"n">ProjectorStates</span><span class=
=3D"p">:</span>      <span class=3D"c1"># Set feedback for each</span>
            <span class=3D"k">try</span><span class=3D"p">:</span>
                <span class=3D"k">if</span> <span class=3D"n">Command</span=
> <span class=3D"o">=3D=3D</span> <span class=3D"s1">'POWER'</span><span cl=
ass=3D"p">:</span>
                    <span class=3D"n">PowerOn</span><span class=3D"o">.</sp=
an><span class=3D"n">SetState</span><span class=3D"p">(</span><span class=
=3D"n">ProjectorStates</span><span class=3D"p">[</span><span class=3D"n">Co=
mmand</span><span class=3D"p">]</span><span class=3D"o">.</span><span class=
=3D"n">index</span><span class=3D"p">(</span><span class=3D"n">State</span>=
<span class=3D"p">))</span>
                <span class=3D"k">elif</span> <span class=3D"n">Command</sp=
an> <span class=3D"o">=3D=3D</span> <span class=3D"s1">'INPUT'</span><span =
class=3D"p">:</span>
                    <span class=3D"n">InputGroup</span><span class=3D"o">.<=
/span><span class=3D"n">SetCurrent</span><span class=3D"p">(</span>
                        <span class=3D"n">ProjectorStates</span><span class=
=3D"p">[</span><span class=3D"n">Command</span><span class=3D"p">]</span><s=
pan class=3D"o">.</span><span class=3D"n">index</span><span class=3D"p">(</=
span><span class=3D"n">State</span><span class=3D"p">)</span>
                        <span class=3D"p">)</span>
                <span class=3D"k">elif</span> <span class=3D"n">Command</sp=
an> <span class=3D"o">=3D=3D</span> <span class=3D"s1">'PMM'</span><span cl=
ass=3D"p">:</span>
                    <span class=3D"n">PowerM</span><span class=3D"o">.</spa=
n><span class=3D"n">SetState</span><span class=3D"p">(</span><span class=3D=
"n">ProjectorStates</span><span class=3D"p">[</span><span class=3D"n">Comma=
nd</span><span class=3D"p">]</span><span class=3D"o">.</span><span class=3D=
"n">index</span><span class=3D"p">(</span><span class=3D"n">State</span><sp=
an class=3D"p">))</span>
            <span class=3D"k">except</span><span class=3D"p">:</span>
                <span class=3D"k">print</span><span class=3D"p">(</span><sp=
an class=3D"s1">'State'</span><span class=3D"p">,</span> <span class=3D"n">=
response</span><span class=3D"p">,</span> <span class=3D"s1">'undefined.'</=
span><span class=3D"p">)</span>
        <span class=3D"k">else</span><span class=3D"p">:</span>
            <span class=3D"k">print</span><span class=3D"p">(</span><span c=
lass=3D"s1">'Unreferenced command:'</span><span class=3D"p">,</span> <span =
class=3D"n">response</span><span class=3D"p">)</span>
</pre></div>
</td></tr></tbody></table></div>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.EthernetClientInterface.ServicePort">
<code class=3D"descname">ServicePort</code><a class=3D"headerlink" href=3D"=
http://127.0.0.1:8080/interface.html#extronlib.interface.EthernetClientInte=
rface.ServicePort" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">the port on which the socket is listening for response da=
ta</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">int</td>
</tr>
</tbody>
</table>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">When protocol is UDP, the service port is not known until
communication is active.  ServicePort will return 0 when unknown.</p>
</div>
</dd></dl>

</dd></dl>

</div>
<div class=3D"section" id=3D"ethernetserverinterface-class">
<h2><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#extronlib.interface.EthernetServerInterface" title=3D"extronlib.inter=
face.EthernetServerInterface"><code class=3D"xref py py-class docutils lite=
ral notranslate"><span class=3D"pre">EthernetServerInterface</span></code><=
/a> Class<a class=3D"headerlink" href=3D"http://127.0.0.1:8080/interface.ht=
ml#ethernetserverinterface-class" title=3D"Permalink to this headline">=C2=
=B6</a></h2>
<dl class=3D"class">
<dt id=3D"extronlib.interface.EthernetServerInterface">
<em class=3D"property">class </em><code class=3D"descname">EthernetServerIn=
terface</code><span class=3D"sig-paren">(</span><em>IPPort</em>, <em>Protoc=
ol=3D'TCP'</em>, <em>Interface=3D'Any'</em>, <em>ServicePort=3D0</em><span =
class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"http://127.0.0.=
1:8080/interface.html#extronlib.interface.EthernetServerInterface" title=3D=
"Permalink to this definition">=C2=B6</a></dt>
<dd><p>This class provides an interface to a server Ethernet socket.  After
instantiation, the server is started by calling <a class=3D"reference inter=
nal" href=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.Ether=
netServerInterface.StartListen" title=3D"extronlib.interface.EthernetServer=
Interface.StartListen"><code class=3D"xref py py-meth docutils literal notr=
anslate"><span class=3D"pre">StartListen()</span></code></a>.
This class allows the user to send data over the Ethernet port in an
asynchronous manner using <a class=3D"reference internal" href=3D"http://12=
7.0.0.1:8080/interface.html#extronlib.interface.EthernetServerInterface.Sen=
d" title=3D"extronlib.interface.EthernetServerInterface.Send"><code class=
=3D"xref py py-meth docutils literal notranslate"><span class=3D"pre">Send(=
)</span></code></a> and <a class=3D"reference internal" href=3D"http://127.=
0.0.1:8080/interface.html#extronlib.interface.EthernetServerInterface.Recei=
veData" title=3D"extronlib.interface.EthernetServerInterface.ReceiveData"><=
code class=3D"xref py py-data docutils literal notranslate"><span class=3D"=
pre">ReceiveData</span></code></a> after
a client has connected.</p>
<div class=3D"admonition warning">
<p class=3D"first admonition-title">Warning</p>
<p class=3D"last">This class is no longer supported.  For any new developme=
nt,
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#extronlib.interface.EthernetServerInterfaceEx" title=3D"extronlib.interfa=
ce.EthernetServerInterfaceEx"><code class=3D"xref py py-class docutils lite=
ral notranslate"><span class=3D"pre">EthernetServerInterfaceEx</span></code=
></a> should be used.</p>
</div>
<div class=3D"deprecated">
<p><span class=3D"versionmodified">Deprecated since version 3.1: </span>Use=
 <a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.ht=
ml#extronlib.interface.EthernetServerInterfaceEx" title=3D"extronlib.interf=
ace.EthernetServerInterfaceEx"><code class=3D"xref py py-class docutils lit=
eral notranslate"><span class=3D"pre">EthernetServerInterfaceEx</span></cod=
e></a> instead.</p>
</div>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><ul class=3D"first last simple">
<li><strong>IPPort</strong> (<em>int</em>) =E2=80=93 IP port number of the =
listening service.</li>
<li><strong>Protocol</strong> (<em>string</em>) =E2=80=93 communication pro=
tocol (<code class=3D"docutils literal notranslate"><span class=3D"pre">'TC=
P'</span></code> or <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">'UDP'</span></code>)</li>
<li><strong>Interface</strong> (<em>string</em>) =E2=80=93 Defines the netw=
ork interface on which to listen
(<code class=3D"docutils literal notranslate"><span class=3D"pre">'Any'</sp=
an></code>, <code class=3D"docutils literal notranslate"><span class=3D"pre=
">'LAN'</span></code>, or <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">'AVLAN'</span></code>)</li>
<li><strong>ServicePort</strong> (<em>int</em>) =E2=80=93 sets the port fro=
m which the client will send data.
Zero means any service port is valid.</li>
</ul>
</td>
</tr>
</tbody>
</table>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last"><em>ServicePort</em> is only applicable to <code class=3D=
"docutils literal notranslate"><span class=3D"pre">'UDP'</span></code> prot=
ocol type.</p>
</div>
<div class=3D"highlight-python notranslate"><table class=3D"highlighttable"=
><tbody><tr><td class=3D"linenos"><div class=3D"linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64</pre></div></td><td class=3D"code"><div class=3D"highlight"><pre><span><=
/span><span class=3D"kn">from</span> <span class=3D"nn">extronlib</span> <s=
pan class=3D"kn">import</span> <span class=3D"n">event</span><span class=3D=
"p">,</span> <span class=3D"n">Version</span>
<span class=3D"kn">from</span> <span class=3D"nn">extronlib.interface</span=
> <span class=3D"kn">import</span> <span class=3D"n">EthernetServerInterfac=
e</span>
<span class=3D"kn">from</span> <span class=3D"nn">extronlib.system</span> <=
span class=3D"kn">import</span> <span class=3D"n">Timer</span><span class=
=3D"p">,</span> <span class=3D"n">Wait</span>

<span class=3D"kn">import</span> <span class=3D"nn">time</span>     <span c=
lass=3D"c1"># For monotonic()</span>

<span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"n">V=
ersion</span><span class=3D"p">())</span>

<span class=3D"n">serv</span> <span class=3D"o">=3D</span> <span class=3D"n=
">EthernetServerInterface</span><span class=3D"p">(</span><span class=3D"mi=
">10000</span><span class=3D"p">,</span> <span class=3D"s1">'TCP'</span><sp=
an class=3D"p">)</span>

<span class=3D"k">def</span> <span class=3D"nf">startServer</span><span cla=
ss=3D"p">():</span>
    <span class=3D"sd">"""Start the server.  Reattempt on failure after 1s.=
"""</span>
    <span class=3D"k">if</span> <span class=3D"n">serv</span><span class=3D=
"o">.</span><span class=3D"n">StartListen</span><span class=3D"p">()</span>=
 <span class=3D"o">!=3D</span> <span class=3D"s1">'Listening'</span><span c=
lass=3D"p">:</span>   <span class=3D"c1"># Port unavailable</span>
        <span class=3D"k">print</span><span class=3D"p">(</span><span class=
=3D"s1">'Port unavailable'</span><span class=3D"p">)</span>
        <span class=3D"n">Wait</span><span class=3D"p">(</span><span class=
=3D"mi">1</span><span class=3D"p">,</span> <span class=3D"n">startServer</s=
pan><span class=3D"p">)</span>

<span class=3D"nd">@Timer</span><span class=3D"p">(</span><span class=3D"mi=
">1</span><span class=3D"p">)</span>
<span class=3D"k">def</span> <span class=3D"nf">checkTimer</span><span clas=
s=3D"p">(</span><span class=3D"n">timer</span><span class=3D"p">,</span> <s=
pan class=3D"n">count</span><span class=3D"p">):</span>
    <span class=3D"sd">"""</span>
<span class=3D"sd">    Check the time since last keepalive received from cl=
ient. Reconnect if</span>
<span class=3D"sd">    necessary.</span>
<span class=3D"sd">    """</span>
    <span class=3D"k">global</span> <span class=3D"n">connected</span>
    <span class=3D"c1"># If connected and keepalive not received in last 15=
 seconds,</span>
    <span class=3D"c1"># disconnect and listen again.</span>
    <span class=3D"k">if</span> <span class=3D"n">connected</span> <span cl=
ass=3D"ow">and</span> <span class=3D"n">time</span><span class=3D"o">.</spa=
n><span class=3D"n">monotonic</span><span class=3D"p">()</span> <span class=
=3D"o">-</span> <span class=3D"n">connected</span> <span class=3D"o">&gt;</=
span> <span class=3D"mi">15</span><span class=3D"p">:</span>
        <span class=3D"n">serv</span><span class=3D"o">.</span><span class=
=3D"n">Disconnect</span><span class=3D"p">()</span>
        <span class=3D"n">startServer</span><span class=3D"p">()</span>
        <span class=3D"n">connected</span> <span class=3D"o">=3D</span> <sp=
an class=3D"bp">None</span>

<span class=3D"k">def</span> <span class=3D"nf">Initialize</span><span clas=
s=3D"p">():</span>
    <span class=3D"n">startServer</span><span class=3D"p">()</span>

<span class=3D"nd">@event</span><span class=3D"p">(</span><span class=3D"n"=
>serv</span><span class=3D"p">,</span> <span class=3D"s1">'ReceiveData'</sp=
an><span class=3D"p">)</span>
<span class=3D"k">def</span> <span class=3D"nf">HandleReceiveData</span><sp=
an class=3D"p">(</span><span class=3D"n">interface</span><span class=3D"p">=
,</span> <span class=3D"n">data</span><span class=3D"p">):</span>
    <span class=3D"k">global</span> <span class=3D"n">connected</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s1">'Rx: {}'</span><span class=3D"o">.</span><span class=3D"n">format</span=
><span class=3D"p">(</span><span class=3D"n">data</span><span class=3D"o">.=
</span><span class=3D"n">decode</span><span class=3D"p">()))</span>

    <span class=3D"c1"># This simulates a condition where the server has de=
termined to end the</span>
    <span class=3D"c1"># session and close the connection.</span>
    <span class=3D"k">if</span> <span class=3D"sa">b</span><span class=3D"s=
1">'end'</span> <span class=3D"ow">in</span> <span class=3D"n">data</span><=
span class=3D"p">:</span>                  <span class=3D"c1"># Disconnect =
on data</span>
        <span class=3D"k">print</span><span class=3D"p">(</span><span class=
=3D"s1">'End signal received.'</span><span class=3D"p">)</span>
        <span class=3D"n">interface</span><span class=3D"o">.</span><span c=
lass=3D"n">Disconnect</span><span class=3D"p">()</span>
        <span class=3D"n">startServer</span><span class=3D"p">()</span>

    <span class=3D"c1"># This simulates a keepalive message received from t=
he client.  Check</span>
    <span class=3D"c1"># for missed keepalives in checkTimer()</span>
    <span class=3D"k">elif</span> <span class=3D"sa">b</span><span class=3D=
"s1">'ping'</span> <span class=3D"ow">in</span> <span class=3D"n">data</spa=
n><span class=3D"p">:</span>               <span class=3D"c1"># Record last=
 keepalive time</span>
        <span class=3D"n">connected</span> <span class=3D"o">=3D</span> <sp=
an class=3D"n">time</span><span class=3D"o">.</span><span class=3D"n">monot=
onic</span><span class=3D"p">()</span>

<span class=3D"nd">@event</span><span class=3D"p">(</span><span class=3D"n"=
>serv</span><span class=3D"p">,</span> <span class=3D"s1">'Connected'</span=
><span class=3D"p">)</span>
<span class=3D"k">def</span> <span class=3D"nf">HandleClientConnect</span><=
span class=3D"p">(</span><span class=3D"n">interface</span><span class=3D"p=
">,</span> <span class=3D"n">state</span><span class=3D"p">):</span>
    <span class=3D"k">global</span> <span class=3D"n">connected</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s1">'Client connected ({}).'</span><span class=3D"o">.</span><span class=3D=
"n">format</span><span class=3D"p">(</span><span class=3D"n">interface</spa=
n><span class=3D"o">.</span><span class=3D"n">IPAddress</span><span class=
=3D"p">))</span>
    <span class=3D"n">interface</span><span class=3D"o">.</span><span class=
=3D"n">Send</span><span class=3D"p">(</span><span class=3D"sa">b</span><spa=
n class=3D"s1">'Hello.</span><span class=3D"se">\n</span><span class=3D"s1"=
>'</span><span class=3D"p">)</span>
    <span class=3D"n">connected</span> <span class=3D"o">=3D</span> <span c=
lass=3D"n">time</span><span class=3D"o">.</span><span class=3D"n">monotonic=
</span><span class=3D"p">()</span>        <span class=3D"c1"># Reset the ke=
epalive time</span>

<span class=3D"nd">@event</span><span class=3D"p">(</span><span class=3D"n"=
>serv</span><span class=3D"p">,</span> <span class=3D"s1">'Disconnected'</s=
pan><span class=3D"p">)</span>
<span class=3D"k">def</span> <span class=3D"nf">HandleClientDisconnect</spa=
n><span class=3D"p">(</span><span class=3D"n">interface</span><span class=
=3D"p">,</span> <span class=3D"n">state</span><span class=3D"p">):</span>
    <span class=3D"k">global</span> <span class=3D"n">connected</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s1">'Server/Client disconnected.'</span><span class=3D"p">)</span>
    <span class=3D"n">connected</span> <span class=3D"o">=3D</span> <span c=
lass=3D"bp">None</span>                    <span class=3D"c1"># Clear the k=
eepalive</span>

<span class=3D"n">Initialize</span><span class=3D"p">()</span>
</pre></div>
</td></tr></tbody></table></div>
<dl class=3D"method">
<dt id=3D"extronlib.interface.EthernetServerInterface.Disconnect">
<code class=3D"descname">Disconnect</code><span class=3D"sig-paren">(</span=
><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"http://1=
27.0.0.1:8080/interface.html#extronlib.interface.EthernetServerInterface.Di=
sconnect" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Closes the connection gracefully.</p>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"k">def</span> <span class=3D"nf">checkTimer</spa=
n><span class=3D"p">():</span>
    <span class=3D"k">global</span> <span class=3D"n">connected</span>
    <span class=3D"c1"># If connected and keepalive not received in last 15=
 seconds,</span>
    <span class=3D"c1"># disconnect and listen again.</span>
    <span class=3D"k">if</span> <span class=3D"n">connected</span> <span cl=
ass=3D"ow">and</span> <span class=3D"n">time</span><span class=3D"o">.</spa=
n><span class=3D"n">monotonic</span><span class=3D"p">()</span> <span class=
=3D"o">-</span> <span class=3D"n">connected</span> <span class=3D"o">&gt;</=
span> <span class=3D"mi">15</span><span class=3D"p">:</span>
        <span class=3D"n">serv</span><span class=3D"o">.</span><span class=
=3D"n">Disconnect</span><span class=3D"p">()</span>
        <span class=3D"n">startServer</span><span class=3D"p">()</span>
        <span class=3D"n">connected</span> <span class=3D"o">=3D</span> <sp=
an class=3D"bp">None</span>
    <span class=3D"n">Wait</span><span class=3D"p">(</span><span class=3D"m=
i">1</span><span class=3D"p">,</span> <span class=3D"n">checkTimer</span><s=
pan class=3D"p">)</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.EthernetServerInterface.Send">
<code class=3D"descname">Send</code><span class=3D"sig-paren">(</span><em>d=
ata</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"h=
ttp://127.0.0.1:8080/interface.html#extronlib.interface.EthernetServerInter=
face.Send" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Send string over Ethernet port if it=E2=80=99s open</p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><strong>data</strong> (<em>bytes</em><em>, </em><em>st=
ring</em>) =E2=80=93 string to send out</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Raise:</th><td clas=
s=3D"field-body">TypeError, IOError</td>
</tr>
</tbody>
</table>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">interface</span><span class=3D"o">.</span><sp=
an class=3D"n">Send</span><span class=3D"p">(</span><span class=3D"sa">b</s=
pan><span class=3D"s1">'Hello.</span><span class=3D"se">\n</span><span clas=
s=3D"s1">'</span><span class=3D"p">)</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.EthernetServerInterface.StartListen">
<code class=3D"descname">StartListen</code><span class=3D"sig-paren">(</spa=
n><em>timeout=3D0</em><span class=3D"sig-paren">)</span><a class=3D"headerl=
ink" href=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.Ether=
netServerInterface.StartListen" title=3D"Permalink to this definition">=C2=
=B6</a></dt>
<dd><p>Start the listener</p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><strong>timeout</strong> (<em>float</em>) =E2=80=93 ho=
w long to listen for connections (0=3DForever)</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Returns:</th><td cl=
ass=3D"field-body"><code class=3D"docutils literal notranslate"><span class=
=3D"pre">'Listening'</span></code> or a reason for failure
(e.g. <code class=3D"docutils literal notranslate"><span class=3D"pre">'Por=
tUnavailable'</span></code>)</td>
</tr>
<tr class=3D"field-odd field"><th class=3D"field-name">Raises:</th><td clas=
s=3D"field-body">IOError</td>
</tr>
</tbody>
</table>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"k">def</span> <span class=3D"nf">startServer</sp=
an><span class=3D"p">():</span>
    <span class=3D"k">if</span> <span class=3D"n">serv</span><span class=3D=
"o">.</span><span class=3D"n">StartListen</span><span class=3D"p">()</span>=
 <span class=3D"o">!=3D</span> <span class=3D"s1">'Listening'</span><span c=
lass=3D"p">:</span>   <span class=3D"c1"># Port unavailable</span>
        <span class=3D"k">print</span><span class=3D"p">(</span><span class=
=3D"s1">'Port unavailable'</span><span class=3D"p">)</span>
        <span class=3D"n">Wait</span><span class=3D"p">(</span><span class=
=3D"mi">1</span><span class=3D"p">,</span> <span class=3D"n">startServer</s=
pan><span class=3D"p">)</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.EthernetServerInterface.StopListen">
<code class=3D"descname">StopListen</code><span class=3D"sig-paren">(</span=
><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"http://1=
27.0.0.1:8080/interface.html#extronlib.interface.EthernetServerInterface.St=
opListen" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Stop the listener</p>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"nd">@event</span><span class=3D"p">(</span><span=
 class=3D"n">serv</span><span class=3D"p">,</span> <span class=3D"s1">'Rece=
iveData'</span><span class=3D"p">)</span>
<span class=3D"k">def</span> <span class=3D"nf">HandleReceiveData</span><sp=
an class=3D"p">(</span><span class=3D"n">interface</span><span class=3D"p">=
,</span> <span class=3D"n">data</span><span class=3D"p">):</span>
    <span class=3D"k">global</span> <span class=3D"n">connected</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s1">'Rx: {}'</span><span class=3D"o">.</span><span class=3D"n">format</span=
><span class=3D"p">(</span><span class=3D"n">data</span><span class=3D"o">.=
</span><span class=3D"n">decode</span><span class=3D"p">()))</span>

    <span class=3D"c1"># This simulates a condition where the server has de=
termined to end the</span>
    <span class=3D"c1"># session and close the connection.</span>
    <span class=3D"k">if</span> <span class=3D"sa">b</span><span class=3D"s=
1">'end'</span> <span class=3D"ow">in</span> <span class=3D"n">data</span><=
span class=3D"p">:</span>                  <span class=3D"c1"># Disconnect =
on data</span>
        <span class=3D"k">print</span><span class=3D"p">(</span><span class=
=3D"s1">'End signal received.'</span><span class=3D"p">)</span>
        <span class=3D"n">interface</span><span class=3D"o">.</span><span c=
lass=3D"n">Disconnect</span><span class=3D"p">()</span>
        <span class=3D"n">interface</span><span class=3D"o">.</span><span c=
lass=3D"n">StopListen</span><span class=3D"p">()</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.EthernetServerInterface.Connected">
<code class=3D"descname">Connected</code><a class=3D"headerlink" href=3D"ht=
tp://127.0.0.1:8080/interface.html#extronlib.interface.EthernetServerInterf=
ace.Connected" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when socket connection is established.</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.EthernetServerInterface.Disconnected">
<code class=3D"descname">Disconnected</code><a class=3D"headerlink" href=3D=
"http://127.0.0.1:8080/interface.html#extronlib.interface.EthernetServerInt=
erface.Disconnected" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when the socket connection is broken</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.EthernetServerInterface.Hostname">
<code class=3D"descname">Hostname</code><a class=3D"headerlink" href=3D"htt=
p://127.0.0.1:8080/interface.html#extronlib.interface.EthernetServerInterfa=
ce.Hostname" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">Hostname DNS name of the connection. Can be the IP Addres=
s</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.EthernetServerInterface.IPAddress">
<code class=3D"descname">IPAddress</code><a class=3D"headerlink" href=3D"ht=
tp://127.0.0.1:8080/interface.html#extronlib.interface.EthernetServerInterf=
ace.IPAddress" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">the IP Address of the connected device</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.EthernetServerInterface.IPPort">
<code class=3D"descname">IPPort</code><a class=3D"headerlink" href=3D"http:=
//127.0.0.1:8080/interface.html#extronlib.interface.EthernetServerInterface=
.IPPort" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">IP Port number of the listening service</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">int</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.EthernetServerInterface.Interface">
<code class=3D"descname">Interface</code><a class=3D"headerlink" href=3D"ht=
tp://127.0.0.1:8080/interface.html#extronlib.interface.EthernetServerInterf=
ace.Interface" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">name of interface on which the server is listening
(<code class=3D"docutils literal notranslate"><span class=3D"pre">'Any'</sp=
an></code>, <code class=3D"docutils literal notranslate"><span class=3D"pre=
">'LAN'</span></code>, or <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">'AVLAN'</span></code>)</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.EthernetServerInterface.Protocol">
<code class=3D"descname">Protocol</code><a class=3D"headerlink" href=3D"htt=
p://127.0.0.1:8080/interface.html#extronlib.interface.EthernetServerInterfa=
ce.Protocol" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">communication protocol (<code class=3D"docutils literal n=
otranslate"><span class=3D"pre">'TCP'</span></code> or <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">'UDP'</span></code>)</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.EthernetServerInterface.ReceiveData">
<code class=3D"descname">ReceiveData</code><a class=3D"headerlink" href=3D"=
http://127.0.0.1:8080/interface.html#extronlib.interface.EthernetServerInte=
rface.ReceiveData" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Receive Data event handler used for asynchronous
transactions</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#extronlib.interface.EthernetServerInterface" title=3D"extronlib.interface=
.EthernetServerInterface"><code class=3D"xref py py-class docutils literal =
notranslate"><span class=3D"pre">EthernetServerInterface</span></code></a> =
instance triggering the event and
the second one is a bytes object.</p>
<div class=3D"highlight-python notranslate"><table class=3D"highlighttable"=
><tbody><tr><td class=3D"linenos"><div class=3D"linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32</pre></div></td><td class=3D"code"><div class=3D"highlight"><pre><span><=
/span><span class=3D"n">CLIServer</span> <span class=3D"o">=3D</span> <span=
 class=3D"n">EthernetServerInterface</span><span class=3D"p">(</span><span =
class=3D"mi">1024</span><span class=3D"p">)</span>
<span class=3D"n">CLIServer</span><span class=3D"o">.</span><span class=3D"=
n">StartListen</span><span class=3D"p">()</span>

<span class=3D"n">CLIServerCommands</span> <span class=3D"o">=3D</span> <sp=
an class=3D"p">[</span><span class=3D"s1">'HELP'</span><span class=3D"p">,<=
/span> <span class=3D"s1">'RESTART'</span><span class=3D"p">,</span> <span =
class=3D"s1">'REPORT'</span><span class=3D"p">]</span>

<span class=3D"n">CLIBuffer</span> <span class=3D"o">=3D</span> <span class=
=3D"s1">''</span>

<span class=3D"c1"># rcvString =3D=3D 'HELP\rREPORT\rRESTA'</span>
<span class=3D"nd">@event</span><span class=3D"p">(</span><span class=3D"n"=
>CLIServer</span><span class=3D"p">,</span> <span class=3D"s1">'ReceiveData=
'</span><span class=3D"p">)</span>
<span class=3D"k">def</span> <span class=3D"nf">CLIServerFeedbackHandler</s=
pan><span class=3D"p">(</span><span class=3D"n">interface</span><span class=
=3D"p">,</span> <span class=3D"n">rcvString</span><span class=3D"p">):</spa=
n>
    <span class=3D"k">global</span> <span class=3D"n">CLIBuffer</span>
    <span class=3D"n">tempBuffer</span> <span class=3D"o">=3D</span> <span =
class=3D"n">CLIBuffer</span> <span class=3D"o">+</span> <span class=3D"n">r=
cvString</span><span class=3D"o">.</span><span class=3D"n">decode</span><sp=
an class=3D"p">()</span>
    <span class=3D"k">if</span> <span class=3D"n">tempBuffer</span><span cl=
ass=3D"p">[</span><span class=3D"o">-</span><span class=3D"mi">1</span><spa=
n class=3D"p">]</span> <span class=3D"o">!=3D</span> <span class=3D"s1">'</=
span><span class=3D"se">\r</span><span class=3D"s1">'</span><span class=3D"=
p">:</span>              <span class=3D"c1"># Partial message</span>
        <span class=3D"n">last</span> <span class=3D"o">=3D</span> <span cl=
ass=3D"n">tempBuffer</span><span class=3D"o">.</span><span class=3D"n">rfin=
d</span><span class=3D"p">(</span><span class=3D"s1">'</span><span class=3D=
"se">\r</span><span class=3D"s1">'</span><span class=3D"p">)</span>       <=
span class=3D"c1"># Find last &lt;CR&gt;</span>
        <span class=3D"n">CLIBuffer</span> <span class=3D"o">=3D</span> <sp=
an class=3D"n">tempBuffer</span><span class=3D"p">[</span><span class=3D"n"=
>last</span><span class=3D"o">+</span><span class=3D"mi">1</span><span clas=
s=3D"p">:]</span>     <span class=3D"c1"># Save the leftovers</span>
        <span class=3D"n">tempBuffer</span> <span class=3D"o">=3D</span> <s=
pan class=3D"n">tempBuffer</span><span class=3D"p">[:</span><span class=3D"=
n">last</span><span class=3D"p">]</span>      <span class=3D"c1"># Deal wit=
h the complete strings</span>
    <span class=3D"k">else</span><span class=3D"p">:</span>
        <span class=3D"n">CLIBuffer</span> <span class=3D"o">=3D</span> <sp=
an class=3D"s1">''</span>                      <span class=3D"c1"># All dat=
a handled</span>

    <span class=3D"n">Commands</span> <span class=3D"o">=3D</span> <span cl=
ass=3D"n">tempBuffer</span><span class=3D"o">.</span><span class=3D"n">spli=
t</span><span class=3D"p">(</span><span class=3D"s1">'</span><span class=3D=
"se">\r</span><span class=3D"s1">'</span><span class=3D"p">)</span>

    <span class=3D"c1"># Handle Commands</span>
    <span class=3D"k">for</span> <span class=3D"n">Command</span> <span cla=
ss=3D"ow">in</span> <span class=3D"n">Commands</span><span class=3D"p">:</s=
pan>
        <span class=3D"k">if</span> <span class=3D"n">Command</span> <span =
class=3D"ow">in</span> <span class=3D"n">CLIServerCommands</span><span clas=
s=3D"p">:</span>
            <span class=3D"k">if</span> <span class=3D"n">Command</span> <s=
pan class=3D"o">=3D=3D</span> <span class=3D"s1">'HELP'</span><span class=
=3D"p">:</span>
                <span class=3D"n">ShowCLIHelp</span><span class=3D"p">()</s=
pan>
            <span class=3D"k">elif</span> <span class=3D"n">Command</span> =
<span class=3D"o">=3D=3D</span> <span class=3D"s1">'REPORT'</span><span cla=
ss=3D"p">:</span>
                <span class=3D"n">GenerateSystemReport</span><span class=3D=
"p">()</span>
            <span class=3D"k">elif</span> <span class=3D"n">Command</span> =
<span class=3D"o">=3D=3D</span> <span class=3D"s1">'RESTART'</span><span cl=
ass=3D"p">:</span>
                <span class=3D"n">RestartCLIService</span><span class=3D"p"=
>()</span>
        <span class=3D"k">else</span><span class=3D"p">:</span>
            <span class=3D"k">print</span><span class=3D"p">(</span><span c=
lass=3D"s1">'Unreferenced command:'</span><span class=3D"p">,</span> <span =
class=3D"n">response</span><span class=3D"p">)</span>
</pre></div>
</td></tr></tbody></table></div>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.EthernetServerInterface.ServicePort">
<code class=3D"descname">ServicePort</code><a class=3D"headerlink" href=3D"=
http://127.0.0.1:8080/interface.html#extronlib.interface.EthernetServerInte=
rface.ServicePort" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">ServicePort port on which the client will listen for data=
</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">int</td>
</tr>
</tbody>
</table>
</dd></dl>

</dd></dl>

</div>
<div class=3D"section" id=3D"ethernetserverinterfaceex-class">
<h2><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#extronlib.interface.EthernetServerInterfaceEx" title=3D"extronlib.int=
erface.EthernetServerInterfaceEx"><code class=3D"xref py py-class docutils =
literal notranslate"><span class=3D"pre">EthernetServerInterfaceEx</span></=
code></a> Class<a class=3D"headerlink" href=3D"http://127.0.0.1:8080/interf=
ace.html#ethernetserverinterfaceex-class" title=3D"Permalink to this headli=
ne">=C2=B6</a></h2>
<dl class=3D"class">
<dt id=3D"extronlib.interface.EthernetServerInterfaceEx">
<em class=3D"property">class </em><code class=3D"descname">EthernetServerIn=
terfaceEx</code><span class=3D"sig-paren">(</span><em>IPPort</em>, <em>Prot=
ocol=3D'TCP'</em>, <em>Interface=3D'Any'</em>, <em>MaxClients=3DNone</em><s=
pan class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"http://127.=
0.0.1:8080/interface.html#extronlib.interface.EthernetServerInterfaceEx" ti=
tle=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>This class provides an interface to an Ethernet server that allows a
user-defined amount of client connections.  After instantiation, the
server is started by calling <a class=3D"reference internal" href=3D"http:/=
/127.0.0.1:8080/interface.html#extronlib.interface.EthernetServerInterfaceE=
x.StartListen" title=3D"extronlib.interface.EthernetServerInterfaceEx.Start=
Listen"><code class=3D"xref py py-meth docutils literal notranslate"><span =
class=3D"pre">StartListen()</span></code></a>. This class allows the
user to send data over the Ethernet port in an asynchronous manner using
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#extronlib.interface.ClientObject.Send" title=3D"extronlib.interface.Clien=
tObject.Send"><code class=3D"xref py py-meth docutils literal notranslate">=
<span class=3D"pre">Send()</span></code></a> and
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#extronlib.interface.EthernetServerInterfaceEx.ReceiveData" title=3D"extro=
nlib.interface.EthernetServerInterfaceEx.ReceiveData"><code class=3D"xref p=
y py-data docutils literal notranslate"><span class=3D"pre">ReceiveData</sp=
an></code></a> after a client has connected.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified">New in version 2.4.</span></p>
</div>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><ul class=3D"first last simple">
<li><strong>IPPort</strong> (<em>int</em>) =E2=80=93 IP port number of the =
listening service.</li>
<li><strong>Protocol</strong> (<em>string</em>) =E2=80=93 communication pro=
tocol (<code class=3D"docutils literal notranslate"><span class=3D"pre">'TC=
P'</span></code> or <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">'UDP'</span></code>)</li>
<li><strong>Interface</strong> (<em>string</em>) =E2=80=93 Defines the netw=
ork interface on which to listen
(<code class=3D"docutils literal notranslate"><span class=3D"pre">'Any'</sp=
an></code>, <code class=3D"docutils literal notranslate"><span class=3D"pre=
">'LAN'</span></code>, or <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">'AVLAN'</span></code>)</li>
<li><strong>MaxClients</strong> (<em>int</em>) =E2=80=93 maximum number of =
client connections to allow
(<code class=3D"docutils literal notranslate"><span class=3D"pre">None</spa=
n></code> =3D=3D Unlimited, 0 =3D=3D Invalid)</li>
</ul>
</td>
</tr>
</tbody>
</table>
<div class=3D"highlight-python notranslate"><table class=3D"highlighttable"=
><tbody><tr><td class=3D"linenos"><div class=3D"linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37</pre></div></td><td class=3D"code"><div class=3D"highlight"><pre><span><=
/span><span class=3D"kn">from</span> <span class=3D"nn">extronlib</span> <s=
pan class=3D"kn">import</span> <span class=3D"n">event</span><span class=3D=
"p">,</span> <span class=3D"n">Version</span>
<span class=3D"kn">from</span> <span class=3D"nn">extronlib.interface</span=
> <span class=3D"kn">import</span> <span class=3D"n">EthernetServerInterfac=
eEx</span>

<span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"n">V=
ersion</span><span class=3D"p">())</span>

<span class=3D"n">serv</span> <span class=3D"o">=3D</span> <span class=3D"n=
">EthernetServerInterfaceEx</span><span class=3D"p">(</span><span class=3D"=
mi">10000</span><span class=3D"p">,</span> <span class=3D"s1">'TCP'</span><=
span class=3D"p">)</span>
<span class=3D"k">if</span> <span class=3D"n">serv</span><span class=3D"o">=
.</span><span class=3D"n">StartListen</span><span class=3D"p">()</span> <sp=
an class=3D"o">!=3D</span> <span class=3D"s1">'Listening'</span><span class=
=3D"p">:</span>
    <span class=3D"k">raise</span> <span class=3D"n">ResourceWarning</span>=
<span class=3D"p">(</span><span class=3D"s1">'Port unavailable'</span><span=
 class=3D"p">)</span> <span class=3D"c1"># this is not likely to recover</s=
pan>

<span class=3D"nd">@event</span><span class=3D"p">(</span><span class=3D"n"=
>serv</span><span class=3D"p">,</span> <span class=3D"s1">'ReceiveData'</sp=
an><span class=3D"p">)</span>
<span class=3D"k">def</span> <span class=3D"nf">HandleReceiveData</span><sp=
an class=3D"p">(</span><span class=3D"n">client</span><span class=3D"p">,</=
span> <span class=3D"n">data</span><span class=3D"p">):</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s1">'Rx: {}'</span><span class=3D"o">.</span><span class=3D"n">format</span=
><span class=3D"p">(</span><span class=3D"n">data</span><span class=3D"o">.=
</span><span class=3D"n">decode</span><span class=3D"p">()))</span>

    <span class=3D"c1"># This simulates a condition where the server has de=
termined to end the</span>
    <span class=3D"c1"># session and close the connection.</span>
    <span class=3D"k">if</span> <span class=3D"sa">b</span><span class=3D"s=
1">'end'</span> <span class=3D"ow">in</span> <span class=3D"n">data</span><=
span class=3D"p">:</span>                  <span class=3D"c1"># Disconnect =
on data</span>
        <span class=3D"k">print</span><span class=3D"p">(</span><span class=
=3D"s1">'End signal received.'</span><span class=3D"p">)</span>
        <span class=3D"n">client</span><span class=3D"o">.</span><span clas=
s=3D"n">Disconnect</span><span class=3D"p">()</span>

    <span class=3D"c1"># This simulates a Single User mode where you do not=
 want to accept any</span>
    <span class=3D"c1"># other connections.</span>
    <span class=3D"k">elif</span> <span class=3D"sa">b</span><span class=3D=
"s1">'singleuser'</span> <span class=3D"ow">in</span> <span class=3D"n">dat=
a</span><span class=3D"p">:</span>         <span class=3D"c1"># Disconnect =
all other clients</span>
        <span class=3D"n">serv</span><span class=3D"o">.</span><span class=
=3D"n">StopListen</span><span class=3D"p">()</span>
        <span class=3D"k">for</span> <span class=3D"n">client_</span> <span=
 class=3D"ow">in</span> <span class=3D"n">serv</span><span class=3D"o">.</s=
pan><span class=3D"n">Clients</span><span class=3D"p">:</span>
            <span class=3D"k">if</span> <span class=3D"n">client_</span> <s=
pan class=3D"ow">is</span> <span class=3D"ow">not</span> <span class=3D"n">=
client</span><span class=3D"p">:</span>
                <span class=3D"n">client_</span><span class=3D"o">.</span><=
span class=3D"n">Disconnect</span><span class=3D"p">()</span>
    <span class=3D"k">elif</span> <span class=3D"sa">b</span><span class=3D=
"s1">'multiuser'</span> <span class=3D"ow">in</span> <span class=3D"n">data=
</span><span class=3D"p">:</span>
        <span class=3D"n">serv</span><span class=3D"o">.</span><span class=
=3D"n">StartListen</span><span class=3D"p">()</span>

<span class=3D"nd">@event</span><span class=3D"p">(</span><span class=3D"n"=
>serv</span><span class=3D"p">,</span> <span class=3D"s1">'Connected'</span=
><span class=3D"p">)</span>
<span class=3D"k">def</span> <span class=3D"nf">HandleClientConnect</span><=
span class=3D"p">(</span><span class=3D"n">client</span><span class=3D"p">,=
</span> <span class=3D"n">state</span><span class=3D"p">):</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s1">'Client connected ({}).'</span><span class=3D"o">.</span><span class=3D=
"n">format</span><span class=3D"p">(</span><span class=3D"n">client</span><=
span class=3D"o">.</span><span class=3D"n">IPAddress</span><span class=3D"p=
">))</span>
    <span class=3D"n">client</span><span class=3D"o">.</span><span class=3D=
"n">Send</span><span class=3D"p">(</span><span class=3D"sa">b</span><span c=
lass=3D"s1">'Hello.</span><span class=3D"se">\n</span><span class=3D"s1">'<=
/span><span class=3D"p">)</span>

<span class=3D"nd">@event</span><span class=3D"p">(</span><span class=3D"n"=
>serv</span><span class=3D"p">,</span> <span class=3D"s1">'Disconnected'</s=
pan><span class=3D"p">)</span>
<span class=3D"k">def</span> <span class=3D"nf">HandleClientDisconnect</spa=
n><span class=3D"p">(</span><span class=3D"n">client</span><span class=3D"p=
">,</span> <span class=3D"n">state</span><span class=3D"p">):</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s1">'Server/Client {} disconnected.'</span><span class=3D"o">.</span><span =
class=3D"n">format</span><span class=3D"p">(</span><span class=3D"n">client=
</span><span class=3D"o">.</span><span class=3D"n">IPAddress</span><span cl=
ass=3D"p">))</span>
</pre></div>
</td></tr></tbody></table></div>
<dl class=3D"method">
<dt id=3D"extronlib.interface.EthernetServerInterfaceEx.Disconnect">
<code class=3D"descname">Disconnect</code><span class=3D"sig-paren">(</span=
><em>client</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" h=
ref=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.EthernetSer=
verInterfaceEx.Disconnect" title=3D"Permalink to this definition">=C2=B6</a=
></dt>
<dd><p>Closes the connection gracefully on specified client.</p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><strong>client</strong> (<a class=3D"reference interna=
l" href=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.ClientO=
bject" title=3D"extronlib.interface.ClientObject"><code class=3D"xref py py=
-class docutils literal notranslate"><span class=3D"pre">ClientObject</span=
></code></a>) =E2=80=93 handle to client object</td>
</tr>
</tbody>
</table>
<div class=3D"code python highlight-default notranslate"><div class=3D"high=
light"><pre><span></span><span class=3D"nd">@event</span><span class=3D"p">=
(</span><span class=3D"n">serv</span><span class=3D"p">,</span> <span class=
=3D"s1">'ReceiveData'</span><span class=3D"p">)</span>
<span class=3D"k">def</span> <span class=3D"nf">HandleReceiveData</span><sp=
an class=3D"p">(</span><span class=3D"n">client</span><span class=3D"p">,</=
span> <span class=3D"n">data</span><span class=3D"p">):</span>
    <span class=3D"nb">print</span><span class=3D"p">(</span><span class=3D=
"s1">'Rx: </span><span class=3D"si">{}</span><span class=3D"s1">'</span><sp=
an class=3D"o">.</span><span class=3D"n">format</span><span class=3D"p">(</=
span><span class=3D"n">data</span><span class=3D"o">.</span><span class=3D"=
n">decode</span><span class=3D"p">()))</span>

    <span class=3D"c1"># This simulates a condition where the server has de=
termined to end the</span>
    <span class=3D"c1"># session and close the connection.</span>
    <span class=3D"k">if</span> <span class=3D"sa">b</span><span class=3D"s=
1">'end'</span> <span class=3D"ow">in</span> <span class=3D"n">data</span><=
span class=3D"p">:</span>                  <span class=3D"c1"># Disconnect =
on data</span>
        <span class=3D"nb">print</span><span class=3D"p">(</span><span clas=
s=3D"s1">'End signal received.'</span><span class=3D"p">)</span>
        <span class=3D"n">serv</span><span class=3D"o">.</span><span class=
=3D"n">Disconnect</span><span class=3D"p">(</span><span class=3D"n">client<=
/span><span class=3D"p">)</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.EthernetServerInterfaceEx.SSLWrap">
<code class=3D"descname">SSLWrap</code><span class=3D"sig-paren">(</span><e=
m>certificate=3DNone</em>, <em>cert_reqs=3D'CERT_NONE'</em>, <em>ssl_versio=
n=3D'TLSv2'</em>, <em>ca_certs=3DNone</em><span class=3D"sig-paren">)</span=
><a class=3D"headerlink" href=3D"http://127.0.0.1:8080/interface.html#extro=
nlib.interface.EthernetServerInterfaceEx.SSLWrap" title=3D"Permalink to thi=
s definition">=C2=B6</a></dt>
<dd><p>Wrap all connections to this server instance in an SSL context.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p>This is almost a direct call to <a class=3D"reference external" href=3D"=
https://docs.python.org/3.5/library/ssl.html?highlight=3Dssl#ssl.wrap_socke=
t">ssl.wrap_socket()</a>.
See python documentation for more details.  The following changes
are applied:</p>
<blockquote class=3D"last">
<div><ul class=3D"simple">
<li>Property <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">server_side</span></code> is set to <code class=3D"docutils literal notr=
anslate"><span class=3D"pre">True</span></code></li>
<li>Property <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">cert_reqs</span></code> is a string</li>
<li>Property <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">ssl_version</span></code> is a string</li>
<li>Property <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">do_handshake_on_connect</span></code> is set to <code class=3D"docutils =
literal notranslate"><span class=3D"pre">True</span></code></li>
<li>Property <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">suppress_ragged_eofs</span></code> is set to <code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">True</span></code></li>
<li>Property <code class=3D"docutils literal notranslate"><span class=3D"pr=
e">ciphers</span></code> is fixed to the system default</li>
</ul>
</div></blockquote>
</div>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><ul class=3D"first last simple">
<li><strong>certificate</strong> (<em>string</em>) =E2=80=93 alias to a spe=
cific keyfile/certificate pair</li>
<li><strong>cert_reqs</strong> (<em>string</em>) =E2=80=93 specifies whethe=
r a certificate is required from the
other side of the connection (<code class=3D"docutils literal notranslate">=
<span class=3D"pre">'CERT_NONE'</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">'CERT_OPTI=
ONAL'</span></code>, or <code class=3D"docutils literal notranslate"><span =
class=3D"pre">'CERT_REQUIRED'</span></code>). If the value of this
parameter is not <code class=3D"docutils literal notranslate"><span class=
=3D"pre">'CERT_NONE'</span></code>, then the ca_certs parameter must
point to a file of CA certificates.</li>
<li><strong>ssl_version</strong> (<em>string</em>) =E2=80=93 version from t=
he supported SSL/TLS version table
(<code class=3D"docutils literal notranslate"><span class=3D"pre">'TLSv2'</=
span></code>). Currently only TLS 1.2 is allowed.</li>
<li><strong>ca_certs</strong> (<em>string</em>) =E2=80=93 alias to a file t=
hat contains a set of concatenated
=E2=80=9Ccertification authority=E2=80=9D certificates, which are used to v=
alidate
certificates passed from the other end of the connection.</li>
</ul>
</td>
</tr>
</tbody>
</table>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<ul class=3D"last simple">
<li>Requires protocol <code class=3D"docutils literal notranslate"><span cl=
ass=3D"pre">'TCP'</span></code>.</li>
<li><strong>certificate</strong> and <strong>ca_certs</strong> specify alia=
ses to machine=20
certificate/key pairs and CA certificates uploaded to the=20
processor in Toolbelt.</li>
</ul>
</div>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">serv</span> <span class=3D"o">=3D</span> <spa=
n class=3D"n">EthernetServerInterfaceEx</span><span class=3D"p">(</span><sp=
an class=3D"mi">10000</span><span class=3D"p">,</span> <span class=3D"s1">'=
TCP'</span><span class=3D"p">)</span>
<span class=3D"n">serv</span><span class=3D"o">.</span><span class=3D"n">SS=
LWrap</span><span class=3D"p">(</span>
    <span class=3D"n">certificate</span><span class=3D"o">=3D</span><span c=
lass=3D"s1">'client'</span><span class=3D"p">,</span>
    <span class=3D"n">cert_reqs</span><span class=3D"o">=3D</span><span cla=
ss=3D"s1">'CERT_REQUIRED'</span><span class=3D"p">,</span>
    <span class=3D"n">ssl_version</span><span class=3D"o">=3D</span><span c=
lass=3D"s1">'TLSv2'</span><span class=3D"p">,</span>
    <span class=3D"n">ca_certs</span><span class=3D"o">=3D</span><span clas=
s=3D"s1">'rootca'</span>
<span class=3D"p">)</span>

<span class=3D"k">if</span> <span class=3D"n">serv</span><span class=3D"o">=
.</span><span class=3D"n">StartListen</span><span class=3D"p">()</span> <sp=
an class=3D"o">!=3D</span> <span class=3D"s1">'Listening'</span><span class=
=3D"p">:</span>
    <span class=3D"k">raise</span> <span class=3D"n">ResourceWarning</span>=
<span class=3D"p">(</span><span class=3D"s1">'Port unavailable'</span><span=
 class=3D"p">)</span> <span class=3D"c1"># this is not likely to recover</s=
pan>
</pre></div>
</div>
<div class=3D"versionadded">
<p><span class=3D"versionmodified">New in version 3.4.</span></p>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.EthernetServerInterfaceEx.StartListen">
<code class=3D"descname">StartListen</code><span class=3D"sig-paren">(</spa=
n><em>timeout=3D0</em><span class=3D"sig-paren">)</span><a class=3D"headerl=
ink" href=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.Ether=
netServerInterfaceEx.StartListen" title=3D"Permalink to this definition">=
=C2=B6</a></dt>
<dd><p>Start the listener</p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><strong>timeout</strong> (<em>float</em>) =E2=80=93 ho=
w long to listen for connections</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Returns:</th><td cl=
ass=3D"field-body"><code class=3D"docutils literal notranslate"><span class=
=3D"pre">'Listening'</span></code> or a reason for failure</td>
</tr>
<tr class=3D"field-odd field"><th class=3D"field-name">Raises:</th><td clas=
s=3D"field-body">IOError</td>
</tr>
</tbody>
</table>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p>Return examples:</p>
<ul class=3D"last simple">
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">'Liste=
ning'</span></code></li>
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">'Liste=
ningAlready'</span></code></li>
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">'PortU=
navailable'</span></code></li>
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">'Inter=
faceUnavailable:</span> <span class=3D"pre">LAN'</span></code></li>
<li><code class=3D"docutils literal notranslate"><span class=3D"pre">'Inter=
faceUnavailable:</span> <span class=3D"pre">LAN,</span> <span class=3D"pre"=
>AVLAN'</span></code></li>
</ul>
</div>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">res</span> <span class=3D"o">=3D</span> <span=
 class=3D"n">serv</span><span class=3D"o">.</span><span class=3D"n">StartLi=
sten</span><span class=3D"p">()</span>
<span class=3D"k">if</span> <span class=3D"n">res</span> <span class=3D"o">=
=3D=3D</span> <span class=3D"s1">'Listening'</span><span class=3D"p">:</spa=
n>
    <span class=3D"k">pass</span> <span class=3D"c1"># Listening</span>
<span class=3D"k">elif</span> <span class=3D"n">res</span> <span class=3D"o=
">=3D=3D</span> <span class=3D"s1">'PortUnavailable'</span><span class=3D"p=
">:</span>
    <span class=3D"k">raise</span> <span class=3D"n">ResourceWarning</span>=
<span class=3D"p">(</span><span class=3D"s1">'Port unavailable'</span><span=
 class=3D"p">)</span> <span class=3D"c1"># this is not likely to recover</s=
pan>
<span class=3D"k">elif</span> <span class=3D"s1">'InterfaceUnavailable'</sp=
an> <span class=3D"ow">in</span> <span class=3D"n">res</span><span class=3D=
"p">:</span>
    <span class=3D"k">raise</span> <span class=3D"n">ResourceWarning</span>=
<span class=3D"p">(</span><span class=3D"s1">'Interface Unavailable'</span>=
<span class=3D"p">)</span> <span class=3D"c1"># listen on another</span>
                                                   <span class=3D"c1"># int=
erface</span>
</pre></div>
</div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">If <code class=3D"docutils literal notranslate"><span cla=
ss=3D"pre">'Listening'</span></code> not in result, the server will not be
listening.</p>
</div>
<div class=3D"versionadded">
<p><span class=3D"versionmodified">New in version 3.1: </span>ListeningAlre=
ady and InterfaceUnavailable</p>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.EthernetServerInterfaceEx.StopListen">
<code class=3D"descname">StopListen</code><span class=3D"sig-paren">(</span=
><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"http://1=
27.0.0.1:8080/interface.html#extronlib.interface.EthernetServerInterfaceEx.=
StopListen" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Stop the listener</p>
<div class=3D"highlight-python notranslate"><table class=3D"highlighttable"=
><tbody><tr><td class=3D"linenos"><div class=3D"linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class=3D"code"><div class=3D"highlight"><pre><span><=
/span><span class=3D"nd">@event</span><span class=3D"p">(</span><span class=
=3D"n">serv</span><span class=3D"p">,</span> <span class=3D"s1">'ReceiveDat=
a'</span><span class=3D"p">)</span>
<span class=3D"k">def</span> <span class=3D"nf">HandleReceiveData</span><sp=
an class=3D"p">(</span><span class=3D"n">client</span><span class=3D"p">,</=
span> <span class=3D"n">data</span><span class=3D"p">):</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s1">'Rx: {}'</span><span class=3D"o">.</span><span class=3D"n">format</span=
><span class=3D"p">(</span><span class=3D"n">data</span><span class=3D"o">.=
</span><span class=3D"n">decode</span><span class=3D"p">()))</span>

    <span class=3D"c1"># This simulates a Single User mode where you do not=
 want to accept any</span>
    <span class=3D"c1"># other connections.</span>
    <span class=3D"k">if</span> <span class=3D"sa">b</span><span class=3D"s=
1">'singleuser'</span> <span class=3D"ow">in</span> <span class=3D"n">data<=
/span><span class=3D"p">:</span>         <span class=3D"c1"># Disconnect al=
l other clients</span>
        <span class=3D"n">serv</span><span class=3D"o">.</span><span class=
=3D"n">StopListen</span><span class=3D"p">()</span>
        <span class=3D"k">for</span> <span class=3D"n">client_</span> <span=
 class=3D"ow">in</span> <span class=3D"n">serv</span><span class=3D"o">.</s=
pan><span class=3D"n">Clients</span><span class=3D"p">:</span>
            <span class=3D"k">if</span> <span class=3D"n">client_</span> <s=
pan class=3D"ow">is</span> <span class=3D"ow">not</span> <span class=3D"n">=
client</span><span class=3D"p">:</span>
                <span class=3D"n">client_</span><span class=3D"o">.</span><=
span class=3D"n">Disconnect</span><span class=3D"p">()</span>
    <span class=3D"k">elif</span> <span class=3D"sa">b</span><span class=3D=
"s1">'multiuser'</span> <span class=3D"ow">in</span> <span class=3D"n">data=
</span><span class=3D"p">:</span>
        <span class=3D"n">serv</span><span class=3D"o">.</span><span class=
=3D"n">StartListen</span><span class=3D"p">()</span>
</pre></div>
</td></tr></tbody></table></div>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.EthernetServerInterfaceEx.Clients">
<code class=3D"descname">Clients</code><a class=3D"headerlink" href=3D"http=
://127.0.0.1:8080/interface.html#extronlib.interface.EthernetServerInterfac=
eEx.Clients" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">List of connected clients.</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">list of <a class=3D"reference internal" href=3D"http=
://127.0.0.1:8080/interface.html#extronlib.interface.ClientObject" title=3D=
"extronlib.interface.ClientObject"><code class=3D"xref py py-class docutils=
 literal notranslate"><span class=3D"pre">ClientObject</span></code></a></t=
d>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.EthernetServerInterfaceEx.Connected">
<code class=3D"descname">Connected</code><a class=3D"headerlink" href=3D"ht=
tp://127.0.0.1:8080/interface.html#extronlib.interface.EthernetServerInterf=
aceEx.Connected" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when socket connection is established.</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#extronlib.interface.ClientObject" title=3D"extronlib.interface.ClientObje=
ct"><code class=3D"xref py py-class docutils literal notranslate"><span cla=
ss=3D"pre">ClientObject</span></code></a> instance triggering the event and=
 the second
one is a string (<code class=3D"docutils literal notranslate"><span class=
=3D"pre">'Connected'</span></code>).</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.EthernetServerInterfaceEx.Disconnected">
<code class=3D"descname">Disconnected</code><a class=3D"headerlink" href=3D=
"http://127.0.0.1:8080/interface.html#extronlib.interface.EthernetServerInt=
erfaceEx.Disconnected" title=3D"Permalink to this definition">=C2=B6</a></d=
t>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when the socket connection is broken</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#extronlib.interface.ClientObject" title=3D"extronlib.interface.ClientObje=
ct"><code class=3D"xref py py-class docutils literal notranslate"><span cla=
ss=3D"pre">ClientObject</span></code></a> instance triggering the event and=
 the second
one is a string (<code class=3D"docutils literal notranslate"><span class=
=3D"pre">'Disconnected'</span></code>).</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.EthernetServerInterfaceEx.IPPort">
<code class=3D"descname">IPPort</code><a class=3D"headerlink" href=3D"http:=
//127.0.0.1:8080/interface.html#extronlib.interface.EthernetServerInterface=
Ex.IPPort" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">IP Port number of the listening service</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">int</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.EthernetServerInterfaceEx.Interface">
<code class=3D"descname">Interface</code><a class=3D"headerlink" href=3D"ht=
tp://127.0.0.1:8080/interface.html#extronlib.interface.EthernetServerInterf=
aceEx.Interface" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">name of interface on which the server is listening
(<code class=3D"docutils literal notranslate"><span class=3D"pre">'Any'</sp=
an></code>, <code class=3D"docutils literal notranslate"><span class=3D"pre=
">'LAN'</span></code>, or <code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">'AVLAN'</span></code>)</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.EthernetServerInterfaceEx.MaxClients">
<code class=3D"descname">MaxClients</code><a class=3D"headerlink" href=3D"h=
ttp://127.0.0.1:8080/interface.html#extronlib.interface.EthernetServerInter=
faceEx.MaxClients" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">maximum number of client connections to allow
(<code class=3D"docutils literal notranslate"><span class=3D"pre">None</spa=
n></code> =3D=3D Unlimited, 0 =3D=3D Invalid)</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">int or None</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.EthernetServerInterfaceEx.Protocol">
<code class=3D"descname">Protocol</code><a class=3D"headerlink" href=3D"htt=
p://127.0.0.1:8080/interface.html#extronlib.interface.EthernetServerInterfa=
ceEx.Protocol" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">communication protocol (<code class=3D"docutils literal n=
otranslate"><span class=3D"pre">'TCP'</span></code> or <code class=3D"docut=
ils literal notranslate"><span class=3D"pre">'UDP'</span></code>)</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.EthernetServerInterfaceEx.ReceiveData">
<code class=3D"descname">ReceiveData</code><a class=3D"headerlink" href=3D"=
http://127.0.0.1:8080/interface.html#extronlib.interface.EthernetServerInte=
rfaceEx.ReceiveData" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Receive Data event handler used for asynchronous
transactions</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#extronlib.interface.ClientObject" title=3D"extronlib.interface.ClientObje=
ct"><code class=3D"xref py py-class docutils literal notranslate"><span cla=
ss=3D"pre">ClientObject</span></code></a> instance triggering the event and
the second one is a bytes object.</p>
<div class=3D"highlight-python notranslate"><table class=3D"highlighttable"=
><tbody><tr><td class=3D"linenos"><div class=3D"linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></div></td><td class=3D"code"><div class=3D"highlight"><pre><span><=
/span><span class=3D"nd">@event</span><span class=3D"p">(</span><span class=
=3D"n">serv</span><span class=3D"p">,</span> <span class=3D"s1">'ReceiveDat=
a'</span><span class=3D"p">)</span>
<span class=3D"k">def</span> <span class=3D"nf">HandleReceiveData</span><sp=
an class=3D"p">(</span><span class=3D"n">client</span><span class=3D"p">,</=
span> <span class=3D"n">data</span><span class=3D"p">):</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s1">'Rx: {}'</span><span class=3D"o">.</span><span class=3D"n">format</span=
><span class=3D"p">(</span><span class=3D"n">data</span><span class=3D"o">.=
</span><span class=3D"n">decode</span><span class=3D"p">()))</span>

    <span class=3D"c1"># This simulates a Single User mode where you do not=
 want to accept any</span>
    <span class=3D"c1"># other connections.</span>
    <span class=3D"k">if</span> <span class=3D"sa">b</span><span class=3D"s=
1">'singleuser'</span> <span class=3D"ow">in</span> <span class=3D"n">data<=
/span><span class=3D"p">:</span>         <span class=3D"c1"># Disconnect al=
l other clients</span>
        <span class=3D"n">serv</span><span class=3D"o">.</span><span class=
=3D"n">StopListen</span><span class=3D"p">()</span>
        <span class=3D"k">for</span> <span class=3D"n">client_</span> <span=
 class=3D"ow">in</span> <span class=3D"n">serv</span><span class=3D"o">.</s=
pan><span class=3D"n">Clients</span><span class=3D"p">:</span>
            <span class=3D"k">if</span> <span class=3D"n">client_</span> <s=
pan class=3D"ow">is</span> <span class=3D"ow">not</span> <span class=3D"n">=
client</span><span class=3D"p">:</span>
                <span class=3D"n">client_</span><span class=3D"o">.</span><=
span class=3D"n">Disconnect</span><span class=3D"p">()</span>
    <span class=3D"k">elif</span> <span class=3D"sa">b</span><span class=3D=
"s1">'multiuser'</span> <span class=3D"ow">in</span> <span class=3D"n">data=
</span><span class=3D"p">:</span>
        <span class=3D"n">serv</span><span class=3D"o">.</span><span class=
=3D"n">StartListen</span><span class=3D"p">()</span>
</pre></div>
</td></tr></tbody></table></div>
</dd></dl>

</dd></dl>

</div>
<div class=3D"section" id=3D"flexiointerface-class">
<h2><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#extronlib.interface.FlexIOInterface" title=3D"extronlib.interface.Fle=
xIOInterface"><code class=3D"xref py py-class docutils literal notranslate"=
><span class=3D"pre">FlexIOInterface</span></code></a> Class<a class=3D"hea=
derlink" href=3D"http://127.0.0.1:8080/interface.html#flexiointerface-class=
" title=3D"Permalink to this headline">=C2=B6</a></h2>
<dl class=3D"class">
<dt id=3D"extronlib.interface.FlexIOInterface">
<em class=3D"property">class </em><code class=3D"descname">FlexIOInterface<=
/code><span class=3D"sig-paren">(</span><em>Host</em>, <em>Port</em>, <em>M=
ode=3D'DigitalInput'</em>, <em>Pullup=3DFalse</em>, <em>Upper=3D2.8</em>, <=
em>Lower=3D2.0</em><span class=3D"sig-paren">)</span><a class=3D"headerlink=
" href=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.FlexIOIn=
terface" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>This class will provide a common interface for controlling and colle=
cting
data from Flex IO ports on Extron devices (<a class=3D"reference internal" =
href=3D"http://127.0.0.1:8080/device.html#module-extronlib.device" title=3D=
"extronlib.device"><code class=3D"xref py py-mod docutils literal notransla=
te"><span class=3D"pre">extronlib.device</span></code></a>).
The user can instantiate the class directly or create a subclass to add,
remove, or alter behavior for different types of devices.</p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><ul class=3D"first last simple">
<li><strong>Host</strong> (<a class=3D"reference internal" href=3D"http://1=
27.0.0.1:8080/device.html#module-extronlib.device" title=3D"extronlib.devic=
e"><code class=3D"xref py py-mod docutils literal notranslate"><span class=
=3D"pre">extronlib.device</span></code></a>) =E2=80=93 handle to Extron dev=
ice class that instantiated this
interface class</li>
<li><strong>Port</strong> (<em>string</em>) =E2=80=93 port name (e.g. <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">'FIO1'</span></=
code>)</li>
<li><strong>Mode</strong> (<em>string</em>) =E2=80=93 Possible modes are: <=
code class=3D"docutils literal notranslate"><span class=3D"pre">'AnalogInpu=
t'</span></code>, <code class=3D"docutils literal notranslate"><span class=
=3D"pre">'DigitalInput'</span></code>
(default), and <code class=3D"docutils literal notranslate"><span class=3D"=
pre">'DigitalOutput'</span></code>.</li>
<li><strong>Pullup</strong> (<em>bool</em>) =E2=80=93 pull-up state on the =
port</li>
<li><strong>Upper</strong> (<em>float</em>) =E2=80=93 upper threshold in vo=
lts</li>
<li><strong>Lower</strong> (<em>float</em>) =E2=80=93 lower threshold in vo=
lts</li>
</ul>
</td>
</tr>
</tbody>
</table>
<dl class=3D"method">
<dt id=3D"extronlib.interface.FlexIOInterface.Initialize">
<code class=3D"descname">Initialize</code><span class=3D"sig-paren">(</span=
><em>Mode=3DNone</em>, <em>Pullup=3DNone</em>, <em>Upper=3DNone</em>, <em>L=
ower=3DNone</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" h=
ref=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.FlexIOInter=
face.Initialize" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Initializes Flex IO Port to given values. User may provide any or al=
l
of the parameters.  <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">None</span></code> leaves property unmodified.</p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><ul class=3D"first last simple">
<li><strong>Mode</strong> (<em>string</em>) =E2=80=93 Possible modes are: <=
code class=3D"docutils literal notranslate"><span class=3D"pre">'AnalogInpu=
t'</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">'DigitalIn=
put'</span></code>, and <code class=3D"docutils literal notranslate"><span =
class=3D"pre">'DigitalOutput'</span></code>.</li>
<li><strong>Pullup</strong> (<em>bool</em>) =E2=80=93 pull-up state on the =
port</li>
<li><strong>Upper</strong> (<em>float</em>) =E2=80=93 upper threshold in vo=
lts</li>
<li><strong>Lower</strong> (<em>float</em>) =E2=80=93 lower threshold in vo=
lts</li>
</ul>
</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.FlexIOInterface.Pulse">
<code class=3D"descname">Pulse</code><span class=3D"sig-paren">(</span><em>=
duration</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=
=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.FlexIOInterfac=
e.Pulse" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Turns the port on for the specified time in seconds with 10ms accura=
cy
and a 100ms minimum value.</p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><strong>duration</strong> (<em>float</em>) =E2=80=93 p=
ulse duration</td>
</tr>
</tbody>
</table>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">OutputInterface</span><span class=3D"o">.</sp=
an><span class=3D"n">Pulse</span><span class=3D"p">(</span><span class=3D"m=
f">0.3</span><span class=3D"p">)</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.FlexIOInterface.SetState">
<code class=3D"descname">SetState</code><span class=3D"sig-paren">(</span><=
em>State</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=
=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.FlexIOInterfac=
e.SetState" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><strong>State</strong> (<em>int</em><em>, </em><em>str=
ing</em>) =E2=80=93 output state to be set (<code class=3D"docutils literal=
 notranslate"><span class=3D"pre">'On'</span></code> or <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">1</span></code>, <code class=
=3D"docutils literal notranslate"><span class=3D"pre">'Off'</span></code> o=
r
<code class=3D"docutils literal notranslate"><span class=3D"pre">0</span></=
code>)</td>
</tr>
</tbody>
</table>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">OutputInterface</span><span class=3D"o">.</sp=
an><span class=3D"n">SetState</span><span class=3D"p">(</span><span class=
=3D"s1">'On'</span><span class=3D"p">)</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.FlexIOInterface.Toggle">
<code class=3D"descname">Toggle</code><span class=3D"sig-paren">(</span><sp=
an class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"http://127.0=
.0.1:8080/interface.html#extronlib.interface.FlexIOInterface.Toggle" title=
=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Changes the state of the IO Object to the logical opposite of the
current state.</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.FlexIOInterface.AnalogVoltage">
<code class=3D"descname">AnalogVoltage</code><a class=3D"headerlink" href=
=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.FlexIOInterfac=
e.AnalogVoltage" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">current voltage of analog input port</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">float</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.FlexIOInterface.AnalogVoltageChanged">
<code class=3D"descname">AnalogVoltageChanged</code><a class=3D"headerlink"=
 href=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.FlexIOInt=
erface.AnalogVoltageChanged" title=3D"Permalink to this definition">=C2=B6<=
/a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> triggers when the input voltage changes.</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#extronlib.interface.FlexIOInterface" title=3D"extronlib.interface.FlexIOI=
nterface"><code class=3D"xref py py-class docutils literal notranslate"><sp=
an class=3D"pre">FlexIOInterface</span></code></a> instance triggering the =
event and the second one is
the voltage.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Minimum voltage change required to trigger event is 0.05V=
.</p>
</div>
<div class=3D"versionadded">
<p><span class=3D"versionmodified">New in version 2.4.</span></p>
</div>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.FlexIOInterface.Host">
<code class=3D"descname">Host</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.FlexIOInterface.Host" tit=
le=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">handle to Extron device class that instantiated this inte=
rface
class</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body"><a class=3D"reference internal" href=3D"http://127.0=
.0.1:8080/device.html#module-extronlib.device" title=3D"extronlib.device"><=
code class=3D"xref py py-mod docutils literal notranslate"><span class=3D"p=
re">extronlib.device</span></code></a></td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.FlexIOInterface.Lower">
<code class=3D"descname">Lower</code><a class=3D"headerlink" href=3D"http:/=
/127.0.0.1:8080/interface.html#extronlib.interface.FlexIOInterface.Lower" t=
itle=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">lower threshold for digital input in volts</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">float</td>
</tr>
</tbody>
</table>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Only applicable when Flex IO is in <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">'DigitalInput'</span></code> mod=
e.</p>
</div>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.FlexIOInterface.Mode">
<code class=3D"descname">Mode</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.FlexIOInterface.Mode" tit=
le=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">mode of the Flex IO port (<code class=3D"docutils literal=
 notranslate"><span class=3D"pre">'AnalogInput'</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">'DigitalIn=
put'</span></code>, <code class=3D"docutils literal notranslate"><span clas=
s=3D"pre">'DigitalOutput'</span></code>).</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.FlexIOInterface.Offline">
<code class=3D"descname">Offline</code><a class=3D"headerlink" href=3D"http=
://127.0.0.1:8080/interface.html#extronlib.interface.FlexIOInterface.Offlin=
e" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when port goes offline</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
interface</span></code></a> instance triggering the event and the
second one is a string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">'Offline'</span></code>).</p>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"nd">@event</span><span class=3D"p">(</span><span=
 class=3D"n">SomeInterface</span><span class=3D"p">,</span> <span class=3D"=
p">[</span><span class=3D"s1">'Online'</span><span class=3D"p">,</span> <sp=
an class=3D"s1">'Offline'</span><span class=3D"p">])</span>
<span class=3D"k">def</span> <span class=3D"nf">HandleConnection</span><spa=
n class=3D"p">(</span><span class=3D"n">interface</span><span class=3D"p">,=
</span> <span class=3D"n">state</span><span class=3D"p">):</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s1">'{} is now {}'</span><span class=3D"o">.</span><span class=3D"n">format=
</span><span class=3D"p">(</span><span class=3D"n">interface</span><span cl=
ass=3D"o">.</span><span class=3D"n">Port</span><span class=3D"p">,</span> <=
span class=3D"n">state</span><span class=3D"p">))</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.FlexIOInterface.Online">
<code class=3D"descname">Online</code><a class=3D"headerlink" href=3D"http:=
//127.0.0.1:8080/interface.html#extronlib.interface.FlexIOInterface.Online"=
 title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when port goes online</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
interface</span></code></a> instance triggering the event and the
second one is a string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">'Online'</span></code>).</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.FlexIOInterface.Port">
<code class=3D"descname">Port</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.FlexIOInterface.Port" tit=
le=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">port name</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.FlexIOInterface.Pullup">
<code class=3D"descname">Pullup</code><a class=3D"headerlink" href=3D"http:=
//127.0.0.1:8080/interface.html#extronlib.interface.FlexIOInterface.Pullup"=
 title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">indicates if the input port is being pulled up or not</td=
>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">bool</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.FlexIOInterface.State">
<code class=3D"descname">State</code><a class=3D"headerlink" href=3D"http:/=
/127.0.0.1:8080/interface.html#extronlib.interface.FlexIOInterface.State" t=
itle=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">current state of IO port (<code class=3D"docutils literal=
 notranslate"><span class=3D"pre">'On'</span></code>, <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">'Off'</span></code>)</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.FlexIOInterface.StateChanged">
<code class=3D"descname">StateChanged</code><a class=3D"headerlink" href=3D=
"http://127.0.0.1:8080/interface.html#extronlib.interface.FlexIOInterface.S=
tateChanged" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when the input state changes.</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
interface</span></code></a> instance triggering the event and the
second one is a string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">'On'</span></code> or <code class=3D"docutils literal notrans=
late"><span class=3D"pre">'Off'</span></code>).</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Only triggers for ports in Input mode.</p>
</div>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"nd">@event</span><span class=3D"p">(</span><span=
 class=3D"n">InputInterface</span><span class=3D"p">,</span> <span class=3D=
"s1">'StateChanged'</span><span class=3D"p">)</span>
<span class=3D"k">def</span> <span class=3D"nf">HandleStateChanged</span><s=
pan class=3D"p">(</span><span class=3D"n">interface</span><span class=3D"p"=
>,</span> <span class=3D"n">state</span><span class=3D"p">):</span>
    <span class=3D"k">if</span> <span class=3D"n">state</span> <span class=
=3D"o">=3D=3D</span> <span class=3D"s1">'On'</span><span class=3D"p">:</spa=
n>
        <span class=3D"n">StartCombinedInit</span><span class=3D"p">()</spa=
n>
    <span class=3D"k">else</span><span class=3D"p">:</span>
        <span class=3D"n">StartSeparateInit</span><span class=3D"p">()</spa=
n>
</pre></div>
</div>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.FlexIOInterface.Upper">
<code class=3D"descname">Upper</code><a class=3D"headerlink" href=3D"http:/=
/127.0.0.1:8080/interface.html#extronlib.interface.FlexIOInterface.Upper" t=
itle=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">upper threshold for digital input in volts</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">float</td>
</tr>
</tbody>
</table>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Only applicable when Flex IO is in <code class=3D"docutil=
s literal notranslate"><span class=3D"pre">'DigitalInput'</span></code> mod=
e.</p>
</div>
</dd></dl>

</dd></dl>

</div>
<div class=3D"section" id=3D"irinterface-class">
<h2><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#extronlib.interface.IRInterface" title=3D"extronlib.interface.IRInter=
face"><code class=3D"xref py py-class docutils literal notranslate"><span c=
lass=3D"pre">IRInterface</span></code></a> Class<a class=3D"headerlink" hre=
f=3D"http://127.0.0.1:8080/interface.html#irinterface-class" title=3D"Perma=
link to this headline">=C2=B6</a></h2>
<dl class=3D"class">
<dt id=3D"extronlib.interface.IRInterface">
<em class=3D"property">class </em><code class=3D"descname">IRInterface</cod=
e><span class=3D"sig-paren">(</span><em>Host</em>, <em>Port</em>, <em>File<=
/em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"http:=
//127.0.0.1:8080/interface.html#extronlib.interface.IRInterface" title=3D"P=
ermalink to this definition">=C2=B6</a></dt>
<dd><p>This class provides an interface to an IR port. This class allows th=
e user
to transmit IR data through an IR or IR/Serial port.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">If an IR/Serial port is passed in and it has already been
instantiated as an <a class=3D"reference internal" href=3D"http://127.0.0.1=
:8080/interface.html#extronlib.interface.SerialInterface" title=3D"extronli=
b.interface.SerialInterface"><code class=3D"xref py py-class docutils liter=
al notranslate"><span class=3D"pre">SerialInterface</span></code></a>, an e=
xception will be raised.</p>
</div>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><ul class=3D"first last simple">
<li><strong>Host</strong> (<a class=3D"reference internal" href=3D"http://1=
27.0.0.1:8080/device.html#module-extronlib.device" title=3D"extronlib.devic=
e"><code class=3D"xref py py-mod docutils literal notranslate"><span class=
=3D"pre">extronlib.device</span></code></a>) =E2=80=93 handle to Extron dev=
ice class that instantiated this
interface class</li>
<li><strong>Port</strong> (<em>string</em>) =E2=80=93 port name (e.g., <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">'IRS1'</span><=
/code>)</li>
<li><strong>File</strong> (<em>string</em>) =E2=80=93 IR file name (e.g. <c=
ode class=3D"docutils literal notranslate"><span class=3D"pre">'someDevice.=
eir'</span></code>)</li>
</ul>
</td>
</tr>
</tbody>
</table>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">VCR</span> <span class=3D"o">=3D</span> <span=
 class=3D"n">IRInterface</span><span class=3D"p">(</span><span class=3D"n">=
ConfRoom</span><span class=3D"p">,</span> <span class=3D"s1">'IRS1'</span><=
span class=3D"p">,</span> <span class=3D"s1">'sony_14_92.eir'</span><span c=
lass=3D"p">)</span>
</pre></div>
</div>
<dl class=3D"method">
<dt id=3D"extronlib.interface.IRInterface.Initialize">
<code class=3D"descname">Initialize</code><span class=3D"sig-paren">(</span=
><em>File=3DNone</em><span class=3D"sig-paren">)</span><a class=3D"headerli=
nk" href=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.IRInte=
rface.Initialize" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Initializes IR Port to given file.  <code class=3D"docutils literal =
notranslate"><span class=3D"pre">None</span></code> leaves property
unmodified.</p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><strong>File</strong> (<em>string</em>) =E2=80=93 IR f=
ile name (e.g. <code class=3D"docutils literal notranslate"><span class=3D"=
pre">'someDevice.eir'</span></code>)</td>
</tr>
</tbody>
</table>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">VCR</span><span class=3D"o">.</span><span cla=
ss=3D"n">Initialize</span><span class=3D"p">(</span><span class=3D"s1">'pan=
o_14_209.eir'</span><span class=3D"p">)</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.IRInterface.PlayContinuous">
<code class=3D"descname">PlayContinuous</code><span class=3D"sig-paren">(</=
span><em>irFunction</em><span class=3D"sig-paren">)</span><a class=3D"heade=
rlink" href=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.IRI=
nterface.PlayContinuous" title=3D"Permalink to this definition">=C2=B6</a><=
/dt>
<dd><p>Begin playback of an IR function. Function will play continuously un=
til
stopped. Will complete at least one header, one body, and the current
body.</p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><strong>irFunction</strong> (<em>string</em>) =E2=80=
=93 function within the driver to play</td>
</tr>
</tbody>
</table>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last"><em>PlayContinuous</em> is interruptable by subsequent Pl=
ay function
calls (<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interf=
ace.html#extronlib.interface.IRInterface.PlayCount" title=3D"extronlib.inte=
rface.IRInterface.PlayCount"><code class=3D"xref py py-meth docutils litera=
l notranslate"><span class=3D"pre">PlayCount()</span></code></a>, <a class=
=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.html#extron=
lib.interface.IRInterface.PlayTime" title=3D"extronlib.interface.IRInterfac=
e.PlayTime"><code class=3D"xref py py-meth docutils literal notranslate"><s=
pan class=3D"pre">PlayTime()</span></code></a>) and
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#extronlib.interface.IRInterface.Stop" title=3D"extronlib.interface.IRInte=
rface.Stop"><code class=3D"xref py py-meth docutils literal notranslate"><s=
pan class=3D"pre">Stop()</span></code></a>.</p>
</div>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"nd">@event</span><span class=3D"p">(</span><span=
 class=3D"n">VolUp</span><span class=3D"p">,</span> <span class=3D"p">[</sp=
an><span class=3D"s1">'Pressed'</span><span class=3D"p">,</span> <span clas=
s=3D"s1">'Released'</span><span class=3D"p">])</span>
<span class=3D"k">def</span> <span class=3D"nf">IncVolume</span><span class=
=3D"p">(</span><span class=3D"n">button</span><span class=3D"p">,</span> <s=
pan class=3D"n">state</span><span class=3D"p">):</span>
    <span class=3D"k">if</span> <span class=3D"n">state</span> <span class=
=3D"o">=3D=3D</span> <span class=3D"s1">'Pressed'</span><span class=3D"p">:=
</span>
        <span class=3D"n">VCR</span><span class=3D"o">.</span><span class=
=3D"n">PlayContinuous</span><span class=3D"p">(</span><span class=3D"s1">'V=
OL+'</span><span class=3D"p">)</span>
    <span class=3D"k">elif</span> <span class=3D"n">state</span> <span clas=
s=3D"o">=3D=3D</span> <span class=3D"s1">'Released'</span><span class=3D"p"=
>:</span>
        <span class=3D"n">VCR</span><span class=3D"o">.</span><span class=
=3D"n">Stop</span><span class=3D"p">()</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.IRInterface.PlayCount">
<code class=3D"descname">PlayCount</code><span class=3D"sig-paren">(</span>=
<em>irFunction</em>, <em>repeatCount=3DNone</em><span class=3D"sig-paren">)=
</span><a class=3D"headerlink" href=3D"http://127.0.0.1:8080/interface.html=
#extronlib.interface.IRInterface.PlayCount" title=3D"Permalink to this defi=
nition">=C2=B6</a></dt>
<dd><p>Play an IR function Count times. Function will play the header once =
and
the body 1 + the specified number of repeat times.</p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><ul class=3D"first last simple">
<li><strong>irFunction</strong> (<em>string</em>) =E2=80=93 function within=
 the driver to play</li>
<li><strong>repeatCount</strong> (<em>int</em>) =E2=80=93 number of times t=
o repeat the body (0-15)</li>
</ul>
</td>
</tr>
</tbody>
</table>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<ul class=3D"last simple">
<li><em>PlayCount</em> is uninterruptible, except by <a class=3D"reference =
internal" href=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.=
IRInterface.Stop" title=3D"extronlib.interface.IRInterface.Stop"><code clas=
s=3D"xref py py-meth docutils literal notranslate"><span class=3D"pre">Stop=
()</span></code></a>.</li>
<li><em>repeatCount</em> of <code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">None</span></code> means play the number defined in the
driver.</li>
</ul>
</div>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">VCR</span><span class=3D"o">.</span><span cla=
ss=3D"n">PlayCount</span><span class=3D"p">(</span><span class=3D"s1">'POWE=
R'</span><span class=3D"p">)</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.IRInterface.PlayTime">
<code class=3D"descname">PlayTime</code><span class=3D"sig-paren">(</span><=
em>irFunction</em>, <em>duration</em><span class=3D"sig-paren">)</span><a c=
lass=3D"headerlink" href=3D"http://127.0.0.1:8080/interface.html#extronlib.=
interface.IRInterface.PlayTime" title=3D"Permalink to this definition">=C2=
=B6</a></dt>
<dd><p>Play an IR function for the specified length of time. Function will
play the header once and the body as many times as it can. Playback
will stop when the time runs out. Current body will be completed.</p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><ul class=3D"first last simple">
<li><strong>irFunction</strong> (<em>string</em>) =E2=80=93 function within=
 the driver to play</li>
<li><strong>duration</strong> (<em>float</em>) =E2=80=93 time in seconds to=
 play the function</li>
</ul>
</td>
</tr>
</tbody>
</table>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last"><em>PlayTime</em> is uninterruptible, except by <a class=
=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.html#extron=
lib.interface.IRInterface.Stop" title=3D"extronlib.interface.IRInterface.St=
op"><code class=3D"xref py py-meth docutils literal notranslate"><span clas=
s=3D"pre">Stop()</span></code></a>.</p>
</div>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">VCR</span><span class=3D"o">.</span><span cla=
ss=3D"n">PlayTime</span><span class=3D"p">(</span><span class=3D"s1">'POWER=
_OFF'</span><span class=3D"p">,</span> <span class=3D"mf">0.4</span><span c=
lass=3D"p">)</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.IRInterface.Stop">
<code class=3D"descname">Stop</code><span class=3D"sig-paren">(</span><span=
 class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"http://127.0.0=
.1:8080/interface.html#extronlib.interface.IRInterface.Stop" title=3D"Perma=
link to this definition">=C2=B6</a></dt>
<dd><p>Stop the current playback. Will complete the current body.</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.IRInterface.File">
<code class=3D"descname">File</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.IRInterface.File" title=
=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">file name</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.IRInterface.Host">
<code class=3D"descname">Host</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.IRInterface.Host" title=
=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">handle to Extron device class that instantiated this inte=
rface
class</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body"><a class=3D"reference internal" href=3D"http://127.0=
.0.1:8080/device.html#module-extronlib.device" title=3D"extronlib.device"><=
code class=3D"xref py py-mod docutils literal notranslate"><span class=3D"p=
re">extronlib.device</span></code></a></td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.IRInterface.Offline">
<code class=3D"descname">Offline</code><a class=3D"headerlink" href=3D"http=
://127.0.0.1:8080/interface.html#extronlib.interface.IRInterface.Offline" t=
itle=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when port goes offline</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
interface</span></code></a> instance triggering the event and the
second one is a string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">'Offline'</span></code>).</p>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"nd">@event</span><span class=3D"p">(</span><span=
 class=3D"n">SomeInterface</span><span class=3D"p">,</span> <span class=3D"=
p">[</span><span class=3D"s1">'Online'</span><span class=3D"p">,</span> <sp=
an class=3D"s1">'Offline'</span><span class=3D"p">])</span>
<span class=3D"k">def</span> <span class=3D"nf">HandleConnection</span><spa=
n class=3D"p">(</span><span class=3D"n">interface</span><span class=3D"p">,=
</span> <span class=3D"n">state</span><span class=3D"p">):</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s1">'{} is now {}'</span><span class=3D"o">.</span><span class=3D"n">format=
</span><span class=3D"p">(</span><span class=3D"n">interface</span><span cl=
ass=3D"o">.</span><span class=3D"n">Port</span><span class=3D"p">,</span> <=
span class=3D"n">state</span><span class=3D"p">))</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.IRInterface.Online">
<code class=3D"descname">Online</code><a class=3D"headerlink" href=3D"http:=
//127.0.0.1:8080/interface.html#extronlib.interface.IRInterface.Online" tit=
le=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when port goes online</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
interface</span></code></a> instance triggering the event and the
second one is a string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">'Online'</span></code>).</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.IRInterface.Port">
<code class=3D"descname">Port</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.IRInterface.Port" title=
=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">port name</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

</dd></dl>

</div>
<div class=3D"section" id=3D"poeinterface-class">
<h2><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#extronlib.interface.PoEInterface" title=3D"extronlib.interface.PoEInt=
erface"><code class=3D"xref py py-class docutils literal notranslate"><span=
 class=3D"pre">PoEInterface</span></code></a> Class<a class=3D"headerlink" =
href=3D"http://127.0.0.1:8080/interface.html#poeinterface-class" title=3D"P=
ermalink to this headline">=C2=B6</a></h2>
<dl class=3D"class">
<dt id=3D"extronlib.interface.PoEInterface">
<em class=3D"property">class </em><code class=3D"descname">PoEInterface</co=
de><span class=3D"sig-paren">(</span><em>Host</em>, <em>Port</em><span clas=
s=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"http://127.0.0.1:80=
80/interface.html#extronlib.interface.PoEInterface" title=3D"Permalink to t=
his definition">=C2=B6</a></dt>
<dd><p>This is the interface class for the Power over Ethernet ports on Ext=
ron
devices (<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/devi=
ce.html#module-extronlib.device" title=3D"extronlib.device"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
device</span></code></a>). The user can instantiate the class
directly or create a subclass to add, remove, or alter behavior for
different types of devices.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified">New in version 2.9.</span></p>
</div>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><ul class=3D"first last simple">
<li><strong>Host</strong> (<a class=3D"reference internal" href=3D"http://1=
27.0.0.1:8080/device.html#module-extronlib.device" title=3D"extronlib.devic=
e"><code class=3D"xref py py-mod docutils literal notranslate"><span class=
=3D"pre">extronlib.device</span></code></a>) =E2=80=93 handle to Extron dev=
ice class that instantiated this
interface class</li>
<li><strong>Port</strong> (<em>string</em>) =E2=80=93 port name (e.g. <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">'POE1'</span></=
code>)</li>
</ul>
</td>
</tr>
</tbody>
</table>
<dl class=3D"method">
<dt id=3D"extronlib.interface.PoEInterface.SetState">
<code class=3D"descname">SetState</code><span class=3D"sig-paren">(</span><=
em>State</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=
=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.PoEInterface.S=
etState" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><strong>State</strong> (<em>int</em><em>, </em><em>str=
ing</em>) =E2=80=93 output state to be set (<code class=3D"docutils literal=
 notranslate"><span class=3D"pre">'On'</span></code> or <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">1</span></code>, <code class=
=3D"docutils literal notranslate"><span class=3D"pre">'Off'</span></code> o=
r
<code class=3D"docutils literal notranslate"><span class=3D"pre">0</span></=
code>)</td>
</tr>
</tbody>
</table>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">OutputInterface</span><span class=3D"o">.</sp=
an><span class=3D"n">SetState</span><span class=3D"p">(</span><span class=
=3D"s1">'On'</span><span class=3D"p">)</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.PoEInterface.Toggle">
<code class=3D"descname">Toggle</code><span class=3D"sig-paren">(</span><sp=
an class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"http://127.0=
.0.1:8080/interface.html#extronlib.interface.PoEInterface.Toggle" title=3D"=
Permalink to this definition">=C2=B6</a></dt>
<dd><p>Changes the state to the logical opposite of the current state.</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.PoEInterface.CurrentLoad">
<code class=3D"descname">CurrentLoad</code><a class=3D"headerlink" href=3D"=
http://127.0.0.1:8080/interface.html#extronlib.interface.PoEInterface.Curre=
ntLoad" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">the current load of PoE port in watts</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">float</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.PoEInterface.Host">
<code class=3D"descname">Host</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.PoEInterface.Host" title=
=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">handle to Extron device class that instantiated this inte=
rface
class</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body"><a class=3D"reference internal" href=3D"http://127.0=
.0.1:8080/device.html#module-extronlib.device" title=3D"extronlib.device"><=
code class=3D"xref py py-mod docutils literal notranslate"><span class=3D"p=
re">extronlib.device</span></code></a></td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.PoEInterface.Offline">
<code class=3D"descname">Offline</code><a class=3D"headerlink" href=3D"http=
://127.0.0.1:8080/interface.html#extronlib.interface.PoEInterface.Offline" =
title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when port goes offline</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
interface</span></code></a> instance triggering the event and the
second one is a string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">'Offline'</span></code>).</p>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"nd">@event</span><span class=3D"p">(</span><span=
 class=3D"n">SomeInterface</span><span class=3D"p">,</span> <span class=3D"=
p">[</span><span class=3D"s1">'Online'</span><span class=3D"p">,</span> <sp=
an class=3D"s1">'Offline'</span><span class=3D"p">])</span>
<span class=3D"k">def</span> <span class=3D"nf">HandleConnection</span><spa=
n class=3D"p">(</span><span class=3D"n">interface</span><span class=3D"p">,=
</span> <span class=3D"n">state</span><span class=3D"p">):</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s1">'{} is now {}'</span><span class=3D"o">.</span><span class=3D"n">format=
</span><span class=3D"p">(</span><span class=3D"n">interface</span><span cl=
ass=3D"o">.</span><span class=3D"n">Port</span><span class=3D"p">,</span> <=
span class=3D"n">state</span><span class=3D"p">))</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.PoEInterface.Online">
<code class=3D"descname">Online</code><a class=3D"headerlink" href=3D"http:=
//127.0.0.1:8080/interface.html#extronlib.interface.PoEInterface.Online" ti=
tle=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when port goes online</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
interface</span></code></a> instance triggering the event and the
second one is a string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">'Online'</span></code>).</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.PoEInterface.Port">
<code class=3D"descname">Port</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.PoEInterface.Port" title=
=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">port name</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.PoEInterface.PowerStatus">
<code class=3D"descname">PowerStatus</code><a class=3D"headerlink" href=3D"=
http://127.0.0.1:8080/interface.html#extronlib.interface.PoEInterface.Power=
Status" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">State of power transmission on the port (<code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">'Active'</span></code>,
<code class=3D"docutils literal notranslate"><span class=3D"pre">'Inactive'=
</span></code>).  <code class=3D"docutils literal notranslate"><span class=
=3D"pre">'Active'</span></code> if there is a device being powered
by the port.</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.PoEInterface.PowerStatusChanged">
<code class=3D"descname">PowerStatusChanged</code><a class=3D"headerlink" h=
ref=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.PoEInterfac=
e.PowerStatusChanged" title=3D"Permalink to this definition">=C2=B6</a></dt=
>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when the state of power transmission on the port
changes (e.g. a PoE device is plugged into the port).</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
interface</span></code></a> instance triggering the event and the
second one is a string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">'Active'</span></code> or <code class=3D"docutils literal not=
ranslate"><span class=3D"pre">'Inactive'</span></code>).</p>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"nd">@event</span><span class=3D"p">(</span><span=
 class=3D"n">poeInterface</span><span class=3D"p">,</span> <span class=3D"s=
1">'PowerStatusChanged'</span><span class=3D"p">)</span>
<span class=3D"k">def</span> <span class=3D"nf">HandlePowerStatusChanged</s=
pan><span class=3D"p">(</span><span class=3D"n">interface</span><span class=
=3D"p">,</span> <span class=3D"n">status</span><span class=3D"p">):</span>
    <span class=3D"k">if</span> <span class=3D"n">status</span> <span class=
=3D"o">=3D=3D</span> <span class=3D"s1">'Active'</span><span class=3D"p">:<=
/span>
        <span class=3D"n">LecternInUse</span><span class=3D"p">()</span>
    <span class=3D"k">else</span><span class=3D"p">:</span>
        <span class=3D"n">LecternNotInUse</span><span class=3D"p">()</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.PoEInterface.State">
<code class=3D"descname">State</code><a class=3D"headerlink" href=3D"http:/=
/127.0.0.1:8080/interface.html#extronlib.interface.PoEInterface.State" titl=
e=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">current state of IO port (<code class=3D"docutils literal=
 notranslate"><span class=3D"pre">'On'</span></code>, <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">'Off'</span></code>)</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

</dd></dl>

</div>
<div class=3D"section" id=3D"relayinterface-class">
<h2><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#extronlib.interface.RelayInterface" title=3D"extronlib.interface.Rela=
yInterface"><code class=3D"xref py py-class docutils literal notranslate"><=
span class=3D"pre">RelayInterface</span></code></a> Class<a class=3D"header=
link" href=3D"http://127.0.0.1:8080/interface.html#relayinterface-class" ti=
tle=3D"Permalink to this headline">=C2=B6</a></h2>
<dl class=3D"class">
<dt id=3D"extronlib.interface.RelayInterface">
<em class=3D"property">class </em><code class=3D"descname">RelayInterface</=
code><span class=3D"sig-paren">(</span><em>Host</em>, <em>Port</em><span cl=
ass=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"http://127.0.0.1:=
8080/interface.html#extronlib.interface.RelayInterface" title=3D"Permalink =
to this definition">=C2=B6</a></dt>
<dd><p>This class provides a common interface for controlling relays on Ext=
ron
devices (<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/devi=
ce.html#module-extronlib.device" title=3D"extronlib.device"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
device</span></code></a>).  The user can instantiate the class
directly or create a subclass to add, remove, or alter behavior for
different types of devices.</p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><ul class=3D"first last simple">
<li><strong>Host</strong> (<a class=3D"reference internal" href=3D"http://1=
27.0.0.1:8080/device.html#module-extronlib.device" title=3D"extronlib.devic=
e"><code class=3D"xref py py-mod docutils literal notranslate"><span class=
=3D"pre">extronlib.device</span></code></a>) =E2=80=93 handle to Extron dev=
ice class that instantiated this
interface class</li>
<li><strong>Port</strong> (<em>string</em>) =E2=80=93 port name (e.g. <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">'RLY1'</span></=
code>)</li>
</ul>
</td>
</tr>
</tbody>
</table>
<dl class=3D"method">
<dt id=3D"extronlib.interface.RelayInterface.Pulse">
<code class=3D"descname">Pulse</code><span class=3D"sig-paren">(</span><em>=
duration</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=
=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.RelayInterface=
.Pulse" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Turns the port on for the specified time in seconds with 10ms accura=
cy
and a 100ms minimum value.</p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><strong>duration</strong> (<em>float</em>) =E2=80=93 p=
ulse duration</td>
</tr>
</tbody>
</table>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">OutputInterface</span><span class=3D"o">.</sp=
an><span class=3D"n">Pulse</span><span class=3D"p">(</span><span class=3D"m=
f">0.3</span><span class=3D"p">)</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.RelayInterface.SetState">
<code class=3D"descname">SetState</code><span class=3D"sig-paren">(</span><=
em>State</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=
=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.RelayInterface=
.SetState" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><strong>State</strong> (<em>int</em><em>, </em><em>str=
ing</em>) =E2=80=93 output state to be set (<code class=3D"docutils literal=
 notranslate"><span class=3D"pre">'Close'</span></code> or <code class=3D"d=
ocutils literal notranslate"><span class=3D"pre">1</span></code>, <code cla=
ss=3D"docutils literal notranslate"><span class=3D"pre">'Open'</span></code=
> or
<code class=3D"docutils literal notranslate"><span class=3D"pre">0</span></=
code>)</td>
</tr>
</tbody>
</table>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">Relay1</span><span class=3D"o">.</span><span =
class=3D"n">SetState</span><span class=3D"p">(</span><span class=3D"s1">'Cl=
ose'</span><span class=3D"p">)</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.RelayInterface.Toggle">
<code class=3D"descname">Toggle</code><span class=3D"sig-paren">(</span><sp=
an class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"http://127.0=
.0.1:8080/interface.html#extronlib.interface.RelayInterface.Toggle" title=
=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Changes the state of the IO Object to the logical opposite of the
current state.</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.RelayInterface.Host">
<code class=3D"descname">Host</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.RelayInterface.Host" titl=
e=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">handle to Extron device class that instantiated this inte=
rface
class</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body"><a class=3D"reference internal" href=3D"http://127.0=
.0.1:8080/device.html#module-extronlib.device" title=3D"extronlib.device"><=
code class=3D"xref py py-mod docutils literal notranslate"><span class=3D"p=
re">extronlib.device</span></code></a></td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.RelayInterface.Offline">
<code class=3D"descname">Offline</code><a class=3D"headerlink" href=3D"http=
://127.0.0.1:8080/interface.html#extronlib.interface.RelayInterface.Offline=
" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when port goes offline</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
interface</span></code></a> instance triggering the event and the
second one is a string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">'Offline'</span></code>).</p>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"nd">@event</span><span class=3D"p">(</span><span=
 class=3D"n">SomeInterface</span><span class=3D"p">,</span> <span class=3D"=
p">[</span><span class=3D"s1">'Online'</span><span class=3D"p">,</span> <sp=
an class=3D"s1">'Offline'</span><span class=3D"p">])</span>
<span class=3D"k">def</span> <span class=3D"nf">HandleConnection</span><spa=
n class=3D"p">(</span><span class=3D"n">interface</span><span class=3D"p">,=
</span> <span class=3D"n">state</span><span class=3D"p">):</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s1">'{} is now {}'</span><span class=3D"o">.</span><span class=3D"n">format=
</span><span class=3D"p">(</span><span class=3D"n">interface</span><span cl=
ass=3D"o">.</span><span class=3D"n">Port</span><span class=3D"p">,</span> <=
span class=3D"n">state</span><span class=3D"p">))</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.RelayInterface.Online">
<code class=3D"descname">Online</code><a class=3D"headerlink" href=3D"http:=
//127.0.0.1:8080/interface.html#extronlib.interface.RelayInterface.Online" =
title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when port goes online</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
interface</span></code></a> instance triggering the event and the
second one is a string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">'Online'</span></code>).</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.RelayInterface.Port">
<code class=3D"descname">Port</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.RelayInterface.Port" titl=
e=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">port name</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.RelayInterface.State">
<code class=3D"descname">State</code><a class=3D"headerlink" href=3D"http:/=
/127.0.0.1:8080/interface.html#extronlib.interface.RelayInterface.State" ti=
tle=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">current state of Relay port (<code class=3D"docutils lite=
ral notranslate"><span class=3D"pre">'Close'</span></code>, <code class=3D"=
docutils literal notranslate"><span class=3D"pre">'Open'</span></code>)</td=
>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

</dd></dl>

</div>
<div class=3D"section" id=3D"serialinterface-class">
<h2><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#extronlib.interface.SerialInterface" title=3D"extronlib.interface.Ser=
ialInterface"><code class=3D"xref py py-class docutils literal notranslate"=
><span class=3D"pre">SerialInterface</span></code></a> Class<a class=3D"hea=
derlink" href=3D"http://127.0.0.1:8080/interface.html#serialinterface-class=
" title=3D"Permalink to this headline">=C2=B6</a></h2>
<dl class=3D"class">
<dt id=3D"extronlib.interface.SerialInterface">
<em class=3D"property">class </em><code class=3D"descname">SerialInterface<=
/code><span class=3D"sig-paren">(</span><em>Host</em>, <em>Port</em>, <em>B=
aud=3D9600</em>, <em>Data=3D8</em>, <em>Parity=3D'None'</em>, <em>Stop=3D1<=
/em>, <em>FlowControl=3D'Off'</em>, <em>CharDelay=3D0</em>, <em>Mode=3D'RS2=
32'</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"h=
ttp://127.0.0.1:8080/interface.html#extronlib.interface.SerialInterface" ti=
tle=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>This class provides an interface to a serial port. This class allows=
 the
user to send data over the serial port in a synchronous or asynchronous
manner. This class is used for all ports capable of serial communication
(e.g., Serial Ports, IR Serial Ports).</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<ul class=3D"last simple">
<li>In synchronous mode, the user will use <a class=3D"reference internal" =
href=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.SerialInte=
rface.SendAndWait" title=3D"extronlib.interface.SerialInterface.SendAndWait=
"><code class=3D"xref py py-meth docutils literal notranslate"><span class=
=3D"pre">SendAndWait()</span></code></a> to
wait for the response.</li>
<li>In asynchronous mode, the user will assign a handler function to
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#extronlib.interface.SerialInterface.ReceiveData" title=3D"extronlib.inter=
face.SerialInterface.ReceiveData"><code class=3D"xref py py-data docutils l=
iteral notranslate"><span class=3D"pre">ReceiveData</span></code></a> to ha=
ndle responses.</li>
<li>If an IR/Serial port is passed in and it has already been
instantiated as an <a class=3D"reference internal" href=3D"http://127.0.0.1=
:8080/interface.html#extronlib.interface.IRInterface" title=3D"extronlib.in=
terface.IRInterface"><code class=3D"xref py py-class docutils literal notra=
nslate"><span class=3D"pre">IRInterface</span></code></a>, an exception wil=
l be raised.</li>
</ul>
</div>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><ul class=3D"first last simple">
<li><strong>Host</strong> (<a class=3D"reference internal" href=3D"http://1=
27.0.0.1:8080/device.html#module-extronlib.device" title=3D"extronlib.devic=
e"><code class=3D"xref py py-mod docutils literal notranslate"><span class=
=3D"pre">extronlib.device</span></code></a>) =E2=80=93 handle to Extron dev=
ice class that instantiated this
interface class</li>
<li><strong>Port</strong> (<em>string</em>) =E2=80=93 port name (e.g., <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">'COM1'</span><=
/code>, <code class=3D"docutils literal notranslate"><span class=3D"pre">'I=
RS1'</span></code>)</li>
<li><strong>Baud</strong> (<em>int</em>) =E2=80=93 baudrate</li>
<li><strong>Data</strong> (<em>int</em>) =E2=80=93 number of data bits</li>
<li><strong>Parity</strong> (<em>string</em>) =E2=80=93 <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">'None'</span></code>, <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">'Odd'</span></cod=
e> or <code class=3D"docutils literal notranslate"><span class=3D"pre">'Eve=
n'</span></code></li>
<li><strong>Stop</strong> (<em>int</em>) =E2=80=93 number of stop bits</li>
<li><strong>FlowControl</strong> (<em>string</em>) =E2=80=93 <code class=3D=
"docutils literal notranslate"><span class=3D"pre">'HW'</span></code>, <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">'SW'</span></c=
ode>, or <code class=3D"docutils literal notranslate"><span class=3D"pre">'=
Off'</span></code></li>
<li><strong>CharDelay</strong> (<em>float</em>) =E2=80=93 time between each=
 character sent to the connected
device</li>
<li><strong>Mode</strong> (<em>string</em>) =E2=80=93 mode of the port, <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">'RS232'</span=
></code>, <code class=3D"docutils literal notranslate"><span class=3D"pre">=
'RS422'</span></code> or <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">'RS485'</span></code></li>
</ul>
</td>
</tr>
</tbody>
</table>
<dl class=3D"method">
<dt id=3D"extronlib.interface.SerialInterface.Initialize">
<code class=3D"descname">Initialize</code><span class=3D"sig-paren">(</span=
><em>Baud=3DNone</em>, <em>Data=3DNone</em>, <em>Parity=3DNone</em>, <em>St=
op=3DNone</em>, <em>FlowControl=3DNone</em>, <em>CharDelay=3DNone</em>, <em=
>Mode=3DNone</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" =
href=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.SerialInte=
rface.Initialize" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Initializes Serial Port to given values. User may provide any or all=
 of
the parameters.  <code class=3D"docutils literal notranslate"><span class=
=3D"pre">None</span></code> leaves property unmodified.</p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><ul class=3D"first last simple">
<li><strong>Baud</strong> (<em>int</em>) =E2=80=93 baudrate</li>
<li><strong>Data</strong> (<em>int</em>) =E2=80=93 number of data bits</li>
<li><strong>Parity</strong> (<em>string</em>) =E2=80=93 <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">'None'</span></code>, <code c=
lass=3D"docutils literal notranslate"><span class=3D"pre">'Odd'</span></cod=
e> or <code class=3D"docutils literal notranslate"><span class=3D"pre">'Eve=
n'</span></code></li>
<li><strong>Stop</strong> (<em>int</em>) =E2=80=93 number of stop bits</li>
<li><strong>FlowControl</strong> (<em>string</em>) =E2=80=93 <code class=3D=
"docutils literal notranslate"><span class=3D"pre">'HW'</span></code>, <cod=
e class=3D"docutils literal notranslate"><span class=3D"pre">'SW'</span></c=
ode>, or <code class=3D"docutils literal notranslate"><span class=3D"pre">'=
Off'</span></code></li>
<li><strong>CharDelay</strong> (<em>float</em>) =E2=80=93 time between each=
 character sent to the connected
device</li>
<li><strong>Mode</strong> (<em>string</em>) =E2=80=93 mode of the port, <co=
de class=3D"docutils literal notranslate"><span class=3D"pre">'RS232'</span=
></code>, <code class=3D"docutils literal notranslate"><span class=3D"pre">=
'RS422'</span></code> or <code class=3D"docutils literal notranslate"><span=
 class=3D"pre">'RS485'</span></code></li>
</ul>
</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.SerialInterface.Send">
<code class=3D"descname">Send</code><span class=3D"sig-paren">(</span><em>d=
ata</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"h=
ttp://127.0.0.1:8080/interface.html#extronlib.interface.SerialInterface.Sen=
d" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Send string over serial port if it=E2=80=99s open</p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><strong>data</strong> (<em>bytes</em><em>, </em><em>st=
ring</em>) =E2=80=93 data to send</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Raise:</th><td clas=
s=3D"field-body">TypeError, IOError</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.SerialInterface.SendAndWait">
<code class=3D"descname">SendAndWait</code><span class=3D"sig-paren">(</spa=
n><em>data</em>, <em>timeout</em>, <em>**delimiter</em><span class=3D"sig-p=
aren">)</span><a class=3D"headerlink" href=3D"http://127.0.0.1:8080/interfa=
ce.html#extronlib.interface.SerialInterface.SendAndWait" title=3D"Permalink=
 to this definition">=C2=B6</a></dt>
<dd><p>Send data to the controlled device and wait (blocking) for response<=
/p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p>In addition to <em>data</em> and <em>timeout</em>, the method accepts an
optional delimiter, which is used to compare against the received
response.  It supports any one of the following conditions:</p>
<blockquote class=3D"last">
<div><ul class=3D"simple">
<li><em>deliLen</em> (int) - length of the response</li>
<li><em>deliTag</em> (bytes) - suffix of the response</li>
<li><em>deliRex</em> (regular expression object) - regular expression</li>
</ul>
</div></blockquote>
</div>
<p>It returns after <em>timeout</em> seconds expires, or returns immediatel=
y if
the optional condition is satisfied.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">The function will return an empty bytes object if <em>tim=
eout</em>
expires and nothing is received, or the condition (if provided) is
not met.</p>
</div>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><ul class=3D"first simple">
<li><strong>data</strong> (<em>bytes</em><em>, </em><em>string</em>) =E2=80=
=93 data to send.</li>
<li><strong>timeout</strong> (<em>float</em>) =E2=80=93 amount of time to w=
ait for response.</li>
<li><strong>delimiter</strong> (<em>see above</em>) =E2=80=93 optional cond=
itions to look for in response.</li>
</ul>
</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Returns:</th><td cl=
ass=3D"field-body"><p class=3D"first">Response received data (may be empty)=
</p>
</td>
</tr>
<tr class=3D"field-odd field"><th class=3D"field-name">Return type:</th><td=
 class=3D"field-body"><p class=3D"first last">bytes</p>
</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.SerialInterface.StartKeepAlive">
<code class=3D"descname">StartKeepAlive</code><span class=3D"sig-paren">(</=
span><em>interval</em>, <em>data</em><span class=3D"sig-paren">)</span><a c=
lass=3D"headerlink" href=3D"http://127.0.0.1:8080/interface.html#extronlib.=
interface.SerialInterface.StartKeepAlive" title=3D"Permalink to this defini=
tion">=C2=B6</a></dt>
<dd><p>Repeatedly sends <em>data</em> at the given <em>interval</em></p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><ul class=3D"first last simple">
<li><strong>interval</strong> (<em>float</em>) =E2=80=93 Time in seconds be=
tween transmissions</li>
<li><strong>data</strong> (<em>bytes</em><em>, </em><em>string</em>) =E2=80=
=93 data to send</li>
</ul>
</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.SerialInterface.StopKeepAlive">
<code class=3D"descname">StopKeepAlive</code><span class=3D"sig-paren">(</s=
pan><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"http:=
//127.0.0.1:8080/interface.html#extronlib.interface.SerialInterface.StopKee=
pAlive" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Stop the currently running keep alive routine</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.SerialInterface.Baud">
<code class=3D"descname">Baud</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.SerialInterface.Baud" tit=
le=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">the baud rate</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">int</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.SerialInterface.CharDelay">
<code class=3D"descname">CharDelay</code><a class=3D"headerlink" href=3D"ht=
tp://127.0.0.1:8080/interface.html#extronlib.interface.SerialInterface.Char=
Delay" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">inter-character delay</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">float</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.SerialInterface.Data">
<code class=3D"descname">Data</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.SerialInterface.Data" tit=
le=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">the number of data bits</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">int</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.SerialInterface.FlowControl">
<code class=3D"descname">FlowControl</code><a class=3D"headerlink" href=3D"=
http://127.0.0.1:8080/interface.html#extronlib.interface.SerialInterface.Fl=
owControl" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">flow control</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.SerialInterface.Host">
<code class=3D"descname">Host</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.SerialInterface.Host" tit=
le=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">the host device</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body"><a class=3D"reference internal" href=3D"http://127.0=
.0.1:8080/device.html#module-extronlib.device" title=3D"extronlib.device"><=
code class=3D"xref py py-mod docutils literal notranslate"><span class=3D"p=
re">extronlib.device</span></code></a></td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.SerialInterface.Mode">
<code class=3D"descname">Mode</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.SerialInterface.Mode" tit=
le=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">the current Mode</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.SerialInterface.Offline">
<code class=3D"descname">Offline</code><a class=3D"headerlink" href=3D"http=
://127.0.0.1:8080/interface.html#extronlib.interface.SerialInterface.Offlin=
e" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when port goes offline</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
interface</span></code></a> instance triggering the event and the
second one is a string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">'Offline'</span></code>).</p>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"nd">@event</span><span class=3D"p">(</span><span=
 class=3D"n">SomeInterface</span><span class=3D"p">,</span> <span class=3D"=
p">[</span><span class=3D"s1">'Online'</span><span class=3D"p">,</span> <sp=
an class=3D"s1">'Offline'</span><span class=3D"p">])</span>
<span class=3D"k">def</span> <span class=3D"nf">HandleConnection</span><spa=
n class=3D"p">(</span><span class=3D"n">interface</span><span class=3D"p">,=
</span> <span class=3D"n">state</span><span class=3D"p">):</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s1">'{} is now {}'</span><span class=3D"o">.</span><span class=3D"n">format=
</span><span class=3D"p">(</span><span class=3D"n">interface</span><span cl=
ass=3D"o">.</span><span class=3D"n">Port</span><span class=3D"p">,</span> <=
span class=3D"n">state</span><span class=3D"p">))</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.SerialInterface.Online">
<code class=3D"descname">Online</code><a class=3D"headerlink" href=3D"http:=
//127.0.0.1:8080/interface.html#extronlib.interface.SerialInterface.Online"=
 title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when port goes online</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
interface</span></code></a> instance triggering the event and the
second one is a string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">'Online'</span></code>).</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.SerialInterface.Parity">
<code class=3D"descname">Parity</code><a class=3D"headerlink" href=3D"http:=
//127.0.0.1:8080/interface.html#extronlib.interface.SerialInterface.Parity"=
 title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">parity</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.SerialInterface.Port">
<code class=3D"descname">Port</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.SerialInterface.Port" tit=
le=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">the port name this interface is attached to</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.SerialInterface.ReceiveData">
<code class=3D"descname">ReceiveData</code><a class=3D"headerlink" href=3D"=
http://127.0.0.1:8080/interface.html#extronlib.interface.SerialInterface.Re=
ceiveData" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Receive Data event handler used for asynchronous
transactions</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#extronlib.interface.SerialInterface" title=3D"extronlib.interface.SerialI=
nterface"><code class=3D"xref py py-class docutils literal notranslate"><sp=
an class=3D"pre">SerialInterface</span></code></a> instance triggering the =
event and the
second one is a bytes object.</p>
<div class=3D"highlight-python notranslate"><table class=3D"highlighttable"=
><tbody><tr><td class=3D"linenos"><div class=3D"linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49</pre></div></td><td class=3D"code"><div class=3D"highlight"><pre><span><=
/span><span class=3D"n">mainProjector</span> <span class=3D"o">=3D</span> <=
span class=3D"n">SerialInterface</span><span class=3D"p">(</span><span clas=
s=3D"n">ConfRoom</span><span class=3D"p">,</span> <span class=3D"s1">'COM1'=
</span><span class=3D"p">)</span>

<span class=3D"n">ProjectorStates</span> <span class=3D"o">=3D</span> <span=
 class=3D"p">{</span>
    <span class=3D"s1">'POWER'</span><span class=3D"p">:</span> <span class=
=3D"p">[</span><span class=3D"s1">'OFF'</span><span class=3D"p">,</span> <s=
pan class=3D"s1">'OFF2ON'</span><span class=3D"p">,</span> <span class=3D"s=
1">'ON'</span><span class=3D"p">,</span> <span class=3D"s1">'ON2PMM'</span>=
<span class=3D"p">,</span> <span class=3D"s1">'PMM'</span><span class=3D"p"=
>,</span> <span class=3D"s1">'PMM2ON'</span><span class=3D"p">,</span> <spa=
n class=3D"s1">'ON2OFF'</span><span class=3D"p">],</span>
    <span class=3D"s1">'INPUT'</span><span class=3D"p">:</span> <span class=
=3D"p">[</span>
        <span class=3D"s1">'D-RGB'</span><span class=3D"p">,</span> <span c=
lass=3D"s1">'A-RGB1'</span><span class=3D"p">,</span> <span class=3D"s1">'A=
-RGB2'</span><span class=3D"p">,</span> <span class=3D"s1">'COMP'</span><sp=
an class=3D"p">,</span> <span class=3D"s1">'VIDEO'</span><span class=3D"p">=
,</span> <span class=3D"s1">'S-VIDEO'</span><span class=3D"p">,</span> <spa=
n class=3D"s1">'HDMI'</span><span class=3D"p">,</span> <span class=3D"s1">'=
USB'</span>
        <span class=3D"p">],</span>
    <span class=3D"s1">'PMM'</span><span class=3D"p">:</span> <span class=
=3D"p">[</span><span class=3D"s1">'OFF'</span><span class=3D"p">,</span> <s=
pan class=3D"s1">'STANDBY'</span><span class=3D"p">]</span>
    <span class=3D"p">}</span>
<span class=3D"n">ProjectorStatus</span> <span class=3D"o">=3D</span> <span=
 class=3D"p">{}</span>
<span class=3D"n">mainBuffer</span> <span class=3D"o">=3D</span> <span clas=
s=3D"s1">''</span>

<span class=3D"c1"># rcvString =3D=3D 'g:POWER=3DON\rg:INPUT=3DHDMI\rg:KEYL=
OCK=3DOFF\rg:PMM=3DEX'</span>
<span class=3D"nd">@event</span><span class=3D"p">(</span><span class=3D"n"=
>mainProjector</span><span class=3D"p">,</span> <span class=3D"s1">'Receive=
Data'</span><span class=3D"p">)</span>
<span class=3D"k">def</span> <span class=3D"nf">MainFeedbackHandler</span><=
span class=3D"p">(</span><span class=3D"n">interface</span><span class=3D"p=
">,</span> <span class=3D"n">rcvString</span><span class=3D"p">):</span>
    <span class=3D"k">global</span> <span class=3D"n">mainBuffer</span>
    <span class=3D"n">tempBuffer</span> <span class=3D"o">=3D</span> <span =
class=3D"n">mainBuffer</span> <span class=3D"o">+</span> <span class=3D"n">=
rcvString</span><span class=3D"o">.</span><span class=3D"n">decode</span><s=
pan class=3D"p">()</span>
    <span class=3D"k">if</span> <span class=3D"n">tempBuffer</span><span cl=
ass=3D"p">[</span><span class=3D"o">-</span><span class=3D"mi">1</span><spa=
n class=3D"p">]</span> <span class=3D"o">!=3D</span> <span class=3D"s1">'</=
span><span class=3D"se">\r</span><span class=3D"s1">'</span><span class=3D"=
p">:</span>              <span class=3D"c1"># Partial message</span>
        <span class=3D"n">last</span> <span class=3D"o">=3D</span> <span cl=
ass=3D"n">tempBuffer</span><span class=3D"o">.</span><span class=3D"n">rfin=
d</span><span class=3D"p">(</span><span class=3D"s1">'</span><span class=3D=
"se">\r</span><span class=3D"s1">'</span><span class=3D"p">)</span>       <=
span class=3D"c1"># Find last &lt;CR&gt;</span>
        <span class=3D"n">mainBuffer</span> <span class=3D"o">=3D</span> <s=
pan class=3D"n">tempBuffer</span><span class=3D"p">[</span><span class=3D"n=
">last</span><span class=3D"o">+</span><span class=3D"mi">1</span><span cla=
ss=3D"p">:]</span>    <span class=3D"c1"># Save the leftovers</span>
        <span class=3D"n">tempBuffer</span> <span class=3D"o">=3D</span> <s=
pan class=3D"n">tempBuffer</span><span class=3D"p">[:</span><span class=3D"=
n">last</span><span class=3D"p">]</span>      <span class=3D"c1"># Deal wit=
h the complete strings</span>
    <span class=3D"k">else</span><span class=3D"p">:</span>
        <span class=3D"n">mainBuffer</span> <span class=3D"o">=3D</span> <s=
pan class=3D"s1">''</span>                     <span class=3D"c1"># All dat=
a handled</span>

    <span class=3D"c1"># Turn rcvString into:</span>
    <span class=3D"c1">#   [['POWER', 'ON'], ['INPUT', 'HDMI'], ['KEYLOCK',=
 'OFF]]</span>
    <span class=3D"n">responses</span> <span class=3D"o">=3D</span> <span c=
lass=3D"p">[</span>
        <span class=3D"n">msg</span><span class=3D"o">.</span><span class=
=3D"n">split</span><span class=3D"p">(</span><span class=3D"s1">':'</span><=
span class=3D"p">)[</span><span class=3D"mi">1</span><span class=3D"p">]</s=
pan><span class=3D"o">.</span><span class=3D"n">split</span><span class=3D"=
p">(</span><span class=3D"s1">'=3D'</span><span class=3D"p">)</span> \
        <span class=3D"k">for</span> <span class=3D"n">msg</span> <span cla=
ss=3D"ow">in</span> <span class=3D"n">tempBuffer</span><span class=3D"o">.<=
/span><span class=3D"n">split</span><span class=3D"p">(</span><span class=
=3D"s1">'</span><span class=3D"se">\r</span><span class=3D"s1">'</span><spa=
n class=3D"p">)</span> \
        <span class=3D"k">if</span> <span class=3D"ow">not</span> <span cla=
ss=3D"n">msg</span> <span class=3D"o">=3D=3D</span> <span class=3D"s1">''</=
span>
        <span class=3D"p">]</span>
    <span class=3D"c1"># Handle responses</span>
    <span class=3D"k">for</span> <span class=3D"n">response</span> <span cl=
ass=3D"ow">in</span> <span class=3D"n">responses</span><span class=3D"p">:<=
/span>
        <span class=3D"n">Command</span><span class=3D"p">,</span> <span cl=
ass=3D"n">State</span> <span class=3D"o">=3D</span> <span class=3D"n">respo=
nse</span><span class=3D"p">[</span><span class=3D"mi">0</span><span class=
=3D"p">],</span> <span class=3D"n">response</span><span class=3D"p">[</span=
><span class=3D"mi">1</span><span class=3D"p">]</span>
        <span class=3D"n">ProjectorStatus</span><span class=3D"p">[</span><=
span class=3D"n">Command</span><span class=3D"p">]</span> <span class=3D"o"=
>=3D</span> <span class=3D"n">State</span>    <span class=3D"c1"># Store da=
ta for use elsewhere</span>
        <span class=3D"k">if</span> <span class=3D"n">Command</span> <span =
class=3D"ow">in</span> <span class=3D"n">ProjectorStates</span><span class=
=3D"p">:</span>      <span class=3D"c1"># Set feedback for each</span>
            <span class=3D"k">try</span><span class=3D"p">:</span>
                <span class=3D"k">if</span> <span class=3D"n">Command</span=
> <span class=3D"o">=3D=3D</span> <span class=3D"s1">'POWER'</span><span cl=
ass=3D"p">:</span>
                    <span class=3D"n">PowerOn</span><span class=3D"o">.</sp=
an><span class=3D"n">SetState</span><span class=3D"p">(</span><span class=
=3D"n">ProjectorStates</span><span class=3D"p">[</span><span class=3D"n">Co=
mmand</span><span class=3D"p">]</span><span class=3D"o">.</span><span class=
=3D"n">index</span><span class=3D"p">(</span><span class=3D"n">State</span>=
<span class=3D"p">))</span>
                <span class=3D"k">elif</span> <span class=3D"n">Command</sp=
an> <span class=3D"o">=3D=3D</span> <span class=3D"s1">'INPUT'</span><span =
class=3D"p">:</span>
                    <span class=3D"n">InputGroup</span><span class=3D"o">.<=
/span><span class=3D"n">SetCurrent</span><span class=3D"p">(</span>
                        <span class=3D"n">ProjectorStates</span><span class=
=3D"p">[</span><span class=3D"n">Command</span><span class=3D"p">]</span><s=
pan class=3D"o">.</span><span class=3D"n">index</span><span class=3D"p">(</=
span><span class=3D"n">State</span><span class=3D"p">)</span>
                        <span class=3D"p">)</span>
                <span class=3D"k">elif</span> <span class=3D"n">Command</sp=
an> <span class=3D"o">=3D=3D</span> <span class=3D"s1">'PMM'</span><span cl=
ass=3D"p">:</span>
                    <span class=3D"n">PowerM</span><span class=3D"o">.</spa=
n><span class=3D"n">SetState</span><span class=3D"p">(</span><span class=3D=
"n">ProjectorStates</span><span class=3D"p">[</span><span class=3D"n">Comma=
nd</span><span class=3D"p">]</span><span class=3D"o">.</span><span class=3D=
"n">index</span><span class=3D"p">(</span><span class=3D"n">State</span><sp=
an class=3D"p">))</span>
            <span class=3D"k">except</span><span class=3D"p">:</span>
                <span class=3D"k">print</span><span class=3D"p">(</span><sp=
an class=3D"s1">'State'</span><span class=3D"p">,</span> <span class=3D"n">=
response</span><span class=3D"p">,</span> <span class=3D"s1">'undefined.'</=
span><span class=3D"p">)</span>
        <span class=3D"k">else</span><span class=3D"p">:</span>
            <span class=3D"k">print</span><span class=3D"p">(</span><span c=
lass=3D"s1">'Unreferenced command:'</span><span class=3D"p">,</span> <span =
class=3D"n">response</span><span class=3D"p">)</span>
</pre></div>
</td></tr></tbody></table></div>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.SerialInterface.Stop">
<code class=3D"descname">Stop</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.SerialInterface.Stop" tit=
le=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">number of stop bits</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">int</td>
</tr>
</tbody>
</table>
</dd></dl>

</dd></dl>

</div>
<div class=3D"section" id=3D"swacreceptacleinterface-class">
<h2><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#extronlib.interface.SWACReceptacleInterface" title=3D"extronlib.inter=
face.SWACReceptacleInterface"><code class=3D"xref py py-class docutils lite=
ral notranslate"><span class=3D"pre">SWACReceptacleInterface</span></code><=
/a> Class<a class=3D"headerlink" href=3D"http://127.0.0.1:8080/interface.ht=
ml#swacreceptacleinterface-class" title=3D"Permalink to this headline">=C2=
=B6</a></h2>
<dl class=3D"class">
<dt id=3D"extronlib.interface.SWACReceptacleInterface">
<em class=3D"property">class </em><code class=3D"descname">SWACReceptacleIn=
terface</code><span class=3D"sig-paren">(</span><em>Host</em>, <em>Port</em=
><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"http://1=
27.0.0.1:8080/interface.html#extronlib.interface.SWACReceptacleInterface" t=
itle=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>This class provides a common interface to a switched AC power recept=
acle on
an Extron product (<a class=3D"reference internal" href=3D"http://127.0.0.1=
:8080/device.html#module-extronlib.device" title=3D"extronlib.device"><code=
 class=3D"xref py py-mod docutils literal notranslate"><span class=3D"pre">=
extronlib.device</span></code></a>). The user can instantiate the
class directly or create a subclass to add, remove, or alter behavior for
different types of devices.</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified">New in version 3.1.</span></p>
</div>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><ul class=3D"first last simple">
<li><strong>Host</strong> (<a class=3D"reference internal" href=3D"http://1=
27.0.0.1:8080/device.html#module-extronlib.device" title=3D"extronlib.devic=
e"><code class=3D"xref py py-mod docutils literal notranslate"><span class=
=3D"pre">extronlib.device</span></code></a>) =E2=80=93 handle to Extron dev=
ice class that instantiated this
interface class</li>
<li><strong>Port</strong> (<em>string</em>) =E2=80=93 port name (e.g. <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">'SAC1'</span></=
code>)</li>
</ul>
</td>
</tr>
</tbody>
</table>
<dl class=3D"method">
<dt id=3D"extronlib.interface.SWACReceptacleInterface.SetState">
<code class=3D"descname">SetState</code><span class=3D"sig-paren">(</span><=
em>State</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=
=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.SWACReceptacle=
Interface.SetState" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><strong>State</strong> (<em>int</em><em>, </em><em>str=
ing</em>) =E2=80=93 output state to be set (<code class=3D"docutils literal=
 notranslate"><span class=3D"pre">'On'</span></code> or <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">1</span></code>, <code class=
=3D"docutils literal notranslate"><span class=3D"pre">'Off'</span></code> o=
r
<code class=3D"docutils literal notranslate"><span class=3D"pre">0</span></=
code>)</td>
</tr>
</tbody>
</table>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">SomeInterface</span><span class=3D"o">.</span=
><span class=3D"n">SetState</span><span class=3D"p">(</span><span class=3D"=
s1">'On'</span><span class=3D"p">)</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.SWACReceptacleInterface.Toggle">
<code class=3D"descname">Toggle</code><span class=3D"sig-paren">(</span><sp=
an class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"http://127.0=
.0.1:8080/interface.html#extronlib.interface.SWACReceptacleInterface.Toggle=
" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Changes the state of the receptacle to the logical opposite of the
current state.</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.SWACReceptacleInterface.Current">
<code class=3D"descname">Current</code><a class=3D"headerlink" href=3D"http=
://127.0.0.1:8080/interface.html#extronlib.interface.SWACReceptacleInterfac=
e.Current" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">instantaneous current draw in Amperes</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">float</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.SWACReceptacleInterface.CurrentChanged">
<code class=3D"descname">CurrentChanged</code><a class=3D"headerlink" href=
=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.SWACReceptacle=
Interface.CurrentChanged" title=3D"Permalink to this definition">=C2=B6</a>=
</dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> triggers when the current draw changes.</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#extronlib.interface.SWACReceptacleInterface" title=3D"extronlib.interface=
.SWACReceptacleInterface"><code class=3D"xref py py-class docutils literal =
notranslate"><span class=3D"pre">SWACReceptacleInterface</span></code></a> =
instance triggering the event, and the
second is the current.</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.SWACReceptacleInterface.Host">
<code class=3D"descname">Host</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.SWACReceptacleInterface.H=
ost" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">handle to Extron device class that instantiated this inte=
rface
class</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body"><a class=3D"reference internal" href=3D"http://127.0=
.0.1:8080/device.html#module-extronlib.device" title=3D"extronlib.device"><=
code class=3D"xref py py-mod docutils literal notranslate"><span class=3D"p=
re">extronlib.device</span></code></a></td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.SWACReceptacleInterface.Offline">
<code class=3D"descname">Offline</code><a class=3D"headerlink" href=3D"http=
://127.0.0.1:8080/interface.html#extronlib.interface.SWACReceptacleInterfac=
e.Offline" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when port goes offline</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
interface</span></code></a> instance triggering the event and the
second one is a string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">'Offline'</span></code>).</p>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"nd">@event</span><span class=3D"p">(</span><span=
 class=3D"n">SomeInterface</span><span class=3D"p">,</span> <span class=3D"=
p">[</span><span class=3D"s1">'Online'</span><span class=3D"p">,</span> <sp=
an class=3D"s1">'Offline'</span><span class=3D"p">])</span>
<span class=3D"k">def</span> <span class=3D"nf">HandleConnection</span><spa=
n class=3D"p">(</span><span class=3D"n">interface</span><span class=3D"p">,=
</span> <span class=3D"n">state</span><span class=3D"p">):</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s1">'{} is now {}'</span><span class=3D"o">.</span><span class=3D"n">format=
</span><span class=3D"p">(</span><span class=3D"n">interface</span><span cl=
ass=3D"o">.</span><span class=3D"n">Port</span><span class=3D"p">,</span> <=
span class=3D"n">state</span><span class=3D"p">))</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.SWACReceptacleInterface.Online">
<code class=3D"descname">Online</code><a class=3D"headerlink" href=3D"http:=
//127.0.0.1:8080/interface.html#extronlib.interface.SWACReceptacleInterface=
.Online" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when port goes online</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
interface</span></code></a> instance triggering the event and the
second one is a string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">'Online'</span></code>).</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.SWACReceptacleInterface.Port">
<code class=3D"descname">Port</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.SWACReceptacleInterface.P=
ort" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">port name</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.SWACReceptacleInterface.State">
<code class=3D"descname">State</code><a class=3D"headerlink" href=3D"http:/=
/127.0.0.1:8080/interface.html#extronlib.interface.SWACReceptacleInterface.=
State" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">current state of the receptacle (<code class=3D"docutils =
literal notranslate"><span class=3D"pre">'On'</span></code>, <code class=3D=
"docutils literal notranslate"><span class=3D"pre">'Off'</span></code>)</td=
>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.SWACReceptacleInterface.StateChanged">
<code class=3D"descname">StateChanged</code><a class=3D"headerlink" href=3D=
"http://127.0.0.1:8080/interface.html#extronlib.interface.SWACReceptacleInt=
erface.StateChanged" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when the receptacle state changes.</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
interface</span></code></a> instance triggering the event, and
the second is a string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">'On'</span></code> or <code class=3D"docutils literal notrans=
late"><span class=3D"pre">'Off'</span></code>).</p>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"nd">@event</span><span class=3D"p">(</span><span=
 class=3D"n">SomeInterface</span><span class=3D"p">,</span> <span class=3D"=
s1">'StateChanged'</span><span class=3D"p">)</span>
<span class=3D"k">def</span> <span class=3D"nf">HandleStateChanged</span><s=
pan class=3D"p">(</span><span class=3D"n">interface</span><span class=3D"p"=
>,</span> <span class=3D"n">state</span><span class=3D"p">):</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s1">'{} is now {}.'</span><span class=3D"o">.</span><span class=3D"n">forma=
t</span><span class=3D"p">(</span><span class=3D"n">interface</span><span c=
lass=3D"o">.</span><span class=3D"n">Port</span><span class=3D"p">,</span> =
<span class=3D"n">state</span><span class=3D"p">))</span>
</pre></div>
</div>
</dd></dl>

</dd></dl>

</div>
<div class=3D"section" id=3D"swpowerinterface-class">
<h2><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#extronlib.interface.SWPowerInterface" title=3D"extronlib.interface.SW=
PowerInterface"><code class=3D"xref py py-class docutils literal notranslat=
e"><span class=3D"pre">SWPowerInterface</span></code></a> Class<a class=3D"=
headerlink" href=3D"http://127.0.0.1:8080/interface.html#swpowerinterface-c=
lass" title=3D"Permalink to this headline">=C2=B6</a></h2>
<dl class=3D"class">
<dt id=3D"extronlib.interface.SWPowerInterface">
<em class=3D"property">class </em><code class=3D"descname">SWPowerInterface=
</code><span class=3D"sig-paren">(</span><em>Host</em>, <em>Port</em><span =
class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"http://127.0.0.=
1:8080/interface.html#extronlib.interface.SWPowerInterface" title=3D"Permal=
ink to this definition">=C2=B6</a></dt>
<dd><p>This is the interface class for the Switched Power ports on Extron d=
evices
(<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/device.html#=
module-extronlib.device" title=3D"extronlib.device"><code class=3D"xref py =
py-mod docutils literal notranslate"><span class=3D"pre">extronlib.device</=
span></code></a>). The user can instantiate the class directly
or create a subclass to add, remove, or alter behavior for different types
of devices.</p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><ul class=3D"first last simple">
<li><strong>Host</strong> (<a class=3D"reference internal" href=3D"http://1=
27.0.0.1:8080/device.html#module-extronlib.device" title=3D"extronlib.devic=
e"><code class=3D"xref py py-mod docutils literal notranslate"><span class=
=3D"pre">extronlib.device</span></code></a>) =E2=80=93 handle to Extron dev=
ice class that instantiated this
interface class</li>
<li><strong>Port</strong> (<em>string</em>) =E2=80=93 port name (e.g. <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">'SPI1'</span></=
code>)</li>
</ul>
</td>
</tr>
</tbody>
</table>
<dl class=3D"method">
<dt id=3D"extronlib.interface.SWPowerInterface.Pulse">
<code class=3D"descname">Pulse</code><span class=3D"sig-paren">(</span><em>=
duration</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=
=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.SWPowerInterfa=
ce.Pulse" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Turns the port on for the specified time in seconds with 10ms accura=
cy
and a 100ms minimum value.</p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><strong>duration</strong> (<em>float</em>) =E2=80=93 p=
ulse duration</td>
</tr>
</tbody>
</table>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">OutputInterface</span><span class=3D"o">.</sp=
an><span class=3D"n">Pulse</span><span class=3D"p">(</span><span class=3D"m=
f">0.3</span><span class=3D"p">)</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.SWPowerInterface.SetState">
<code class=3D"descname">SetState</code><span class=3D"sig-paren">(</span><=
em>State</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=
=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.SWPowerInterfa=
ce.SetState" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><strong>State</strong> (<em>int</em><em>, </em><em>str=
ing</em>) =E2=80=93 output state to be set (<code class=3D"docutils literal=
 notranslate"><span class=3D"pre">'On'</span></code> or <code class=3D"docu=
tils literal notranslate"><span class=3D"pre">1</span></code>, <code class=
=3D"docutils literal notranslate"><span class=3D"pre">'Off'</span></code> o=
r
<code class=3D"docutils literal notranslate"><span class=3D"pre">0</span></=
code>)</td>
</tr>
</tbody>
</table>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">OutputInterface</span><span class=3D"o">.</sp=
an><span class=3D"n">SetState</span><span class=3D"p">(</span><span class=
=3D"s1">'On'</span><span class=3D"p">)</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.SWPowerInterface.Toggle">
<code class=3D"descname">Toggle</code><span class=3D"sig-paren">(</span><sp=
an class=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"http://127.0=
.0.1:8080/interface.html#extronlib.interface.SWPowerInterface.Toggle" title=
=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Changes the state of the IO Object to the logical opposite of the
current state.</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.SWPowerInterface.Host">
<code class=3D"descname">Host</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.SWPowerInterface.Host" ti=
tle=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">handle to Extron device class that instantiated this inte=
rface
class</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body"><a class=3D"reference internal" href=3D"http://127.0=
.0.1:8080/device.html#module-extronlib.device" title=3D"extronlib.device"><=
code class=3D"xref py py-mod docutils literal notranslate"><span class=3D"p=
re">extronlib.device</span></code></a></td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.SWPowerInterface.Offline">
<code class=3D"descname">Offline</code><a class=3D"headerlink" href=3D"http=
://127.0.0.1:8080/interface.html#extronlib.interface.SWPowerInterface.Offli=
ne" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when port goes offline</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
interface</span></code></a> instance triggering the event and the
second one is a string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">'Offline'</span></code>).</p>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"nd">@event</span><span class=3D"p">(</span><span=
 class=3D"n">SomeInterface</span><span class=3D"p">,</span> <span class=3D"=
p">[</span><span class=3D"s1">'Online'</span><span class=3D"p">,</span> <sp=
an class=3D"s1">'Offline'</span><span class=3D"p">])</span>
<span class=3D"k">def</span> <span class=3D"nf">HandleConnection</span><spa=
n class=3D"p">(</span><span class=3D"n">interface</span><span class=3D"p">,=
</span> <span class=3D"n">state</span><span class=3D"p">):</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s1">'{} is now {}'</span><span class=3D"o">.</span><span class=3D"n">format=
</span><span class=3D"p">(</span><span class=3D"n">interface</span><span cl=
ass=3D"o">.</span><span class=3D"n">Port</span><span class=3D"p">,</span> <=
span class=3D"n">state</span><span class=3D"p">))</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.SWPowerInterface.Online">
<code class=3D"descname">Online</code><a class=3D"headerlink" href=3D"http:=
//127.0.0.1:8080/interface.html#extronlib.interface.SWPowerInterface.Online=
" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when port goes online</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
interface</span></code></a> instance triggering the event and the
second one is a string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">'Online'</span></code>).</p>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.SWPowerInterface.Port">
<code class=3D"descname">Port</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.SWPowerInterface.Port" ti=
tle=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">port name</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.SWPowerInterface.State">
<code class=3D"descname">State</code><a class=3D"headerlink" href=3D"http:/=
/127.0.0.1:8080/interface.html#extronlib.interface.SWPowerInterface.State" =
title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">current state of IO port (<code class=3D"docutils literal=
 notranslate"><span class=3D"pre">'On'</span></code>, <code class=3D"docuti=
ls literal notranslate"><span class=3D"pre">'Off'</span></code>)</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

</dd></dl>

</div>
<div class=3D"section" id=3D"volumeinterface-class">
<h2><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#extronlib.interface.VolumeInterface" title=3D"extronlib.interface.Vol=
umeInterface"><code class=3D"xref py py-class docutils literal notranslate"=
><span class=3D"pre">VolumeInterface</span></code></a> Class<a class=3D"hea=
derlink" href=3D"http://127.0.0.1:8080/interface.html#volumeinterface-class=
" title=3D"Permalink to this headline">=C2=B6</a></h2>
<dl class=3D"class">
<dt id=3D"extronlib.interface.VolumeInterface">
<em class=3D"property">class </em><code class=3D"descname">VolumeInterface<=
/code><span class=3D"sig-paren">(</span><em>Host</em>, <em>Port</em><span c=
lass=3D"sig-paren">)</span><a class=3D"headerlink" href=3D"http://127.0.0.1=
:8080/interface.html#extronlib.interface.VolumeInterface" title=3D"Permalin=
k to this definition">=C2=B6</a></dt>
<dd><p>This class will provide a common interface for controlling and colle=
cting
data from Volume Ports on Extron devices (<a class=3D"reference internal" h=
ref=3D"http://127.0.0.1:8080/device.html#module-extronlib.device" title=3D"=
extronlib.device"><code class=3D"xref py py-mod docutils literal notranslat=
e"><span class=3D"pre">extronlib.device</span></code></a>). The
user can instantiate the class directly or create a subclass to add,
remove, or alter behavior for different types of devices.</p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><ul class=3D"first last simple">
<li><strong>Host</strong> (<a class=3D"reference internal" href=3D"http://1=
27.0.0.1:8080/device.html#module-extronlib.device" title=3D"extronlib.devic=
e"><code class=3D"xref py py-mod docutils literal notranslate"><span class=
=3D"pre">extronlib.device</span></code></a>) =E2=80=93 handle to Extron dev=
ice class that instantiated
this interface class</li>
<li><strong>Port</strong> (<em>string</em>) =E2=80=93 port name (e.g. <code=
 class=3D"docutils literal notranslate"><span class=3D"pre">'VOL1'</span></=
code>)</li>
</ul>
</td>
</tr>
</tbody>
</table>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">ConfRoom</span> <span class=3D"o">=3D</span> =
<span class=3D"n">ProcessorDevice</span><span class=3D"p">(</span><span cla=
ss=3D"s1">'ConfRoom 250'</span><span class=3D"p">)</span>
<span class=3D"n">VolumeConfRoom</span> <span class=3D"o">=3D</span> <span =
class=3D"n">VolumeInterface</span><span class=3D"p">(</span><span class=3D"=
n">ConfRoom</span><span class=3D"p">,</span> <span class=3D"s1">'VOL1'</spa=
n><span class=3D"p">)</span>
</pre></div>
</div>
<dl class=3D"method">
<dt id=3D"extronlib.interface.VolumeInterface.SetLevel">
<code class=3D"descname">SetLevel</code><span class=3D"sig-paren">(</span><=
em>Level</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=
=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.VolumeInterfac=
e.SetLevel" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Sets Level of volume control port</p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><strong>Level</strong> (<em>int</em>) =E2=80=93 Level =
(0 % &lt;=3D Value &lt;=3D 100 %).</td>
</tr>
</tbody>
</table>
<div class=3D"highlight-python notranslate"><table class=3D"highlighttable"=
><tbody><tr><td class=3D"linenos"><div class=3D"linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class=3D"code"><div class=3D"highlight"><pre><span><=
/span><span class=3D"n">currentLevel</span> <span class=3D"o">=3D</span> <s=
pan class=3D"mi">0</span>

<span class=3D"nd">@event</span><span class=3D"p">(</span><span class=3D"n"=
>Inc</span><span class=3D"p">,</span> <span class=3D"p">[</span><span class=
=3D"s1">'Pressed'</span><span class=3D"p">,</span> <span class=3D"s1">'Repe=
ated'</span><span class=3D"p">])</span>
<span class=3D"k">def</span> <span class=3D"nf">IncVolume</span><span class=
=3D"p">(</span><span class=3D"n">button</span><span class=3D"p">,</span> <s=
pan class=3D"n">state</span><span class=3D"p">):</span>
    <span class=3D"k">global</span> <span class=3D"n">currentLevel</span>
    <span class=3D"k">if</span> <span class=3D"n">currentLevel</span> <span=
 class=3D"o">&lt;</span> <span class=3D"mi">100</span><span class=3D"p">:</=
span>
        <span class=3D"n">currentLevel</span> <span class=3D"o">+=3D</span>=
 <span class=3D"mi">1</span>
        <span class=3D"n">VolumeConfRoom</span><span class=3D"o">.</span><s=
pan class=3D"n">SetLevel</span><span class=3D"p">(</span><span class=3D"n">=
currentLevel</span><span class=3D"p">)</span>

<span class=3D"nd">@event</span><span class=3D"p">(</span><span class=3D"n"=
>Dec</span><span class=3D"p">,</span> <span class=3D"p">[</span><span class=
=3D"s1">'Pressed'</span><span class=3D"p">,</span> <span class=3D"s1">'Repe=
ated'</span><span class=3D"p">])</span>
<span class=3D"k">def</span> <span class=3D"nf">DecVolume</span><span class=
=3D"p">(</span><span class=3D"n">button</span><span class=3D"p">,</span> <s=
pan class=3D"n">state</span><span class=3D"p">):</span>
    <span class=3D"k">global</span> <span class=3D"n">currentLevel</span>
    <span class=3D"k">if</span> <span class=3D"n">currentLevel</span> <span=
 class=3D"o">&gt;</span> <span class=3D"mi">0</span><span class=3D"p">:</sp=
an>
        <span class=3D"n">currentLevel</span> <span class=3D"o">-=3D</span>=
 <span class=3D"mi">1</span>
        <span class=3D"n">VolumeConfRoom</span><span class=3D"o">.</span><s=
pan class=3D"n">SetLevel</span><span class=3D"p">(</span><span class=3D"n">=
currentLevel</span><span class=3D"p">)</span>
</pre></div>
</td></tr></tbody></table></div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.VolumeInterface.SetMute">
<code class=3D"descname">SetMute</code><span class=3D"sig-paren">(</span><e=
m>Mute</em><span class=3D"sig-paren">)</span><a class=3D"headerlink" href=
=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.VolumeInterfac=
e.SetMute" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p>Sets the mute state.</p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><strong>Mute</strong> (<em>string</em>) =E2=80=93 mute=
 state (<code class=3D"docutils literal notranslate"><span class=3D"pre">'O=
n'</span></code>, <code class=3D"docutils literal notranslate"><span class=
=3D"pre">'Off'</span></code>).</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.VolumeInterface.SetRange">
<code class=3D"descname">SetRange</code><span class=3D"sig-paren">(</span><=
em>Min</em>, <em>Max</em><span class=3D"sig-paren">)</span><a class=3D"head=
erlink" href=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.Vo=
lumeInterface.SetRange" title=3D"Permalink to this definition">=C2=B6</a></=
dt>
<dd><p>Set volume control object=E2=80=99s voltage range.</p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><ul class=3D"first last simple">
<li><strong>Min</strong> (<em>float</em>) =E2=80=93 minimum voltage</li>
<li><strong>Max</strong> (<em>float</em>) =E2=80=93 maximum voltage</li>
</ul>
</td>
</tr>
</tbody>
</table>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">VolumeConfRoom</span><span class=3D"o">.</spa=
n><span class=3D"n">SetRange</span><span class=3D"p">(</span><span class=3D=
"mi">1</span><span class=3D"p">,</span> <span class=3D"mf">7.5</span><span =
class=3D"p">)</span>   <span class=3D"c1"># Voltage</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"method">
<dt id=3D"extronlib.interface.VolumeInterface.SetSoftStart">
<code class=3D"descname">SetSoftStart</code><span class=3D"sig-paren">(</sp=
an><em>SoftStart</em><span class=3D"sig-paren">)</span><a class=3D"headerli=
nk" href=3D"http://127.0.0.1:8080/interface.html#extronlib.interface.Volume=
Interface.SetSoftStart" title=3D"Permalink to this definition">=C2=B6</a></=
dt>
<dd><p>Enable or Disable Soft Start.</p>
<table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Parameters:</th><td =
class=3D"field-body"><strong>SoftStart</strong> (<em>string</em>) =E2=80=93=
 Soft Start state (<code class=3D"docutils literal notranslate"><span class=
=3D"pre">'Enabled'</span></code>, <code class=3D"docutils literal notransla=
te"><span class=3D"pre">'Disabled'</span></code>).</td>
</tr>
</tbody>
</table>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"n">VolumeConfRoom</span><span class=3D"o">.</spa=
n><span class=3D"n">SetSoftStart</span><span class=3D"p">(</span><span clas=
s=3D"s1">'Enabled'</span><span class=3D"p">)</span>
</pre></div>
</div>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.VolumeInterface.Host">
<code class=3D"descname">Host</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.VolumeInterface.Host" tit=
le=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">the host device</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body"><a class=3D"reference internal" href=3D"http://127.0=
.0.1:8080/device.html#module-extronlib.device" title=3D"extronlib.device"><=
code class=3D"xref py py-mod docutils literal notranslate"><span class=3D"p=
re">extronlib.device</span></code></a></td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.VolumeInterface.Level">
<code class=3D"descname">Level</code><a class=3D"headerlink" href=3D"http:/=
/127.0.0.1:8080/interface.html#extronlib.interface.VolumeInterface.Level" t=
itle=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">Current volume level (percentage).</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">int</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.VolumeInterface.Max">
<code class=3D"descname">Max</code><a class=3D"headerlink" href=3D"http://1=
27.0.0.1:8080/interface.html#extronlib.interface.VolumeInterface.Max" title=
=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">Maximum level (0.0 V &lt; Max &lt;=3D 10.0 V).</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">float</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.VolumeInterface.Min">
<code class=3D"descname">Min</code><a class=3D"headerlink" href=3D"http://1=
27.0.0.1:8080/interface.html#extronlib.interface.VolumeInterface.Min" title=
=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">Minimum level (0.0 V &lt;=3D Min &lt; 10.0 V).</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">float</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.VolumeInterface.Mute">
<code class=3D"descname">Mute</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.VolumeInterface.Mute" tit=
le=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">Current state of volume port mute.  (<code class=3D"docut=
ils literal notranslate"><span class=3D"pre">'On'</span></code>, <code clas=
s=3D"docutils literal notranslate"><span class=3D"pre">'Off'</span></code>)=
</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.VolumeInterface.Offline">
<code class=3D"descname">Offline</code><a class=3D"headerlink" href=3D"http=
://127.0.0.1:8080/interface.html#extronlib.interface.VolumeInterface.Offlin=
e" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when port goes offline</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
interface</span></code></a> instance triggering the event and the
second one is a string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">'Offline'</span></code>).</p>
<div class=3D"highlight-python notranslate"><div class=3D"highlight"><pre><=
span></span><span class=3D"nd">@event</span><span class=3D"p">(</span><span=
 class=3D"n">SomeInterface</span><span class=3D"p">,</span> <span class=3D"=
p">[</span><span class=3D"s1">'Online'</span><span class=3D"p">,</span> <sp=
an class=3D"s1">'Offline'</span><span class=3D"p">])</span>
<span class=3D"k">def</span> <span class=3D"nf">HandleConnection</span><spa=
n class=3D"p">(</span><span class=3D"n">interface</span><span class=3D"p">,=
</span> <span class=3D"n">state</span><span class=3D"p">):</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s1">'{} is now {}'</span><span class=3D"o">.</span><span class=3D"n">format=
</span><span class=3D"p">(</span><span class=3D"n">interface</span><span cl=
ass=3D"o">.</span><span class=3D"n">Port</span><span class=3D"p">,</span> <=
span class=3D"n">state</span><span class=3D"p">))</span>
</pre></div>
</div>
<div class=3D"versionadded">
<p><span class=3D"versionmodified">New in version 3.2.</span></p>
</div>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.VolumeInterface.Online">
<code class=3D"descname">Online</code><a class=3D"headerlink" href=3D"http:=
//127.0.0.1:8080/interface.html#extronlib.interface.VolumeInterface.Online"=
 title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><p><code class=3D"docutils literal notranslate"><span class=3D"pre">Eve=
nt:</span></code> Triggers when port goes online</p>
<p>The callback takes two arguments. The first one is the
<a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface.htm=
l#module-extronlib.interface" title=3D"extronlib.interface"><code class=3D"=
xref py py-mod docutils literal notranslate"><span class=3D"pre">extronlib.=
interface</span></code></a> instance triggering the event and the
second one is a string (<code class=3D"docutils literal notranslate"><span =
class=3D"pre">'Online'</span></code>).</p>
<div class=3D"versionadded">
<p><span class=3D"versionmodified">New in version 3.2.</span></p>
</div>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.VolumeInterface.Port">
<code class=3D"descname">Port</code><a class=3D"headerlink" href=3D"http://=
127.0.0.1:8080/interface.html#extronlib.interface.VolumeInterface.Port" tit=
le=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">the port name this interface is attached to</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

<dl class=3D"attribute">
<dt id=3D"extronlib.interface.VolumeInterface.SoftStart">
<code class=3D"descname">SoftStart</code><a class=3D"headerlink" href=3D"ht=
tp://127.0.0.1:8080/interface.html#extronlib.interface.VolumeInterface.Soft=
Start" title=3D"Permalink to this definition">=C2=B6</a></dt>
<dd><table class=3D"docutils field-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"field-name">
<col class=3D"field-body">
</colgroup><tbody valign=3D"top">
<tr class=3D"field-odd field"><th class=3D"field-name">Returns:</th><td cla=
ss=3D"field-body">Current state of Soft Start. (<code class=3D"docutils lit=
eral notranslate"><span class=3D"pre">'Enabled'</span></code>, <code class=
=3D"docutils literal notranslate"><span class=3D"pre">'Disabled'</span></co=
de>)</td>
</tr>
<tr class=3D"field-even field"><th class=3D"field-name">Return type:</th><t=
d class=3D"field-body">string</td>
</tr>
</tbody>
</table>
</dd></dl>

</dd></dl>

</div>
</div>


          </div>
        </div>
      </div>
      <div class=3D"sphinxsidebar" role=3D"navigation" aria-label=3D"main n=
avigation">
        <div class=3D"sphinxsidebarwrapper">
  <h3><a href=3D"http://127.0.0.1:8080/index.html">Table Of Contents</a></h=
3>
  <ul>
<li><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#">interface Package</a><ul>
<li><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#circuitbreakerinterface-class"><code class=3D"docutils literal notran=
slate"><span class=3D"pre">CircuitBreakerInterface</span></code> Class</a><=
/li>
<li><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#clientobject-class"><code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">ClientObject</span></code> Class</a></li>
<li><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#contactinterface-class"><code class=3D"docutils literal notranslate">=
<span class=3D"pre">ContactInterface</span></code> Class</a></li>
<li><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#digitalinputinterface-class"><code class=3D"docutils literal notransl=
ate"><span class=3D"pre">DigitalInputInterface</span></code> Class</a></li>
<li><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#digitaliointerface-class"><code class=3D"docutils literal notranslate=
"><span class=3D"pre">DigitalIOInterface</span></code> Class</a></li>
<li><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#ethernetclientinterface-class"><code class=3D"docutils literal notran=
slate"><span class=3D"pre">EthernetClientInterface</span></code> Class</a><=
/li>
<li><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#ethernetserverinterface-class"><code class=3D"docutils literal notran=
slate"><span class=3D"pre">EthernetServerInterface</span></code> Class</a><=
/li>
<li><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#ethernetserverinterfaceex-class"><code class=3D"docutils literal notr=
anslate"><span class=3D"pre">EthernetServerInterfaceEx</span></code> Class<=
/a></li>
<li><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#flexiointerface-class"><code class=3D"docutils literal notranslate"><=
span class=3D"pre">FlexIOInterface</span></code> Class</a></li>
<li><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#irinterface-class"><code class=3D"docutils literal notranslate"><span=
 class=3D"pre">IRInterface</span></code> Class</a></li>
<li><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#poeinterface-class"><code class=3D"docutils literal notranslate"><spa=
n class=3D"pre">PoEInterface</span></code> Class</a></li>
<li><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#relayinterface-class"><code class=3D"docutils literal notranslate"><s=
pan class=3D"pre">RelayInterface</span></code> Class</a></li>
<li><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#serialinterface-class"><code class=3D"docutils literal notranslate"><=
span class=3D"pre">SerialInterface</span></code> Class</a></li>
<li><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#swacreceptacleinterface-class"><code class=3D"docutils literal notran=
slate"><span class=3D"pre">SWACReceptacleInterface</span></code> Class</a><=
/li>
<li><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#swpowerinterface-class"><code class=3D"docutils literal notranslate">=
<span class=3D"pre">SWPowerInterface</span></code> Class</a></li>
<li><a class=3D"reference internal" href=3D"http://127.0.0.1:8080/interface=
.html#volumeinterface-class"><code class=3D"docutils literal notranslate"><=
span class=3D"pre">VolumeInterface</span></code> Class</a></li>
</ul>
</li>
</ul>

  <h4>Previous topic</h4>
  <p class=3D"topless"><a href=3D"http://127.0.0.1:8080/device.html" title=
=3D"previous chapter">device Package</a></p>
  <h4>Next topic</h4>
  <p class=3D"topless"><a href=3D"http://127.0.0.1:8080/software.html" titl=
e=3D"next chapter">software Package</a></p>
<div id=3D"searchbox" style=3D"" role=3D"search">
  <h3>Quick search</h3>
    <div class=3D"searchformwrapper">
    <form class=3D"search" action=3D"http://127.0.0.1:8080/search.html" met=
hod=3D"get">
      <input type=3D"text" name=3D"q">
      <input type=3D"submit" value=3D"Go">
     =20
     =20
    </form>
    </div>
</div>

        </div>
      </div>
      <div class=3D"clearer"></div>
    </div>
    <div class=3D"related" role=3D"navigation" aria-label=3D"related naviga=
tion">
      <h3>Navigation</h3>
      <ul>
        <li class=3D"right" style=3D"margin-right: 10px">
          <a href=3D"http://127.0.0.1:8080/genindex.html" title=3D"General =
Index">index</a></li>
        <li class=3D"right">
          <a href=3D"http://127.0.0.1:8080/py-modindex.html" title=3D"Pytho=
n Module Index">modules</a> |</li>
        <li class=3D"right">
          <a href=3D"http://127.0.0.1:8080/software.html" title=3D"software=
 Package">next</a> |</li>
        <li class=3D"right">
          <a href=3D"http://127.0.0.1:8080/device.html" title=3D"device Pac=
kage">previous</a> |</li>
        <li class=3D"nav-item nav-item-0"><a href=3D"http://127.0.0.1:8080/=
index.html">Extron Library</a></li>
		<li><span class=3D"version_switcher_placeholder"><select><option value=3D=
"3.4" selected=3D"selected">3.4r7</option><option value=3D"3.3">3.3</option=
><option value=3D"3.2">3.2</option><option value=3D"3.1">3.1</option><optio=
n value=3D"2.9">2.9</option></select></span></li>
		<li><a href=3D"http://127.0.0.1:8080/interface.html#">Documentation</a> =
=C2=BB </li>

          <li class=3D"nav-item nav-item-1"><a href=3D"http://127.0.0.1:808=
0/extronlib.html">extronlib Package</a> =C2=BB</li>=20
      </ul>
    </div>
    <div class=3D"footer" role=3D"contentinfo">
        =C2=A9 Copyright 2019, Extron (68-2906-01).
    </div>
  <!-- Code injected by live-server -->


</body></html>
------MultipartBoundary--yV7thi7h7yIOVpFHd4zV4ZYR8ecewD80fQvacJNAGL----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://127.0.0.1:8080/_static/classic.css

@charset "utf-8";

@import url("basic.css");

body { font-family: sans-serif; font-size: 100%; background-color: rgb(17, =
48, 61); color: rgb(0, 0, 0); margin: 0px; padding: 0px; }

div.document { background-color: rgb(28, 78, 99); }

div.documentwrapper { float: left; width: 100%; }

div.bodywrapper { margin: 0px 0px 0px 230px; }

div.body { background-color: rgb(255, 255, 255); color: rgb(0, 0, 0); paddi=
ng: 0px 20px 30px; }

div.footer { color: rgb(255, 255, 255); width: 100%; padding: 9px 0px; text=
-align: center; font-size: 75%; }

div.footer a { color: rgb(255, 255, 255); text-decoration: underline; }

div.related { background-color: rgb(19, 63, 82); line-height: 30px; color: =
rgb(255, 255, 255); }

div.related a { color: rgb(255, 255, 255); }

div.sphinxsidebar { }

div.sphinxsidebar h3 { font-family: "Trebuchet MS", sans-serif; color: rgb(=
255, 255, 255); font-size: 1.4em; font-weight: normal; margin: 0px; padding=
: 0px; }

div.sphinxsidebar h3 a { color: rgb(255, 255, 255); }

div.sphinxsidebar h4 { font-family: "Trebuchet MS", sans-serif; color: rgb(=
255, 255, 255); font-size: 1.3em; font-weight: normal; margin: 5px 0px 0px;=
 padding: 0px; }

div.sphinxsidebar p { color: rgb(255, 255, 255); }

div.sphinxsidebar p.topless { margin: 5px 10px 10px; }

div.sphinxsidebar ul { margin: 10px; padding: 0px; color: rgb(255, 255, 255=
); }

div.sphinxsidebar a { color: rgb(152, 219, 204); }

div.sphinxsidebar input { border: 1px solid rgb(152, 219, 204); font-family=
: sans-serif; font-size: 1em; }

a { color: rgb(53, 95, 124); text-decoration: none; }

a:visited { color: rgb(53, 95, 124); text-decoration: none; }

a:hover { text-decoration: underline; }

div.body h1, div.body h2, div.body h3, div.body h4, div.body h5, div.body h=
6 { font-family: "Trebuchet MS", sans-serif; background-color: rgb(242, 242=
, 242); font-weight: normal; color: rgb(32, 67, 92); border-bottom: 1px sol=
id rgb(204, 204, 204); margin: 20px -20px 10px; padding: 3px 0px 3px 10px; =
}

div.body h1 { margin-top: 0px; font-size: 200%; }

div.body h2 { font-size: 160%; }

div.body h3 { font-size: 140%; }

div.body h4 { font-size: 120%; }

div.body h5 { font-size: 110%; }

div.body h6 { font-size: 100%; }

a.headerlink { color: rgb(198, 15, 15); font-size: 0.8em; padding: 0px 4px;=
 text-decoration: none; }

a.headerlink:hover { background-color: rgb(198, 15, 15); color: white; }

div.body p, div.body dd, div.body li, div.body blockquote { text-align: jus=
tify; line-height: 130%; }

div.admonition p.admonition-title + p { display: inline; }

div.admonition p { margin-bottom: 5px; }

div.admonition pre { margin-bottom: 5px; }

div.admonition ul, div.admonition ol { margin-bottom: 5px; }

div.note { background-color: rgb(238, 238, 238); border: 1px solid rgb(204,=
 204, 204); }

div.seealso { background-color: rgb(255, 255, 204); border: 1px solid rgb(2=
55, 255, 102); }

div.topic { background-color: rgb(238, 238, 238); }

div.warning { background-color: rgb(255, 228, 228); border: 1px solid rgb(2=
55, 102, 102); }

p.admonition-title { display: inline; }

p.admonition-title::after { content: ":"; }

pre { padding: 5px; background-color: rgb(238, 255, 204); color: rgb(51, 51=
, 51); line-height: 120%; border-top: 1px solid rgb(170, 204, 153); border-=
bottom: 1px solid rgb(170, 204, 153); border-image: initial; border-left: n=
one; border-right: none; }

code { background-color: rgb(236, 240, 243); padding: 0px 1px; font-size: 0=
.95em; }

th { background-color: rgb(238, 221, 238); }

.warning code { background: rgb(239, 194, 194); }

.note code { background: rgb(214, 214, 214); }

.viewcode-back { font-family: sans-serif; }

div.viewcode-block:target { background-color: rgb(244, 222, 191); border-to=
p: 1px solid rgb(170, 204, 153); border-bottom: 1px solid rgb(170, 204, 153=
); }

div.code-block-caption { color: rgb(239, 239, 239); background-color: rgb(2=
8, 78, 99); }
------MultipartBoundary--yV7thi7h7yIOVpFHd4zV4ZYR8ecewD80fQvacJNAGL----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://127.0.0.1:8080/_static/basic.css

@charset "utf-8";

div.clearer { clear: both; }

div.related { width: 100%; font-size: 90%; }

div.related h3 { display: none; }

div.related ul { margin: 0px; padding: 0px 0px 0px 10px; list-style: none; =
}

div.related li { display: inline; }

div.related li.right { float: right; margin-right: 5px; }

div.sphinxsidebarwrapper { padding: 10px 5px 0px 10px; }

div.sphinxsidebar { float: left; width: 230px; margin-left: -100%; font-siz=
e: 90%; overflow-wrap: break-word; }

div.sphinxsidebar ul { list-style: none; }

div.sphinxsidebar ul ul, div.sphinxsidebar ul.want-points { margin-left: 20=
px; list-style: square; }

div.sphinxsidebar ul ul { margin-top: 0px; margin-bottom: 0px; }

div.sphinxsidebar form { margin-top: 10px; }

div.sphinxsidebar input { border: 1px solid rgb(152, 219, 204); font-family=
: sans-serif; font-size: 1em; }

div.sphinxsidebar #searchbox input[type=3D"text"] { float: left; width: 80%=
; padding: 0.25em; box-sizing: border-box; }

div.sphinxsidebar #searchbox input[type=3D"submit"] { float: left; width: 2=
0%; border-left: none; padding: 0.25em; box-sizing: border-box; }

img { border: 0px; max-width: 100%; }

ul.search { margin: 10px 0px 0px 20px; padding: 0px; }

ul.search li { padding: 5px 0px 5px 20px; background-image: url("file.png")=
; background-repeat: no-repeat; background-position: 0px 7px; }

ul.search li a { font-weight: bold; }

ul.search li div.context { color: rgb(136, 136, 136); margin: 2px 0px 0px 3=
0px; text-align: left; }

ul.keywordmatches li.goodmatch a { font-weight: bold; }

table.contentstable { width: 90%; margin-left: auto; margin-right: auto; }

table.contentstable p.biglink { line-height: 150%; }

a.biglink { font-size: 1.3em; }

span.linkdescr { font-style: italic; padding-top: 5px; font-size: 90%; }

table.indextable { width: 100%; }

table.indextable td { text-align: left; vertical-align: top; }

table.indextable ul { margin-top: 0px; margin-bottom: 0px; list-style-type:=
 none; }

table.indextable > tbody > tr > td > ul { padding-left: 0em; }

table.indextable tr.pcap { height: 10px; }

table.indextable tr.cap { margin-top: 10px; background-color: rgb(242, 242,=
 242); }

img.toggler { margin-right: 3px; margin-top: 3px; cursor: pointer; }

div.modindex-jumpbox { border-top: 1px solid rgb(221, 221, 221); border-bot=
tom: 1px solid rgb(221, 221, 221); margin: 1em 0px; padding: 0.4em; }

div.genindex-jumpbox { border-top: 1px solid rgb(221, 221, 221); border-bot=
tom: 1px solid rgb(221, 221, 221); margin: 1em 0px; padding: 0.4em; }

table.modindextable td { padding: 2px; border-collapse: collapse; }

div.body { min-width: 450px; max-width: 800px; }

div.body p, div.body dd, div.body li, div.body blockquote { }

a.headerlink { visibility: hidden; }

h1:hover > a.headerlink, h2:hover > a.headerlink, h3:hover > a.headerlink, =
h4:hover > a.headerlink, h5:hover > a.headerlink, h6:hover > a.headerlink, =
dt:hover > a.headerlink, caption:hover > a.headerlink, p.caption:hover > a.=
headerlink, div.code-block-caption:hover > a.headerlink { visibility: visib=
le; }

div.body p.caption { text-align: inherit; }

div.body td { text-align: left; }

.first { margin-top: 0px !important; }

p.rubric { margin-top: 30px; font-weight: bold; }

img.align-left, .figure.align-left, object.align-left { clear: left; float:=
 left; margin-right: 1em; }

img.align-right, .figure.align-right, object.align-right { clear: right; fl=
oat: right; margin-left: 1em; }

img.align-center, .figure.align-center, object.align-center { display: bloc=
k; margin-left: auto; margin-right: auto; }

.align-left { text-align: left; }

.align-center { text-align: center; }

.align-right { text-align: right; }

div.sidebar { margin: 0px 0px 0.5em 1em; border: 1px solid rgb(221, 221, 18=
7); padding: 7px 7px 0px; background-color: rgb(255, 255, 238); width: 40%;=
 float: right; }

p.sidebar-title { font-weight: bold; }

div.topic { border: 1px solid rgb(204, 204, 204); padding: 7px 7px 0px; mar=
gin: 10px 0px; }

p.topic-title { font-size: 1.1em; font-weight: bold; margin-top: 10px; }

div.admonition { margin-top: 10px; margin-bottom: 10px; padding: 7px; }

div.admonition dt { font-weight: bold; }

div.admonition dl { margin-bottom: 0px; }

p.admonition-title { margin: 0px 10px 5px 0px; font-weight: bold; }

div.body p.centered { text-align: center; margin-top: 25px; }

table.docutils { border: 0px; border-collapse: collapse; }

table.align-center { margin-left: auto; margin-right: auto; }

table caption span.caption-number { font-style: italic; }

table caption span.caption-text { }

table.docutils td, table.docutils th { padding: 1px 8px 1px 5px; border-wid=
th: 0px 0px 1px; border-top-style: initial; border-top-color: initial; bord=
er-left-style: initial; border-left-color: initial; border-right-style: ini=
tial; border-right-color: initial; border-bottom-style: solid; border-botto=
m-color: rgb(170, 170, 170); }

table.footnote td, table.footnote th { border: 0px !important; }

th { text-align: left; padding-right: 5px; }

table.citation { border-left: 1px solid gray; margin-left: 1px; }

table.citation td { border-bottom: none; }

div.figure { margin: 0.5em; padding: 0.5em; }

div.figure p.caption { padding: 0.3em; }

div.figure p.caption span.caption-number { font-style: italic; }

div.figure p.caption span.caption-text { }

table.field-list td, table.field-list th { border: 0px !important; }

.field-list ul { margin: 0px; padding-left: 1em; }

.field-list p { margin: 0px; }

.field-name { hyphens: manual; }

ol.arabic { list-style: decimal; }

ol.loweralpha { list-style: lower-alpha; }

ol.upperalpha { list-style: upper-alpha; }

ol.lowerroman { list-style: lower-roman; }

ol.upperroman { list-style: upper-roman; }

dl { margin-bottom: 15px; }

dd p { margin-top: 0px; }

dd ul, dd table { margin-bottom: 10px; }

dd { margin-top: 3px; margin-bottom: 10px; margin-left: 30px; }

dt:target, span.highlighted { background-color: rgb(251, 229, 78); }

rect.highlighted { fill: rgb(251, 229, 78); }

dl.glossary dt { font-weight: bold; font-size: 1.1em; }

.optional { font-size: 1.3em; }

.sig-paren { font-size: larger; }

.versionmodified { font-style: italic; }

.system-message { background-color: rgb(255, 221, 170); padding: 5px; borde=
r: 3px solid red; }

.footnote:target { background-color: rgb(255, 255, 170); }

.line-block { display: block; margin-top: 1em; margin-bottom: 1em; }

.line-block .line-block { margin-top: 0px; margin-bottom: 0px; margin-left:=
 1.5em; }

.guilabel, .menuselection { font-family: sans-serif; }

.accelerator { text-decoration: underline; }

.classifier { font-style: oblique; }

abbr, acronym { border-bottom: 1px dotted; cursor: help; }

pre { overflow: auto hidden; }

span.pre { hyphens: none; }

td.linenos pre { padding: 5px 0px; border: 0px; background-color: transpare=
nt; color: rgb(170, 170, 170); }

table.highlighttable { margin-left: 0.5em; }

table.highlighttable td { padding: 0px 0.5em; }

div.code-block-caption { padding: 2px 5px; font-size: small; }

div.code-block-caption code { background-color: transparent; }

div.code-block-caption + div > div.highlight > pre { margin-top: 0px; }

div.code-block-caption span.caption-number { padding: 0.1em 0.3em; font-sty=
le: italic; }

div.code-block-caption span.caption-text { }

div.literal-block-wrapper { padding: 1em 1em 0px; }

div.literal-block-wrapper div.highlight { margin: 0px; }

code.descname { background-color: transparent; font-weight: bold; font-size=
: 1.2em; }

code.descclassname { background-color: transparent; }

code.xref, a code { background-color: transparent; font-weight: bold; }

h1 code, h2 code, h3 code, h4 code, h5 code, h6 code { background-color: tr=
ansparent; }

.viewcode-link { float: right; }

.viewcode-back { float: right; font-family: sans-serif; }

div.viewcode-block:target { margin: -1px -10px; padding: 0px 10px; }

img.math { vertical-align: middle; }

div.body div.math p { text-align: center; }

span.eqno { float: right; }

span.eqno a.headerlink { position: relative; left: 0px; z-index: 1; }

div.math:hover a.headerlink { visibility: visible; }

@media print {
  div.document, div.documentwrapper, div.bodywrapper { width: 100%; margin:=
 0px !important; }
  div.sphinxsidebar, div.related, div.footer, #top-link { display: none; }
}
------MultipartBoundary--yV7thi7h7yIOVpFHd4zV4ZYR8ecewD80fQvacJNAGL----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://127.0.0.1:8080/_static/pygments.css

@charset "utf-8";

.highlight .hll { background-color: rgb(255, 255, 204); }

.highlight { background: rgb(238, 255, 204); }

.highlight .c { color: rgb(64, 128, 144); font-style: italic; }

.highlight .err { border: 1px solid rgb(255, 0, 0); }

.highlight .k { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .o { color: rgb(102, 102, 102); }

.highlight .ch { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cm { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cp { color: rgb(0, 112, 32); }

.highlight .cpf { color: rgb(64, 128, 144); font-style: italic; }

.highlight .c1 { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cs { color: rgb(64, 128, 144); background-color: rgb(255, 240, =
240); }

.highlight .gd { color: rgb(160, 0, 0); }

.highlight .ge { font-style: italic; }

.highlight .gr { color: rgb(255, 0, 0); }

.highlight .gh { color: rgb(0, 0, 128); font-weight: bold; }

.highlight .gi { color: rgb(0, 160, 0); }

.highlight .go { color: rgb(51, 51, 51); }

.highlight .gp { color: rgb(198, 93, 9); font-weight: bold; }

.highlight .gs { font-weight: bold; }

.highlight .gu { color: rgb(128, 0, 128); font-weight: bold; }

.highlight .gt { color: rgb(0, 68, 221); }

.highlight .kc { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kd { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kn { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kp { color: rgb(0, 112, 32); }

.highlight .kr { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kt { color: rgb(144, 32, 0); }

.highlight .m { color: rgb(32, 128, 80); }

.highlight .s { color: rgb(64, 112, 160); }

.highlight .na { color: rgb(64, 112, 160); }

.highlight .nb { color: rgb(0, 112, 32); }

.highlight .nc { color: rgb(14, 132, 181); font-weight: bold; }

.highlight .no { color: rgb(96, 173, 213); }

.highlight .nd { color: rgb(85, 85, 85); font-weight: bold; }

.highlight .ni { color: rgb(213, 85, 55); font-weight: bold; }

.highlight .ne { color: rgb(0, 112, 32); }

.highlight .nf { color: rgb(6, 40, 126); }

.highlight .nl { color: rgb(0, 32, 112); font-weight: bold; }

.highlight .nn { color: rgb(14, 132, 181); font-weight: bold; }

.highlight .nt { color: rgb(6, 40, 115); font-weight: bold; }

.highlight .nv { color: rgb(187, 96, 213); }

.highlight .ow { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight .mb { color: rgb(32, 128, 80); }

.highlight .mf { color: rgb(32, 128, 80); }

.highlight .mh { color: rgb(32, 128, 80); }

.highlight .mi { color: rgb(32, 128, 80); }

.highlight .mo { color: rgb(32, 128, 80); }

.highlight .sa { color: rgb(64, 112, 160); }

.highlight .sb { color: rgb(64, 112, 160); }

.highlight .sc { color: rgb(64, 112, 160); }

.highlight .dl { color: rgb(64, 112, 160); }

.highlight .sd { color: rgb(64, 112, 160); font-style: italic; }

.highlight .s2 { color: rgb(64, 112, 160); }

.highlight .se { color: rgb(64, 112, 160); font-weight: bold; }

.highlight .sh { color: rgb(64, 112, 160); }

.highlight .si { color: rgb(112, 160, 208); font-style: italic; }

.highlight .sx { color: rgb(198, 93, 9); }

.highlight .sr { color: rgb(35, 83, 136); }

.highlight .s1 { color: rgb(64, 112, 160); }

.highlight .ss { color: rgb(81, 121, 24); }

.highlight .bp { color: rgb(0, 112, 32); }

.highlight .fm { color: rgb(6, 40, 126); }

.highlight .vc { color: rgb(187, 96, 213); }

.highlight .vg { color: rgb(187, 96, 213); }

.highlight .vi { color: rgb(187, 96, 213); }

.highlight .vm { color: rgb(187, 96, 213); }

.highlight .il { color: rgb(32, 128, 80); }
------MultipartBoundary--yV7thi7h7yIOVpFHd4zV4ZYR8ecewD80fQvacJNAGL------
